
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <title>Intertek Calibration Management System</title>
  <link rel="stylesheet" href="styles.css?v=20251015">
  <link rel="manifest" href="manifest.json">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <!-- Defer non-critical scripts for faster initial load -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js" defer></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js" defer></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js" defer></script>
  
  <!-- Loading Screen Styles -->
  <style>
    #appLoadingScreen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #FFB800 0%, #FF8C00 100%);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      transition: opacity 0.5s ease-out;
    }
    #appLoadingScreen.hidden {
      opacity: 0;
      pointer-events: none;
    }
    .loading-logo {
      width: 120px;
      height: 120px;
      margin-bottom: 30px;
      animation: pulse 2s ease-in-out infinite;
    }
    .loading-spinner {
      width: 60px;
      height: 60px;
      border: 4px solid rgba(255,255,255,0.3);
      border-top-color: white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    .loading-text {
      margin-top: 20px;
      color: white;
      font-size: 18px;
      font-weight: 500;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }
  </style>
</head>
<body>
  <!-- Loading Screen -->
  <div id="appLoadingScreen">
    <div class="loading-logo">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="white">
        <circle cx="50" cy="50" r="40" stroke="white" stroke-width="3" fill="none"/>
        <path d="M50 20 L50 50 L70 50" stroke="white" stroke-width="3" fill="none"/>
      </svg>
    </div>
    <div class="loading-spinner"></div>
    <div class="loading-text">Loading Calibration System...</div>
  </div>
  
  <!-- Authentication Check Script -->
  <script>
    // Check authentication before loading the page
    (function() {
      const token = localStorage.getItem('auth_token');
      const user = JSON.parse(localStorage.getItem('user') || 'null');
      
      // If no token or user, redirect to login
      if (!token || !user) {
        window.location.href = '/login.html';
        return;
      }
      
      // Store user info globally for use throughout the app
      window.currentUser = user;
      window.authToken = token;
      
      // Set default headers for all fetch requests
      window.fetchWithAuth = function(url, options = {}) {
        options.headers = {
          ...options.headers,
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        };
        return fetch(url, options)
          .then(response => {
            // If unauthorized, redirect to login
            if (response.status === 401) {
              localStorage.removeItem('auth_token');
              localStorage.removeItem('user');
              window.location.href = '/login.html';
              throw new Error('Session expired');
            }
            return response;
          });
      };
    })();
  </script>
  <!-- Navigation Sidebar -->
  <nav class="sidebar" id="sidebar" aria-label="Main navigation">
    <div class="sidebar-header">
      <div class="sidebar-brand">
        <img src="images/Intertek Logo 2.png" alt="Intertek Logo" class="sidebar-logo">
        <div class="sidebar-title">
          <h3>Intertek</h3>
          <p>Calibration System</p>
        </div>
      </div>
    </div>
    
    <div class="sidebar-menu" role="menu">
      <div class="menu-section">
        <h4>Main</h4>
        <a href="#dashboard" class="menu-item active" data-section="dashboard" aria-current="page">
          <i class="fas fa-tachometer-alt"></i>
          <span>Dashboard</span>
        </a>
        <a href="#worksheets" class="menu-item" data-section="worksheets">
          <i class="fas fa-file-lines"></i>
          <span>Worksheets</span>
        </a>
        <a href="#certificates" class="menu-item" data-section="certificates">
          <i class="fas fa-certificate"></i>
          <span>Certificates</span>
          <span class="menu-notification-badge" id="certificateNotificationBadge" style="display: none;"></span>
        </a>
        <a href="#equipment" class="menu-item" data-section="equipment">
          <i class="fas fa-tools"></i>
          <span>Equipment</span>
        </a>
      </div>
      
      <!-- Services section removed - autocomplete provides equipment suggestions in forms -->
      
      <div class="menu-section">
        <h4>Management</h4>
        <a href="#customers" class="menu-item" data-section="customers">
          <i class="fas fa-users"></i>
          <span>Customers</span>
        </a>
        <a href="#reports" class="menu-item" data-section="reports">
          <i class="fas fa-chart-bar"></i>
          <span>Reports</span>
        </a>
        <a href="#settings" class="menu-item" data-section="settings">
          <i class="fas fa-cog"></i>
          <span>Settings</span>
        </a>
      </div>
    </div>
    
    <div class="sidebar-footer">
      <div class="sidebar-status">
        <div class="status-item" id="connectionStatus">
          <i class="fas fa-wifi" id="connectionIcon"></i>
          <span id="connectionText">Online</span>
        </div>
        <div class="version-info">v2.0.0</div>
      </div>
    </div>
  </nav>

  <!-- Main Content Area -->
  <main class="main-content" id="mainContent">
    
    <!-- Modern Top Header Bar -->
    <header class="top-header">
      <div class="header-left">
        <!-- Mobile Menu Toggle Button -->
        <button class="mobile-menu-toggle" id="mobileMenuToggle" aria-label="Toggle menu" style="display: none;">
          <i class="fas fa-bars"></i>
        </button>
        
        <div class="company-brand">
          <img src="images/intertek-logo.png" alt="Intertek Logo" class="header-logo" id="headerLogo" title="Toggle Sidebar">
          <div class="brand-info">
            <h1 class="company-name">Intertek Ghana Limited</h1>
            <span class="company-tagline">Professional Calibration Services</span>
          </div>
        </div>
      </div>

      <div class="header-center">
        <div class="global-search">
          <i class="fas fa-search search-icon"></i>
          <input type="text" 
                 class="search-input" 
                 id="globalSearch" 
                 placeholder="Search certificates, worksheets, customers...">
        </div>
      </div>
      
      <div class="header-right">
        <!-- Live Clock -->
        <div class="time-widget">
          <i class="fas fa-clock"></i>
          <div class="time-info">
            <span class="time-display" id="currentTime">00:00:00</span>
            <span class="date-display" id="currentDate">Mon, Oct 14</span>
          </div>
        </div>
        
        <!-- Notifications -->
        <div class="notification-container">
          <button class="header-icon-btn" id="notificationBtn" title="Notifications">
            <i class="fas fa-bell"></i>
            <span class="notification-badge" id="notificationCount">0</span>
          </button>
          
          <div class="notification-dropdown" id="notificationDropdown">
            <div class="dropdown-header">
              <h4>Notifications</h4>
              <button class="mark-read-btn" onclick="clearAllNotifications()">Clear all</button>
            </div>
            <div class="dropdown-content" id="notificationList">
              <div class="empty-notifications">
                <i class="fas fa-bell-slash"></i>
                <p>No new notifications</p>
              </div>
            </div>
          </div>
        </div>
        
        <!-- User Profile -->
        <div class="user-profile-widget">
          <button class="user-profile-btn" id="userProfileBtn">
            <div class="user-avatar">
              <img src="https://ui-avatars.com/api/?name=E+Mensah&background=FFB800&color=333&bold=true" alt="User Avatar">
              <span class="user-status-dot online"></span>
            </div>
            <div class="user-details">
              <span class="user-name">E. Mensah</span>
              <span class="user-role">Lead Calibrator</span>
            </div>
            <i class="fas fa-chevron-down dropdown-icon"></i>
          </button>
          
          <div class="user-dropdown" id="userDropdown">
            <div class="user-dropdown-header">
              <div class="user-avatar-large">
                <img src="https://ui-avatars.com/api/?name=E+Mensah&background=FFB800&color=333&bold=true&size=64" alt="User Avatar">
              </div>
              <div class="user-dropdown-info">
                <h4>E. Mensah</h4>
                <p>emensah@intertek.com</p>
                <span class="user-badge">Lead Calibrator</span>
              </div>
            </div>
            <div class="user-dropdown-content">
              <a href="profile.html" class="dropdown-menu-item">
                <i class="fas fa-user"></i>
                <span>My Profile</span>
              </a>
              <a href="#activity" class="dropdown-menu-item">
                <i class="fas fa-history"></i>
                <span>Activity Log</span>
              </a>
              <div class="dropdown-divider"></div>
              <a href="#help" class="dropdown-menu-item">
                <i class="fas fa-question-circle"></i>
                <span>Help & Support</span>
              </a>
              <a href="#logout" class="dropdown-menu-item danger">
                <i class="fas fa-sign-out-alt"></i>
                <span>Logout</span>
              </a>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- Dashboard Section -->
    <section class="content-section active" id="dashboard">
      <!-- Enhanced Dashboard Header -->
      <div class="dashboard-header-enhanced">
        <div class="header-main">
          <div class="header-title-group">
            <h1><i class="fas fa-gauge-high"></i> Field Calibration Dashboard</h1>
            <p class="dashboard-subtitle">Real-time overview of calibration activities and equipment status</p>
          </div>
          <div class="header-actions-group">
            <button class="btn btn-primary btn-large" id="newWorksheetBtn" onclick="window.location.hash='worksheets'">
              <i class="fas fa-plus-circle"></i>
              <span>New Worksheet</span>
            </button>
            <button class="btn btn-secondary" id="quickScanBtn" onclick="openQuickScanModal()">
              <i class="fas fa-qrcode"></i>
              <span>Quick Scan</span>
            </button>
            <button class="btn btn-outline" id="exportDataBtn" onclick="openExportModal()">
              <i class="fas fa-download"></i>
              <span>Export</span>
            </button>
          </div>
        </div>
        
        <!-- Quick Stats Bar -->
        <div class="quick-stats-bar">
          <div class="quick-stat-item">
            <i class="fas fa-calendar-day"></i>
            <div class="quick-stat-content">
              <span class="quick-stat-value" id="todayCount">0</span>
              <span class="quick-stat-label">Today's Calibrations</span>
            </div>
          </div>
          <div class="quick-stat-divider"></div>
          <div class="quick-stat-item">
            <i class="fas fa-clock"></i>
            <div class="quick-stat-content">
              <span class="quick-stat-value" id="weeklyCount">0</span>
              <span class="quick-stat-label">This Week</span>
            </div>
          </div>
          <div class="quick-stat-divider"></div>
          <div class="quick-stat-item warning">
            <i class="fas fa-exclamation-triangle"></i>
            <div class="quick-stat-content">
              <span class="quick-stat-value" id="overdueCount">0</span>
              <span class="quick-stat-label">Overdue</span>
            </div>
          </div>
          <div class="quick-stat-divider"></div>
          <div class="quick-stat-item">
            <i class="fas fa-check-circle"></i>
            <div class="quick-stat-content">
              <span class="quick-stat-value" id="completedToday">0</span>
              <span class="quick-stat-label">Completed Today</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Quick Worksheet Creation Section -->
      <div class="task-bar-section" id="worksheetSection">
        <div class="section-title-bar">
          <h2><i class="fas fa-file-circle-plus"></i> Quick Worksheet Creation</h2>
          <p class="section-subtitle">Select equipment category to start a new calibration worksheet</p>
        </div>

        <div class="worksheet-templates-grid">
          <!-- Pressure Equipment -->
          <div class="worksheet-template-card" onclick="showPressureTemplates()">
            <div class="template-icon pressure-icon">
              <i class="fas fa-gauge-high"></i>
            </div>
            <div class="template-content">
              <h3>Pressure Equipment</h3>
              <p>Gauges, Transmitters, Calibrators, Vacuum</p>
              <div class="template-count">
                <i class="fas fa-file-lines"></i>
                <span>15 templates</span>
              </div>
            </div>
            <div class="template-arrow">
              <i class="fas fa-arrow-right"></i>
            </div>
          </div>

          <!-- Temperature Equipment -->
          <div class="worksheet-template-card" onclick="window.location.hash='worksheets'">
            <div class="template-icon temperature-icon">
              <i class="fas fa-thermometer-half"></i>
            </div>
            <div class="template-content">
              <h3>Temperature Equipment</h3>
              <p>RTDs, Thermocouples, Transmitters, Calibrators</p>
              <div class="template-count">
                <i class="fas fa-file-lines"></i>
                <span>18 templates</span>
              </div>
            </div>
            <div class="template-arrow">
              <i class="fas fa-arrow-right"></i>
            </div>
          </div>

          <!-- Electrical Equipment -->
          <div class="worksheet-template-card" onclick="window.location.hash='worksheets'">
            <div class="template-icon electrical-icon">
              <i class="fas fa-bolt"></i>
            </div>
            <div class="template-content">
              <h3>Electrical Equipment</h3>
              <p>DMMs, Meggers, Oscilloscopes, Power Meters</p>
              <div class="template-count">
                <i class="fas fa-file-lines"></i>
                <span>26 templates</span>
              </div>
            </div>
            <div class="template-arrow">
              <i class="fas fa-arrow-right"></i>
            </div>
          </div>

          <!-- Mechanical Equipment -->
          <div class="worksheet-template-card" onclick="window.location.hash='worksheets'">
            <div class="template-icon mechanical-icon">
              <i class="fas fa-cog"></i>
            </div>
            <div class="template-content">
              <h3>Mechanical Equipment</h3>
              <p>Torque Tools, Force Gauges, Scales, Tachometers</p>
              <div class="template-count">
                <i class="fas fa-file-lines"></i>
                <span>15 templates</span>
              </div>
            </div>
            <div class="template-arrow">
              <i class="fas fa-arrow-right"></i>
            </div>
          </div>

          <!-- Dimensional Equipment -->
          <div class="worksheet-template-card" onclick="window.location.hash='worksheets'">
            <div class="template-icon dimensional-icon">
              <i class="fas fa-ruler"></i>
            </div>
            <div class="template-content">
              <h3>Dimensional Equipment</h3>
              <p>Micrometers, Calipers, Gage Blocks, Indicators</p>
              <div class="template-count">
                <i class="fas fa-file-lines"></i>
                <span>25 templates</span>
              </div>
            </div>
            <div class="template-arrow">
              <i class="fas fa-arrow-right"></i>
            </div>
          </div>

          <!-- Custom/Other Equipment -->
          <div class="worksheet-template-card" onclick="window.location.hash='worksheets'">
            <div class="template-icon custom-icon">
              <i class="fas fa-plus-circle"></i>
            </div>
            <div class="template-content">
              <h3>Custom Worksheet</h3>
              <p>Create blank worksheet for specialized equipment</p>
              <div class="template-count">
                <i class="fas fa-file-circle-plus"></i>
                <span>Start from scratch</span>
              </div>
            </div>
            <div class="template-arrow">
              <i class="fas fa-arrow-right"></i>
            </div>
          </div>
        </div>
      </div>

      <!-- Recent Worksheets & Certificates -->
      <div class="dashboard-grid">
        <div class="dashboard-card full-width">
          <div class="card-header">
            <h3><i class="fas fa-clock-rotate-left"></i> Recent Worksheets & Certificates</h3>
            <button class="btn btn-link" id="viewAllBtn" onclick="window.location.hash='certificates'">
              View All <i class="fas fa-arrow-right"></i>
            </button>
          </div>
          <div class="card-content">
            <div class="recent-worksheets-list">
              <!-- Dynamic content loaded by JavaScript -->
              <div style="text-align: center; padding: 40px 20px; color: #999;">
                <i class="fas fa-spinner fa-spin" style="font-size: 32px; margin-bottom: 12px;"></i>
                <p>Loading recent worksheets...</p>
              </div>
              <!-- Hardcoded items hidden - now loaded dynamically by JavaScript -->
              <div style="display:none;">
              <div class="worksheet-item status-completed">
                <div class="worksheet-status-indicator"></div>
                <div class="worksheet-icon">
                  <i class="fas fa-gauge-high"></i>
                </div>
                <div class="worksheet-info">
                  <h4>Pressure Transmitter - Rosemount 3051</h4>
                  <p class="worksheet-details">
                    <span><i class="fas fa-hashtag"></i> P-2025-001</span>
                    <span><i class="fas fa-building"></i> Ghana Oil Company</span>
                    <span><i class="fas fa-calendar"></i> Oct 14, 2025</span>
                  </p>
                </div>
                <div class="worksheet-status-badge status-completed">
                  <i class="fas fa-check-circle"></i> Completed
                </div>
                <div class="worksheet-actions">
                  <button class="action-btn" title="View Certificate">
                    <i class="fas fa-file-pdf"></i>
                  </button>
                  <button class="action-btn" title="Duplicate">
                    <i class="fas fa-copy"></i>
                  </button>
                  <button class="action-btn" title="Edit">
                    <i class="fas fa-edit"></i>
                  </button>
                </div>
              </div>

              <!-- Worksheet Item 2 -->
              <div class="worksheet-item status-draft">
                <div class="worksheet-status-indicator"></div>
                <div class="worksheet-icon">
                  <i class="fas fa-thermometer-half"></i>
                </div>
                <div class="worksheet-info">
                  <h4>Temperature Sensor - Pt100 RTD</h4>
                  <p class="worksheet-details">
                    <span><i class="fas fa-hashtag"></i> P-2025-002</span>
                    <span><i class="fas fa-building"></i> Food Processing Ltd</span>
                    <span><i class="fas fa-calendar"></i> Oct 14, 2025</span>
                  </p>
                </div>
                <div class="worksheet-status-badge status-draft">
                  <i class="fas fa-pen"></i> Draft
                </div>
                <div class="worksheet-actions">
                  <button class="action-btn primary" title="Continue" onclick="window.location.hash='certificates'">
                    <i class="fas fa-play"></i>
                  </button>
                  <button class="action-btn" title="Duplicate">
                    <i class="fas fa-copy"></i>
                  </button>
                  <button class="action-btn" title="Delete">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>

              <!-- Worksheet Item 3 -->
              <div class="worksheet-item status-pending">
                <div class="worksheet-status-indicator"></div>
                <div class="worksheet-icon">
                  <i class="fas fa-bolt"></i>
                </div>
                <div class="worksheet-info">
                  <h4>Digital Multimeter - Fluke 87V</h4>
                  <p class="worksheet-details">
                    <span><i class="fas fa-hashtag"></i> P-2025-003</span>
                    <span><i class="fas fa-building"></i> Mining Operations Ghana</span>
                    <span><i class="fas fa-calendar"></i> Oct 13, 2025</span>
                  </p>
                </div>
                <div class="worksheet-status-badge status-pending">
                  <i class="fas fa-hourglass-half"></i> Pending Review
                </div>
                <div class="worksheet-actions">
                  <button class="action-btn" title="View">
                    <i class="fas fa-eye"></i>
                  </button>
                  <button class="action-btn" title="Approve">
                    <i class="fas fa-check"></i>
                  </button>
                  <button class="action-btn" title="Edit">
                    <i class="fas fa-edit"></i>
                  </button>
                </div>
              </div>

              <!-- Worksheet Item 4 -->
              <div class="worksheet-item status-completed">
                <div class="worksheet-status-indicator"></div>
                <div class="worksheet-icon">
                  <i class="fas fa-ruler"></i>
                </div>
                <div class="worksheet-info">
                  <h4>Digital Caliper - Mitutoyo 500-196</h4>
                  <p class="worksheet-details">
                    <span><i class="fas fa-hashtag"></i> P-2025-004</span>
                    <span><i class="fas fa-building"></i> Manufacturing Corp</span>
                    <span><i class="fas fa-calendar"></i> Oct 13, 2025</span>
                  </p>
                </div>
                <div class="worksheet-status-badge status-completed">
                  <i class="fas fa-check-circle"></i> Completed
                </div>
                <div class="worksheet-actions">
                  <button class="action-btn" title="View Certificate">
                    <i class="fas fa-file-pdf"></i>
                  </button>
                  <button class="action-btn" title="Duplicate">
                    <i class="fas fa-copy"></i>
                  </button>
                  <button class="action-btn" title="Email">
                    <i class="fas fa-envelope"></i>
                  </button>
                </div>
              </div>

              <!-- Worksheet Item 5 -->
              <div class="worksheet-item status-completed">
                <div class="worksheet-status-indicator"></div>
                <div class="worksheet-icon">
                  <i class="fas fa-weight-hanging"></i>
                </div>
                <div class="worksheet-info">
                  <h4>Platform Scale - 500kg</h4>
                  <p class="worksheet-details">
                    <span><i class="fas fa-hashtag"></i> P-2025-005</span>
                    <span><i class="fas fa-building"></i> Logistics Ghana</span>
                    <span><i class="fas fa-calendar"></i> Oct 12, 2025</span>
                  </p>
                </div>
                <div class="worksheet-status-badge status-completed">
                  <i class="fas fa-check-circle"></i> Completed
                </div>
                <div class="worksheet-actions">
                  <button class="action-btn" title="View Certificate">
                    <i class="fas fa-file-pdf"></i>
                  </button>
                  <button class="action-btn" title="Duplicate">
                    <i class="fas fa-copy"></i>
                  </button>
              </div>
              <!-- End of hidden hardcoded items -->
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Worksheets Section -->
    <section class="content-section" id="worksheets">
      <!-- Worksheet Header -->
      <div class="certificate-header">
        <div class="header-content">
          <h1><i class="fas fa-file-lines"></i> Calibration Worksheets</h1>
          <p class="header-subtitle">Create and manage calibration worksheets for field work</p>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary btn-modern" onclick="showWorksheetList(); loadWorksheetCards(); updateDashboardStats();">
            <i class="fas fa-arrow-left"></i>
            <span>Back to Dashboard</span>
          </button>
          <button class="btn btn-secondary btn-modern" onclick="loadWorksheetCards(); updateDashboardStats();" title="Refresh worksheets">
            <i class="fas fa-sync"></i>
            <span>Refresh</span>
          </button>
          <button class="btn btn-primary btn-modern" onclick="showWorksheetForm()">
            <i class="fas fa-plus"></i>
            <span>New Worksheet</span>
          </button>
        </div>
      </div>

      <!-- Worksheet Type Selector (Initially Shown) -->
      <div id="worksheetTypeSelector" style="display:none">
        <div class="type-selector-container">
          <div class="type-selector-header">
            <h2><i class="fas fa-clipboard-list"></i> Select Worksheet Type</h2>
            <p>Choose the type of equipment you're calibrating to start the appropriate worksheet</p>
          </div>

          <div class="worksheet-type-grid">
            <!-- Pressure Equipment -->
            <div class="worksheet-type-card" onclick="selectWorksheetType('pressure')">
              <div class="type-icon pressure-bg">
                <i class="fas fa-gauge-high"></i>
              </div>
              <h3>Pressure Equipment</h3>
              <p class="type-description">Gauges, Transmitters, Calibrators, Vacuum, Switches</p>
              <ul class="equipment-examples">
                <li>Pressure Transmitters (0-100 to 5000 psi)</li>
                <li>Analog & Digital Gauges</li>
                <li>Differential Pressure</li>
                <li>Vacuum Gauges</li>
                <li>Compound Gauges</li>
              </ul>
              <div class="type-badge">15 Templates Available</div>
            </div>

            <!-- Temperature Equipment -->
            <div class="worksheet-type-card" onclick="selectWorksheetType('temperature')">
              <div class="type-icon temperature-bg">
                <i class="fas fa-thermometer-half"></i>
              </div>
              <h3>Temperature Equipment</h3>
              <p class="type-description">RTDs, Thermocouples, Transmitters, Calibrators</p>
              <ul class="equipment-examples">
                <li>PT100/PT1000 RTDs</li>
                <li>Type K, J, T Thermocouples</li>
                <li>Temperature Transmitters</li>
                <li>Dry Block Calibrators</li>
                <li>Temperature Indicators</li>
              </ul>
              <div class="type-badge">18 Templates Available</div>
            </div>

            <!-- Electrical Equipment -->
            <div class="worksheet-type-card" onclick="selectWorksheetType('electrical')">
              <div class="type-icon electrical-bg">
                <i class="fas fa-bolt"></i>
              </div>
              <h3>Electrical Equipment</h3>
              <p class="type-description">DMMs, Meggers, Oscilloscopes, Power Meters</p>
              <ul class="equipment-examples">
                <li>Digital Multimeters (Fluke, Keysight)</li>
                <li>Insulation Resistance Testers</li>
                <li>Clamp Meters</li>
                <li>Power Quality Analyzers</li>
                <li>Function Generators</li>
              </ul>
              <div class="type-badge">26 Templates Available</div>
            </div>

            <!-- Mechanical Equipment -->
            <div class="worksheet-type-card" onclick="selectWorksheetType('mechanical')">
              <div class="type-icon mechanical-bg">
                <i class="fas fa-cog"></i>
              </div>
              <h3>Mechanical Equipment</h3>
              <p class="type-description">Torque Tools, Force Gauges, Scales, Tachometers</p>
              <ul class="equipment-examples">
                <li>Torque Wrenches (5-500 Nm)</li>
                <li>Force Gauges</li>
                <li>Industrial Scales</li>
                <li>Tachometers & Speed Meters</li>
                <li>Load Cells</li>
              </ul>
              <div class="type-badge">15 Templates Available</div>
            </div>

            <!-- Dimensional Equipment -->
            <div class="worksheet-type-card" onclick="selectWorksheetType('dimensional')">
              <div class="type-icon dimensional-bg">
                <i class="fas fa-ruler"></i>
              </div>
              <h3>Dimensional Equipment</h3>
              <p class="type-description">Micrometers, Calipers, Gage Blocks, Indicators</p>
              <ul class="equipment-examples">
                <li>Digital Calipers (Mitutoyo, Starrett)</li>
                <li>Micrometers (0-25mm to 100-125mm)</li>
                <li>Gage Block Sets</li>
                <li>Height Gauges</li>
                <li>Dial Indicators</li>
              </ul>
              <div class="type-badge">25 Templates Available</div>
            </div>

            <!-- Custom/Other -->
            <div class="worksheet-type-card" onclick="selectWorksheetType('custom')">
              <div class="type-icon custom-bg">
                <i class="fas fa-plus-circle"></i>
              </div>
              <h3>Custom/Other Equipment</h3>
              <p class="type-description">Create blank worksheet for specialized equipment</p>
              <ul class="equipment-examples">
                <li>Flow Meters</li>
                <li>Level Instruments</li>
                <li>Analytical Equipment</li>
                <li>Environmental Chambers</li>
                <li>Any specialized equipment</li>
              </ul>
              <div class="type-badge">Blank Template</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Worksheet Form (Initially Hidden) -->
      <div id="worksheetFormContainer" style="display:none">
        <div class="form-progress">
          <div class="progress-step active" data-step="0">Worksheet Type</div>
          <div class="progress-step" data-step="1">Equipment Details</div>
          <div class="progress-step" data-step="2">Test Results</div>
          <div class="progress-step" data-step="3">Review & Sign</div>
        </div>

        <div class="form-step active" data-step="1">
          <h2>📋 Equipment Details & Specifications</h2>
          <div class="selected-worksheet-type" id="selectedWorksheetType" style="margin-bottom: 20px; padding: 12px; background: #f0f9ff; border-left: 4px solid #0ea5e9; border-radius: 8px;">
            <strong>Worksheet Type:</strong> <span id="worksheetTypeDisplay">Not Selected</span>
            <button onclick="changeWorksheetType()" style="float: right; padding: 4px 12px; background: white; border: 1px solid #0ea5e9; color: #0ea5e9; border-radius: 4px; cursor: pointer;">Change Type</button>
          </div>
          <div class="equipment-grid">
            <label>Equipment Description
              <input id="ws_equipDesc" placeholder="Digital Electronic Scale" required>
            </label>
            <label>Manufacturer
              <input id="ws_manufacturer" placeholder="Prochef" required>
            </label>
            <label>Model Number
              <input id="ws_equipModel" placeholder="Model XYZ-100" required>
            </label>
            <label>Serial Number
              <input id="ws_serialNo" placeholder="SN123456">
            </label>
            <label>Type / Range
              <input id="ws_typeRange" placeholder="0-100 psi">
            </label>
            <label>Accuracy
              <input id="ws_accuracy" placeholder="±0.5%">
            </label>
            <label>Location
              <input id="ws_location" placeholder="Plant A - Production Floor">
            </label>
            <label>Asset/Tag Number
              <input id="ws_assetNo" placeholder="TAG-001">
            </label>
          </div>

          <h3>📍 Customer Information</h3>
          <div class="equipment-grid">
            <label>Customer Name
              <input id="ws_customer" placeholder="Ghana Oil Company" required>
            </label>
            <label>Site Location
              <input id="ws_site" placeholder="Tema Refinery">
            </label>
            <label>Contact Person
              <input id="ws_contact" placeholder="John Mensah">
            </label>
            <label>Phone/Email
              <input id="ws_contactInfo" placeholder="+233 24 123 4567">
            </label>
          </div>

          <h3>🔬 Calibration Standards</h3>
          <div class="equipment-grid">
            <label>Reference Standard
              <input id="ws_refStandard" placeholder="Fluke 718 Pressure Calibrator">
            </label>
            <label>Certificate Number
              <input id="ws_refCertNo" placeholder="CAL-2024-001">
            </label>
            <label>Calibration Date
              <input type="date" id="ws_refCalDate">
            </label>
            <label>Recalibration Due
              <input type="date" id="ws_refDueDate">
            </label>
          </div>
          
          <div class="step-actions">
            <button class="btn-primary" onclick="nextWorksheetStep()">Next: Test Results →</button>
          </div>
        </div>

        <div class="form-step" data-step="2">
          <h2>🔬 Calibration Test Results</h2>
          <div class="test-controls">
            <button id="ws_addRow" class="btn-secondary" onclick="addWorksheetTestRow()">+ Add Test Point</button>
            <button id="ws_addSetTemplate" class="btn-secondary" onclick="addWorksheetStandardSet()">Add Standard Set</button>
            <button id="ws_calculateUncertainty" class="btn-secondary" onclick="calculateWorksheetUncertainty()">Calculate Uncertainty</button>
          </div>
          
          <div class="table-container">
            <table id="ws_resultsTable" class="results-table">
              <thead>
                <tr>
                  <th>Reference Value</th>
                  <th>Direction</th>
                  <th>Measured Value</th>
                  <th>Deviation</th>
                  <th>% Error</th>
                  <th>Uncertainty</th>
                  <th>Pass/Fail</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
          
          <div class="results-summary">
            <h3>📈 Test Summary</h3>
            <div class="summary-stats">
              <div class="stat-item">
                <span class="stat-label">Total Points:</span>
                <span id="ws_totalPoints" class="stat-value">0</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">Passed:</span>
                <span id="ws_passedPoints" class="stat-value">0</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">Failed:</span>
                <span id="ws_failedPoints" class="stat-value">0</span>
              </div>
            </div>
          </div>
          
          <div class="step-actions">
            <button class="btn-secondary" onclick="prevWorksheetStep()">← Previous</button>
            <button class="btn-primary" onclick="nextWorksheetStep()">Next: Review →</button>
          </div>
        </div>

        <div class="form-step" data-step="3">
          <h2>✅ Review & Complete Worksheet</h2>
          
          <div class="review-section">
            <h3>Equipment Summary</h3>
            <div id="ws_equipmentSummary" class="summary-grid"></div>
          </div>
          
          <div class="review-section">
            <h3>Test Results Summary</h3>
            <div id="ws_resultsSummary"></div>
          </div>

          <div class="signature-section">
            <h3>📝 Technician Sign-off</h3>
            <div class="equipment-grid">
              <label>Calibrated By
                <input id="ws_calibratedBy" placeholder="Your Name">
              </label>
              <label>Date
                <input type="date" id="ws_calibrationDate">
              </label>
              <label>Comments/Observations
                <textarea id="ws_comments" rows="3" placeholder="Any observations during calibration..."></textarea>
              </label>
            </div>
          </div>
          
          <div class="step-actions">
            <button class="btn-secondary" onclick="prevWorksheetStep()">← Previous</button>
            <button class="btn-secondary" onclick="saveWorksheetDraft()">💾 Save as Draft</button>
            <button class="btn-success" onclick="completeWorksheet()">✓ Complete Worksheet</button>
          </div>
        </div>
      </div>

      <!-- Worksheet List View (Default) -->
      <div id="worksheetListContainer">
        <div class="filters-bar">
          <div class="filter-group">
            <input type="search" id="worksheetSearch" placeholder="🔍 Search worksheets..." class="search-input">
            <select id="statusFilter" class="filter-select">
              <option value="">All Status</option>
              <option value="draft">Draft</option>
              <option value="in-progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="pending-review">Pending Review</option>
            </select>
            <select id="equipmentTypeFilter" class="filter-select">
              <option value="">All Equipment Types</option>
              <option value="pressure">Pressure</option>
              <option value="temperature">Temperature</option>
              <option value="electrical">Electrical</option>
              <option value="mechanical">Mechanical</option>
              <option value="dimensional">Dimensional</option>
            </select>
          </div>
          <div class="view-toggle">
            <button class="view-btn active" data-view="grid"><i class="fas fa-grip"></i></button>
            <button class="view-btn" data-view="list"><i class="fas fa-list"></i></button>
          </div>
        </div>

        <div class="worksheets-grid" id="worksheetsGrid">
          <!-- Sample Worksheet Cards -->
          <div class="worksheet-card status-completed">
            <div class="worksheet-card-header">
              <div class="status-badge status-completed">
                <i class="fas fa-check-circle"></i> Completed
              </div>
              <div class="worksheet-menu">
                <button class="menu-btn"><i class="fas fa-ellipsis-v"></i></button>
              </div>
            </div>
            <div class="worksheet-card-content">
              <div class="equipment-icon">
                <i class="fas fa-gauge"></i>
              </div>
              <h3>Rosemount 3051 Pressure Transmitter</h3>
              <p class="worksheet-meta">
                <span><i class="fas fa-hashtag"></i> WS-2025-001</span>
                <span><i class="fas fa-building"></i> Ghana Oil Company</span>
              </p>
              <p class="worksheet-details">
                <span><i class="fas fa-calendar"></i> Oct 14, 2025</span>
                <span><i class="fas fa-user"></i> E. Mensah</span>
              </p>
            </div>
            <div class="worksheet-card-footer">
              <button class="btn-sm btn-primary" onclick="viewWorksheet('ws-001')">
                <i class="fas fa-eye"></i> View
              </button>
              <button class="btn-sm btn-secondary" onclick="convertToCertificate('ws-001')">
                <i class="fas fa-certificate"></i> Issue Certificate
              </button>
            </div>
          </div>

          <div class="worksheet-card status-draft">
            <div class="worksheet-card-header">
              <div class="status-badge status-draft">
                <i class="fas fa-file-circle-plus"></i> Draft
              </div>
              <div class="worksheet-menu">
                <button class="menu-btn"><i class="fas fa-ellipsis-v"></i></button>
              </div>
            </div>
            <div class="worksheet-card-content">
              <div class="equipment-icon">
                <i class="fas fa-thermometer-half"></i>
              </div>
              <h3>Pt100 RTD Temperature Sensor</h3>
              <p class="worksheet-meta">
                <span><i class="fas fa-hashtag"></i> WS-2025-002</span>
                <span><i class="fas fa-building"></i> Food Processing Ltd</span>
              </p>
              <p class="worksheet-details">
                <span><i class="fas fa-calendar"></i> Oct 14, 2025</span>
                <span><i class="fas fa-user"></i> I. Aggrey</span>
              </p>
            </div>
            <div class="worksheet-card-footer">
              <button class="btn-sm btn-primary" onclick="continueWorksheet('ws-002')">
                <i class="fas fa-play"></i> Continue
              </button>
              <button class="btn-sm btn-danger" onclick="deleteWorksheet('ws-002')">
                <i class="fas fa-trash"></i> Delete
              </button>
            </div>
          </div>

          <div class="worksheet-card status-pending">
            <div class="worksheet-card-header">
              <div class="status-badge status-pending">
                <i class="fas fa-hourglass-half"></i> Pending Review
              </div>
              <div class="worksheet-menu">
                <button class="menu-btn"><i class="fas fa-ellipsis-v"></i></button>
              </div>
            </div>
            <div class="worksheet-card-content">
              <div class="equipment-icon">
                <i class="fas fa-bolt"></i>
              </div>
              <h3>Fluke 87V Digital Multimeter</h3>
              <p class="worksheet-meta">
                <span><i class="fas fa-hashtag"></i> WS-2025-003</span>
                <span><i class="fas fa-building"></i> Mining Operations</span>
              </p>
              <p class="worksheet-details">
                <span><i class="fas fa-calendar"></i> Oct 13, 2025</span>
                <span><i class="fas fa-user"></i> G. Dinkelman</span>
              </p>
            </div>
            <div class="worksheet-card-footer">
              <button class="btn-sm btn-primary" onclick="viewWorksheet('ws-003')">
                <i class="fas fa-eye"></i> Review
              </button>
              <button class="btn-sm btn-success" onclick="approveWorksheet('ws-003')">
                <i class="fas fa-check"></i> Approve
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Certificate Creation Section -->
    <section class="content-section" id="certificate-creation">
      <!-- Modern Header with Progress -->
      <div class="certificate-header">
        <div class="header-content">
          <h1><i class="fas fa-certificate"></i> Create New Calibration Certificate</h1>
          <p class="header-subtitle">Complete the form below to generate a professional calibration certificate</p>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary btn-modern" id="loadTemplateBtn">
            <i class="fas fa-file-import"></i>
            <span>Load Template</span>
          </button>
          <button class="btn btn-primary btn-modern" id="saveDraftBtn">
            <i class="fas fa-save"></i>
            <span>Save Draft</span>
          </button>
        </div>
      </div>

      <!-- Progress Steps -->
      <div class="progress-wizard">
        <div class="progress-step active" data-step="1">
          <div class="step-circle">
            <i class="fas fa-tools"></i>
            <span class="step-num">1</span>
          </div>
          <div class="step-label">Equipment</div>
        </div>
        <div class="progress-line"></div>
        <div class="progress-step" data-step="2">
          <div class="step-circle">
            <i class="fas fa-user"></i>
            <span class="step-num">2</span>
          </div>
          <div class="step-label">Customer</div>
        </div>
        <div class="progress-line"></div>
        <div class="progress-step" data-step="3">
          <div class="step-circle">
            <i class="fas fa-clipboard-check"></i>
            <span class="step-num">3</span>
          </div>
          <div class="step-label">Calibration</div>
        </div>
        <div class="progress-line"></div>
        <div class="progress-step" data-step="4">
          <div class="step-circle">
            <i class="fas fa-check-circle"></i>
            <span class="step-num">4</span>
          </div>
          <div class="step-label">Review</div>
        </div>
      </div>

      <!-- Multi-step Form -->
      <div class="form-wizard-modern">
        <!-- Step 1: Equipment Details -->
        <div class="step-content active" id="step1" data-step="1">
          <div class="form-card">
            <div class="card-header">
              <h2><i class="fas fa-cog"></i> Equipment Information</h2>
              <p>Specify the equipment details and identification</p>
            </div>
            <div class="card-body">
              <div class="form-row">
                <div class="form-group">
                  <label><i class="fas fa-barcode"></i> Certificate Number</label>
                  <input id="certNo" placeholder="P..." required>
                  <small class="form-hint">Format: P... (e.g., P-001-2025)</small>
                </div>

                <div class="form-group">
                  <label><i class="fas fa-check-circle"></i> Traceable</label>
                  <select id="traceable">
                    <option value="yes">Yes</option>
                    <option value="no">No</option>
                  </select>
                </div>

                <div class="form-group">
                  <label><i class="fas fa-certificate"></i> Accredited</label>
                  <select id="accredited">
                    <option value="yes">Yes</option>
                    <option value="no">No</option>
                  </select>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label><i class="fas fa-wrench"></i> Equipment Type/Description</label>
                  <select id="instrumentType" required>
                    <optgroup label="Pressure Equipment">
                      <option value="pressure_gauge">Pressure Gauge Worksheet</option>
                      <option value="pressure_transmitter">Pressure Transmitter/Transducer Worksheet</option>
                      <option value="pressure_calibrator">Pressure Calibrator Worksheet</option>
                      <option value="differential_pressure">Differential Pressure Gauge</option>
                    </optgroup>
                    <optgroup label="Temperature Equipment">
                      <option value="temperature_block">Temperature Block Calibrator</option>
                      <option value="temperature_sensor">Temperature Sensor</option>
                      <option value="thermometer">Thermometer</option>
                      <option value="thermocouple">Thermocouple</option>
                      <option value="temperature_transmitter">Temperature Transmitter</option>
                    </optgroup>
                    <optgroup label="Electrical Equipment">
                      <option value="multifunction_calibrator">Multi-Function Calibrator Worksheet</option>
                      <option value="digital_multimeter">Digital Multimeter</option>
                      <option value="oscilloscope">Oscilloscope</option>
                      <option value="power_meter">Power Meter</option>
                      <option value="insulation_tester">Insulation Tester</option>
                    </optgroup>
                    <optgroup label="Mechanical Equipment">
                      <option value="resistance_decade">Resistance / Decade Box Worksheet</option>
                      <option value="torque_wrench">Torque Wrench</option>
                      <option value="force_gauge">Force Gauge</option>
                      <option value="weight_scale">Weight Scale</option>
                    </optgroup>
                    <optgroup label="Dimension Equipment">
                      <option value="digital_caliper">Digital Caliper</option>
                      <option value="micrometer">Micrometer</option>
                      <option value="gauge_block">Gauge Block</option>
                      <option value="dial_indicator">Dial Indicator</option>
                      <option value="height_gauge">Height Gauge</option>
                      <option value="vernier_caliper">Vernier Caliper</option>
                    </optgroup>
                  </select>
                </div>

                <div class="form-group">
                  <label><i class="fas fa-industry"></i> Manufacturer</label>
                  <input id="manufacturer" placeholder="Seimens MCS" required>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label><i class="fas fa-tag"></i> Type/Model</label>
                  <input id="model" placeholder="MCS + 1051 + ACPF000.4" required>
                </div>

                <div class="form-group">
                  <label><i class="fas fa-hashtag"></i> Serial Number</label>
                  <input id="serialNumber" placeholder="25515537 + 4330F12 + 97N6412" required>
                </div>

                <div class="form-group">
                  <label><i class="fas fa-ruler"></i> Range</label>
                  <input id="equipmentRange" placeholder="0-100 psi">
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label><i class="fas fa-crosshairs"></i> Resolution</label>
                  <input id="resolution" placeholder="0.01">
                </div>

                <div class="form-group">
                  <label><i class="fas fa-check"></i> Accuracy</label>
                  <input id="accuracy" placeholder="±0.1%">
                </div>

                <div class="form-group">
                  <label><i class="fas fa-star"></i> Asset Number</label>
                  <input id="assetNumber" placeholder="Asset ID">
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label><i class="fas fa-calendar"></i> Job Number</label>
                  <input id="jobNumber" placeholder="Job/Work Order Number">
                </div>

                <div class="form-group">
                  <label><i class="fas fa-calendar-check"></i> Date Received</label>
                  <input type="date" id="dateReceived">
                </div>

                <div class="form-group">
                  <label><i class="fas fa-calendar-times"></i> Date Calibrated</label>
                  <input type="date" id="dateCalibrated">
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Step 2: Customer Information -->
        <div class="step-content" id="step2" data-step="2">
          <div class="form-card">
            <div class="card-header">
              <h2><i class="fas fa-building"></i> Customer Information</h2>
              <p>Enter customer location and contact details</p>
            </div>
            <div class="card-body">
              <div class="form-row">
                <div class="form-group full-width">
                  <label><i class="fas fa-building"></i> Customer</label>
                  <input id="customer" placeholder="Sinopec Ghana" required>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group full-width">
                  <label><i class="fas fa-map-marker-alt"></i> Address / IGL</label>
                  <textarea id="customerAddress" placeholder="P.O. Box AN 5789, Accra-North / GPS Address" rows="3" required></textarea>
                </div>
              </div>
              
              <div class="form-row">
                <div class="form-group full-width">
                  <label><i class="fas fa-envelope"></i> Contact / Email</label>
                  <input id="contactEmail" placeholder="contact@company.com">
                </div>
              </div>

              <div class="form-row">
                <div class="form-group full-width">
                  <label><i class="fas fa-comment-alt"></i> Remarks</label>
                  <textarea id="remarks" placeholder="Additional notes or special instructions" rows="3"></textarea>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Step 3: Calibration Data -->
        <div class="step-content" id="step3" data-step="3">
          <div class="form-card">
            <div class="card-header">
              <h2><i class="fas fa-calendar-alt"></i> Calibration Details</h2>
              <p>Record calibration dates and environmental conditions</p>
            </div>
            <div class="card-body">
              <div class="form-row">
                <div class="form-group">
                  <label><i class="fas fa-calendar-check"></i> Calibration Date</label>
                  <input type="date" id="calibrationDate" required>
                </div>
                
                <div class="form-group">
                  <label><i class="fas fa-calendar-times"></i> Due Date</label>
                  <input type="date" id="dueDate" required>
                </div>
                
                <div class="form-group">
                  <label><i class="fas fa-user-check"></i> Calibrated By</label>
                  <input id="calibratedBy" placeholder="Technician Name" required>
                </div>
              </div>

              <div class="environmental-conditions">
                <h3><i class="fas fa-cloud"></i> Environmental Conditions</h3>
                <div class="form-row">
                  <div class="form-group">
                    <label><i class="fas fa-thermometer-half"></i> Temperature (°C)</label>
                    <div class="input-group">
                      <input type="number" id="temperature" placeholder="20±1" step="0.1">
                      <span class="input-addon">Actual / Specified</span>
                    </div>
                  </div>
                  
                  <div class="form-group">
                    <label><i class="fas fa-tint"></i> Humidity (%)</label>
                    <div class="input-group">
                      <input type="number" id="humidity" placeholder="60%±20%" step="0.1">
                      <span class="input-addon">Actual / Specified</span>
                    </div>
                  </div>
                  
                  <div class="form-group">
                    <label><i class="fas fa-compress-arrows-alt"></i> Atmospheric Pressure</label>
                    <input type="text" id="pressure" placeholder="101.3 kPa">
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Measurement Data Table -->
          <div class="form-card measurement-card">
            <div class="card-header">
              <h2><i class="fas fa-table"></i> Measurement Data</h2>
              <button type="button" class="btn btn-primary btn-modern" id="addMeasurementBtn">
                <i class="fas fa-plus"></i>
                <span>Add Measurement</span>
              </button>
            </div>
            <div class="card-body"</div>
              <div class="table-responsive">
                <div class="measurement-type-selector">
                  <label><i class="fas fa-sliders-h"></i> Measurement Type:</label>
                  <select id="measurementType">
                    <option value="pressure">Pressure (Ref/UUT Pressure, Rising/Falling)</option>
                    <option value="voltage">Voltage (UUT Voltage, Rising/Falling)</option>
                    <option value="current">Current (Mean Ref Pressure, Mean UUT, UUT Current mA)</option>
                    <option value="standard">Standard (Standard Value, Instrument Reading, Error, Uncertainty)</option>
                  </select>
                </div>

                <table id="measurementTable" class="modern-table">
                  <thead>
                    <tr>
                      <th rowspan="2"><i class="fas fa-percentage"></i> % Point</th>
                      <th colspan="2"><i class="fas fa-arrow-up"></i> Ref Pressure</th>
                      <th colspan="2"><i class="fas fa-gauge"></i> UUT Pressure</th>
                      <th colspan="2"><i class="fas fa-bolt"></i> UUT Voltage (V)</th>
                      <th rowspan="2"><i class="fas fa-cog"></i> Actions</th>
                    </tr>
                    <tr>
                      <th>Rising</th>
                      <th>Falling</th>
                      <th>Rising</th>
                      <th>Falling</th>
                      <th>Rising</th>
                      <th>Falling</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td><input type="text" value="0" class="table-input" readonly></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td>
                        <button type="button" class="btn-icon btn-danger" onclick="removeRow(this)" title="Remove row">
                          <i class="fas fa-trash-alt"></i>
                        </button>
                      </td>
                    </tr>
                    <tr>
                      <td><input type="text" value="25%" class="table-input" readonly></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td>
                        <button type="button" class="btn-icon btn-danger" onclick="removeRow(this)" title="Remove row">
                          <i class="fas fa-trash-alt"></i>
                        </button>
                      </td>
                    </tr>
                    <tr>
                      <td><input type="text" value="50%" class="table-input" readonly></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td>
                        <button type="button" class="btn-icon btn-danger" onclick="removeRow(this)" title="Remove row">
                          <i class="fas fa-trash-alt"></i>
                        </button>
                      </td>
                    </tr>
                    <tr>
                      <td><input type="text" value="75%" class="table-input" readonly></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td>
                        <button type="button" class="btn-icon btn-danger" onclick="removeRow(this)" title="Remove row">
                          <i class="fas fa-trash-alt"></i>
                        </button>
                      </td>
                    </tr>
                    <tr>
                      <td><input type="text" value="100%" class="table-input" readonly></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td><input type="number" step="0.01" placeholder="0.00" class="table-input"></td>
                      <td>
                        <button type="button" class="btn-icon btn-danger" onclick="removeRow(this)" title="Remove row">
                          <i class="fas fa-trash-alt"></i>
                        </button>
                      </td>
                    </tr>
                  </tbody>
                </table>

                <div class="calibrator-section">
                  <div class="form-row">
                    <div class="form-group">
                      <label><i class="fas fa-user-check"></i> Calibrated by</label>
                      <input id="calBy" placeholder="F. Aidoo [ ]">
                    </div>
                    <div class="form-group">
                      <label><i class="fas fa-user-tie"></i> Verified by</label>
                      <input id="verifiedBy" placeholder="E. Mensah [ ]">
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Step 4: Review & Generate -->
        <div class="step-content" id="step4" data-step="4">
          <div class="form-card review-card">
            <div class="card-header">
              <h2><i class="fas fa-check-double"></i> Review & Generate Certificate</h2>
              <p>Review all information before generating the certificate</p>
            </div>
            <div class="card-body">
              <div class="preview-section">
                <div id="certificatePreview" class="certificate-preview-box">
                  <div class="preview-placeholder">
                    <i class="fas fa-file-certificate"></i>
                    <p>Click "Preview Certificate" to see a preview</p>
                  </div>
                </div>
              </div>
              
              <div class="action-buttons">
                <button type="button" class="btn btn-secondary btn-modern btn-lg" id="previewBtn">
                  <i class="fas fa-eye"></i>
                  <span>Preview Certificate</span>
                </button>
                <button type="button" class="btn btn-success btn-modern btn-lg" id="generateBtn">
                  <i class="fas fa-file-pdf"></i>
                  <span>Generate PDF Certificate</span>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Wizard Navigation -->
        <div class="wizard-navigation-modern">
          <button type="button" class="btn btn-secondary btn-modern btn-nav" id="prevBtn" style="display: none;">
            <i class="fas fa-arrow-left"></i>
            <span>Previous</span>
          </button>
          <button type="button" class="btn btn-primary btn-modern btn-nav" id="nextBtn">
            <span>Next</span>
            <i class="fas fa-arrow-right"></i>
          </button>
        </div>
      </div>
    </section>

    <!-- Certificate Management Section -->
    <section class="content-section" id="certificates">
      <!-- Certificates Header -->
      <div class="certificate-header">
        <div class="header-content">
          <h1><i class="fas fa-award"></i> Calibration Certificates</h1>
          <p class="header-subtitle">Issued certificates from completed calibration worksheets</p>
        </div>
        <div class="header-actions">
          <button class="btn btn-secondary btn-modern" onclick="openCertificateTemplateModal()">
            <i class="fas fa-palette"></i>
            <span>Templates</span>
          </button>
          <button class="btn btn-secondary btn-modern" onclick="openExportModal()">
            <i class="fas fa-download"></i>
            <span>Export Batch</span>
          </button>
          <button class="btn btn-primary btn-modern" onclick="window.location.hash='worksheets'">
            <i class="fas fa-file-lines"></i>
            <span>Go to Worksheets</span>
          </button>
        </div>
      </div>

      <!-- Certificate Statistics Overview -->
      <div class="quick-stats-bar" style="margin-bottom: 24px;">
        <div class="quick-stat-item">
          <i class="fas fa-certificate" style="color: #2196f3;"></i>
          <div class="quick-stat-content">
            <span class="quick-stat-value" id="totalCertificates">0</span>
            <span class="quick-stat-label">Total Issued</span>
          </div>
        </div>
        <div class="quick-stat-divider"></div>
        <div class="quick-stat-item">
          <i class="fas fa-check-circle" style="color: #4caf50;"></i>
          <div class="quick-stat-content">
            <span class="quick-stat-value" id="activeCertificates">0</span>
            <span class="quick-stat-label">Active</span>
          </div>
        </div>
        <div class="quick-stat-divider"></div>
        <div class="quick-stat-item warning">
          <i class="fas fa-clock" style="color: #ff9800;"></i>
          <div class="quick-stat-content">
            <span class="quick-stat-value" id="expiringSoonCertificates">0</span>
            <span class="quick-stat-label">Expiring Soon (30 days)</span>
          </div>
        </div>
        <div class="quick-stat-divider"></div>
        <div class="quick-stat-item">
          <i class="fas fa-times-circle" style="color: #f44336;"></i>
          <div class="quick-stat-content">
            <span class="quick-stat-value" id="expiredCertificates">0</span>
            <span class="quick-stat-label">Expired</span>
          </div>
        </div>
      </div>

      <!-- Filters and Search Bar -->
      <div class="filters-bar" style="margin-bottom: 20px;">
        <div class="filter-group" style="display: flex; gap: 12px; flex: 1;">
          <input 
            type="search" 
            id="certificateSearch" 
            placeholder="🔍 Search by certificate number, customer, equipment..." 
            class="search-input"
            style="flex: 1; min-width: 300px;">
          
          <select id="certStatusFilter" class="filter-select">
            <option value="">All Status</option>
            <option value="active">Active</option>
            <option value="expiring-soon">Expiring Soon</option>
            <option value="expired">Expired</option>
          </select>
          
          <select id="certEquipmentTypeFilter" class="filter-select">
            <option value="">All Equipment Types</option>
            <option value="pressure">Pressure</option>
            <option value="temperature">Temperature</option>
            <option value="electrical">Electrical</option>
            <option value="mechanical">Mechanical</option>
            <option value="dimensional">Dimensional</option>
            <option value="custom">Other</option>
          </select>

          <input 
            type="date" 
            id="certDateFrom" 
            class="filter-select" 
            placeholder="From Date"
            title="Issue Date From">
          
          <input 
            type="date" 
            id="certDateTo" 
            class="filter-select" 
            placeholder="To Date"
            title="Issue Date To">
        </div>
        
        <div class="view-toggle">
          <button class="view-btn active" data-view="grid" onclick="toggleCertificateView('grid')">
            <i class="fas fa-grip"></i>
          </button>
          <button class="view-btn" data-view="list" onclick="toggleCertificateView('list')">
            <i class="fas fa-list"></i>
          </button>
        </div>
      </div>

      <!-- Certificates Grid View -->
      <div class="certificates-grid" id="certificatesGrid">
        <!-- Certificates will be loaded here dynamically -->
      </div>

      <!-- Certificates List View (Hidden by default) -->
      <div class="certificates-list" id="certificatesList" style="display: none;">
        <table class="data-table">
          <thead>
            <tr>
              <th style="width: 140px;">Certificate No.</th>
              <th>Equipment</th>
              <th>Customer</th>
              <th style="width: 110px;">Issue Date</th>
              <th style="width: 110px;">Due Date</th>
              <th style="width: 100px;">Status</th>
              <th style="width: 200px;">Actions</th>
            </tr>
          </thead>
          <tbody id="certificatesListBody">
            <!-- List view rows will be loaded here -->
          </tbody>
        </table>
      </div>
    </section>

    <section class="certificate-creation" style="display: none;">
      <h2>Create New Intertek Calibration Certificate</h2>
      <div class="form-grid">
        <label>Equipment Type
          <select id="instrumentType">
            <optgroup label="Flow Measurement Services">
              <option value="flow_meter_calibration">Flow Meter Calibration</option>
              <option value="prover_calibration">Prover Calibration</option>
            </optgroup>
            <optgroup label="Tank Calibrations">
              <option value="bulk_storage_tank">Bulk Storage Tank Calibration</option>
              <option value="road_tanker">Road Tanker Calibration</option>
            </optgroup>
            <optgroup label="Test Equipment - Electrical">
              <option value="digital_multimeter">Digital Multimeter</option>
              <option value="oscilloscope">Oscilloscope</option>
              <option value="power_meter">Power Meter</option>
              <option value="insulation_tester">Insulation Tester</option>
            </optgroup>
            <optgroup label="Test Equipment - Pressure">
              <option value="pressure_gauge">Pressure Gauge</option>
              <option value="pressure_transmitter">Pressure Transmitter</option>
              <option value="pressure_calibrator">Pressure Calibrator</option>
              <option value="differential_pressure">Differential Pressure Gauge</option>
            </optgroup>
            <optgroup label="Test Equipment - Temperature">
              <option value="temperature_sensor">Temperature Sensor</option>
              <option value="thermometer">Thermometer</option>
              <option value="thermocouple">Thermocouple</option>
              <option value="temperature_calibrator">Temperature Calibrator</option>
            </optgroup>
            <optgroup label="Test Equipment - Density">
              <option value="density_meter">Density Meter</option>
              <option value="hydrometer">Hydrometer</option>
              <option value="densitometer">Densitometer</option>
            </optgroup>
            <optgroup label="Test Equipment - Dimension">
              <option value="digital_caliper">Digital Caliper</option>
              <option value="micrometer">Micrometer</option>
              <option value="gauge_block">Gauge Block</option>
              <option value="dial_indicator">Dial Indicator</option>
            </optgroup>
            <optgroup label="Other Equipment">
              <option value="digital_scale">Digital Electronic Scale</option>
              <option value="analytical_balance">Analytical Balance</option>
              <option value="torque_wrench">Torque Wrench</option>
              <option value="force_gauge">Force Gauge</option>
              <option value="pipette">Pipette</option>
              <option value="ph_meter">pH Meter</option>
            </optgroup>
          </select>
        </label>
        <label>Service Location
          <select id="serviceLocation">
            <option value="onsite">Onsite Calibration</option>
            <option value="laboratory">Laboratory Based</option>
            <option value="both">Onsite & Laboratory</option>
          </select>
        </label>
        <label>Certificate Number 
          <input id="certNo" placeholder="M001-25" required>
          <small>Format: MXXX-YY (e.g., M018-20)</small>
        </label>
        <label>Issue Date 
          <input type="date" id="dateIssue" required>
        </label>
        <label>Due Date 
          <input type="date" id="dateDue">
        </label>
        <label>Customer 
          <input id="customer" placeholder="TechnipFMC Ghana">
        </label>
        <label>Address
          <textarea id="customerAddress" rows="2" placeholder="Takoradi Commercial Port&#10;Takoradi"></textarea>
        </label>
        <label>Job Reference 
          <input id="jobRef" placeholder="CMS4-004/1">
        </label>
        <label>Site Name
          <input id="siteName" placeholder="IGL Lab">
        </label>
      </div>
      <div class="action-row">
        <button id="newRecord" class="btn-primary" onclick="window.showNewRecordForm && window.showNewRecordForm()">Create New Record</button>
        <button id="loadTemplate" class="btn-secondary" onclick="window.showTemplateDialog && window.showTemplateDialog()">Load Template</button>
      </div>
    </section>

    <div id="formArea" class="calibration-form" style="display:none">
      <div class="form-progress">
        <div class="progress-step active" data-step="1">Equipment Details</div>
        <div class="progress-step" data-step="2">Test Results</div>
        <div class="progress-step" data-step="3">Review & Sign</div>
      </div>

      <div class="form-step active" data-step="1">
        <h2>📋 Equipment Details & Specifications</h2>
        <div class="equipment-grid">
          <label>Equipment Description
            <input id="equipDesc" placeholder="Digital Electronic Scale" required>
          </label>
          <label>Manufacturer
            <input id="manufacturer" placeholder="Prochef" required>
          </label>
          <label>Type / Range
            <input id="typeRange" placeholder="Nil" required>
          </label>
          <label>Serial Number
            <input id="serialNumber" placeholder="6596446" required>
          </label>
          <label>Full Scale (FS)
            <input id="fullScale" type="number" value="100" step="0.001" required>
            <small>Maximum measurement range</small>
          </label>
          <label>Accuracy (% of FS)
            <input id="accuracy" type="number" step="0.001" value="2.0" required>
            <small>Manufacturer specified accuracy</small>
          </label>
          <label>Units
            <select id="units">
              <option value="PSI">PSI</option>
              <option value="Bar">Bar</option>
              <option value="kPa">kPa</option>
              <option value="mbar">mbar</option>
              <option value="N⋅m">N⋅m (Torque)</option>
              <option value="V">Volts</option>
              <option value="A">Amperes</option>
              <option value="°C">°C</option>
              <option value="°F">°F</option>
            </select>
          </label>
          <label>Environmental Conditions
            <input id="envConditions" placeholder="Temp: 20±2°C, RH: 50±10%">
          </label>
        </div>
        
        <div class="intertek-sections">
          <h3>🌡️ Environment Conditions</h3>
          <div class="trace-grid">
            <label>Temperature Range
              <input id="tempRange" placeholder="22.2 to 22.3°C">
            </label>
            <label>Humidity Range
              <input id="humidityRange" placeholder="19.8 to 50.0%">
            </label>
          </div>
        </div>
        
        <div class="traceability-section">
          <h3>📊 Traceability Information</h3>
          <div class="trace-grid">
            <label>Reference Standard
              <input id="refStandard" placeholder="Henry Troemner LLC Standard Test weight, S/No.: TW-009, TW-010, TW-011, TW-012">
            </label>
            <label>Certificate Number
              <input id="refCertNo" placeholder="NIE/QAL/CAC/2019-2022/T194">
            </label>
            <label>Calibration Date
              <input type="date" id="refCalDate">
            </label>
            <label>Recalibration Due
              <input type="date" id="refDueDate">
            </label>
          </div>
        </div>
        
        <div class="step-actions">
          <button class="btn-primary" onclick="nextStep()">Next: Test Results →</button>
        </div>
      </div>

      <div class="form-step" data-step="2">
        <h2>🔬 Calibration Test Results</h2>
        <div class="test-controls">
          <button id="addRow" class="btn-secondary" onclick="window.addBasicTestRow && window.addBasicTestRow()">+ Add Test Point</button>
          <button id="addSetTemplate" class="btn-secondary">Add Standard Set</button>
          <button id="calculateUncertainty" class="btn-secondary">Calculate Uncertainty</button>
        </div>
        
        <div class="table-container">
          <table id="resultsTable" class="results-table">
            <thead>
              <tr>
                <th>Reference Value</th>
                <th>Direction</th>
                <th>Measured Value</th>
                <th>Deviation</th>
                <th>% Error</th>
                <th>Pass/Fail</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
        
        <div class="results-summary">
          <h3>📈 Test Summary</h3>
          <div class="summary-stats">
            <div class="stat-item">
              <span class="stat-label">Total Points:</span>
              <span id="totalPoints" class="stat-value">0</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Passed:</span>
              <span id="passedPoints" class="stat-value">0</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Failed:</span>
              <span id="failedPoints" class="stat-value">0</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Overall Result:</span>
              <span id="overallResult" class="stat-value">-</span>
            </div>
          </div>
        </div>
        
        <div class="attachments-section">
          <h3>📎 Attachments</h3>
          <input type="file" id="fileAttach" multiple accept="image/*,.pdf,.doc,.xlsx">
          <div id="attachmentsList" class="attachments-list"></div>
        </div>
        
        <div class="step-actions">
          <button class="btn-secondary" onclick="prevStep()">← Previous</button>
          <button class="btn-primary" onclick="nextStep()">Next: Review & Sign →</button>
        </div>
      </div>

      <div class="form-step" data-step="3">
        <h2>✍️ Review & Digital Signature</h2>
        
        <div class="review-section">
          <h3>Certificate Preview</h3>
          <div id="certificatePreview" class="certificate-preview">
            <!-- Dynamic preview content -->
          </div>
        </div>
        
        <div class="signature-section">
          <h3>✍️ Approved Signatories</h3>
          <div class="signature-controls">
            <label>Calibrated by
              <input id="techName" placeholder="E. Mensah">
            </label>
            <label>Approved Signatories
              <input id="approvedSigs" placeholder="E. Mensah [ ] I. Aggrey [ ] G. Dinkelman [ ]">
            </label>
          </div>
          
          <div class="comments-section">
            <label>Comments
              <textarea id="comments" rows="4" placeholder="The unit under test(uut) was calibrated according to OIML and by comparison with a standard weight of equal norminal value. The conventional mass has been calculated from the weighing differences under consideration of the air density during the calibration and the assumed density. The unit under test was left for a day before calibration."></textarea>
            </label>
          </div>
          
          <div class="signature-canvas-container">
            <canvas id="sigCanvas" width="400" height="150"></canvas>
            <div class="signature-actions">
              <button id="clearSig" class="btn-secondary">Clear Signature</button>
              <button id="saveSignature" class="btn-secondary">Save Signature</button>
            </div>
          </div>
        </div>
        
        <div class="final-actions">
          <button class="btn-secondary" onclick="prevStep()">← Previous</button>
          <button id="saveLocal" class="btn-success" onclick="window.saveBasicCertificate && window.saveBasicCertificate()">💾 Save Certificate</button>
          <button id="generatePdf" class="btn-primary" onclick="window.generateBasicPdf && window.generateBasicPdf()">📄 Generate PDF</button>
          <button id="downloadPdf" class="btn-primary" onclick="window.downloadPdfDirect && window.downloadPdfDirect()" style="background: #27ae60;">⬇️ Download PDF</button>
        </div>
      </div>
    </div>

    <!-- OLD Certificate Management section removed - functionality now in main certificates page -->

    <!-- Certificate Preview Modal -->
    <div id="certificatePreviewModal" class="modal" style="display:none">
      <div class="modal-content" style="max-width: 900px; max-height: 90vh;">
        <div class="modal-header">
          <h2><i class="fas fa-file-certificate"></i> Certificate Preview</h2>
          <button class="modal-close" onclick="closeCertificatePreview()">&times;</button>
        </div>
        
        <div style="padding: 20px; overflow-y: auto; max-height: calc(90vh - 200px);">
          <div id="certificatePreviewContent" style="background: white; padding: 40px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); min-height: 400px;">
            <!-- Certificate content will be rendered here -->
          </div>
        </div>

        <div class="modal-footer-actions" style="border-top: 1px solid #eee; padding: 16px 20px;">
          <button class="btn-secondary" onclick="closeCertificatePreview()">
            <i class="fas fa-times"></i> Close
          </button>
          <button class="btn-secondary" onclick="editCertificateWorksheet()">
            <i class="fas fa-edit"></i> Edit Worksheet
          </button>
          <button class="btn-secondary" onclick="openCertificateTemplateModal()">
            <i class="fas fa-palette"></i> Change Template
          </button>
          <button class="btn-primary" onclick="downloadCertificatePDF()">
            <i class="fas fa-file-pdf"></i> Download PDF
          </button>
        </div>
      </div>
    </div>

    <!-- Certificate Template Selection Modal -->
    <div id="certificateTemplateModal" class="modal" style="display:none">
      <div class="modal-content" style="max-width: 1000px;">
        <div class="modal-header">
          <h2><i class="fas fa-palette"></i> Certificate Templates</h2>
          <button class="modal-close" onclick="closeCertificateTemplateModal()">&times;</button>
        </div>
        <p class="modal-subtitle">Select a template design for your calibration certificates</p>
        
        <div style="padding: 20px;">
          <div class="template-grid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 20px;">
            
            <!-- Template 1: Classic Professional -->
            <div class="template-card" onclick="selectCertificateTemplate('classic')">
              <div class="template-preview" style="background: linear-gradient(135deg, #f5f5f5 0%, #e0e0e0 100%); padding: 20px; border-radius: 8px; min-height: 200px; display: flex; align-items: center; justify-content: center; border: 3px solid transparent; cursor: pointer; transition: all 0.3s;">
                <div style="text-align: center;">
                  <i class="fas fa-certificate" style="font-size: 48px; color: #1976d2; margin-bottom: 12px;"></i>
                  <div style="background: white; padding: 8px 16px; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                    <div style="font-weight: 600; font-size: 12px; color: #333;">CALIBRATION CERTIFICATE</div>
                    <div style="font-size: 10px; color: #666; margin-top: 4px;">Classic Layout</div>
                  </div>
                </div>
              </div>
              <div style="padding: 12px; text-align: center;">
                <h4 style="margin: 0 0 4px 0; font-size: 14px;">Classic Professional</h4>
                <p style="margin: 0; font-size: 12px; color: #666;">Traditional formal design with company header</p>
              </div>
            </div>

            <!-- Template 2: Modern Minimal -->
            <div class="template-card" onclick="selectCertificateTemplate('modern')">
              <div class="template-preview" style="background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%); padding: 20px; border-radius: 8px; min-height: 200px; display: flex; align-items: center; justify-content: center; border: 3px solid transparent; cursor: pointer; transition: all 0.3s;">
                <div style="text-align: center;">
                  <i class="fas fa-award" style="font-size: 48px; color: #7b1fa2; margin-bottom: 12px;"></i>
                  <div style="background: white; padding: 8px 16px; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.08); border-left: 4px solid #7b1fa2;">
                    <div style="font-weight: 600; font-size: 12px; color: #333;">Calibration Certificate</div>
                    <div style="font-size: 10px; color: #666; margin-top: 4px;">Clean Modern Design</div>
                  </div>
                </div>
              </div>
              <div style="padding: 12px; text-align: center;">
                <h4 style="margin: 0 0 4px 0; font-size: 14px;">Modern Minimal</h4>
                <p style="margin: 0; font-size: 12px; color: #666;">Clean contemporary design with accent colors</p>
              </div>
            </div>

            <!-- Template 3: Detailed Technical -->
            <div class="template-card" onclick="selectCertificateTemplate('technical')">
              <div class="template-preview" style="background: linear-gradient(135deg, #e8f4f8 0%, #d0e8f0 100%); padding: 20px; border-radius: 8px; min-height: 200px; display: flex; align-items: center; justify-content: center; border: 3px solid transparent; cursor: pointer; transition: all 0.3s;">
                <div style="text-align: center;">
                  <i class="fas fa-clipboard-check" style="font-size: 48px; color: #00796b; margin-bottom: 12px;"></i>
                  <div style="background: white; padding: 8px 16px; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); border-top: 3px solid #00796b;">
                    <div style="font-weight: 600; font-size: 11px; color: #333; font-family: monospace;">═══ CALIBRATION ═══</div>
                    <div style="font-size: 10px; color: #666; margin-top: 4px;">Technical Report Format</div>
                  </div>
                </div>
              </div>
              <div style="padding: 12px; text-align: center;">
                <h4 style="margin: 0 0 4px 0; font-size: 14px;">Detailed Technical</h4>
                <p style="margin: 0; font-size: 12px; color: #666;">Comprehensive layout with detailed data tables</p>
              </div>
            </div>

            <!-- Template 4: Elegant Premium -->
            <div class="template-card" onclick="selectCertificateTemplate('premium')">
              <div class="template-preview" style="background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%); padding: 20px; border-radius: 8px; min-height: 200px; display: flex; align-items: center; justify-content: center; border: 3px solid transparent; cursor: pointer; transition: all 0.3s;">
                <div style="text-align: center;">
                  <i class="fas fa-medal" style="font-size: 48px; color: #f57c00; margin-bottom: 12px;"></i>
                  <div style="background: white; padding: 12px 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); border: 2px solid #f57c00;">
                    <div style="font-weight: 700; font-size: 13px; color: #f57c00; letter-spacing: 1px;">CERTIFICATE</div>
                    <div style="font-size: 10px; color: #666; margin-top: 4px; font-style: italic;">of Calibration</div>
                  </div>
                </div>
              </div>
              <div style="padding: 12px; text-align: center;">
                <h4 style="margin: 0 0 4px 0; font-size: 14px;">Elegant Premium</h4>
                <p style="margin: 0; font-size: 12px; color: #666;">Sophisticated design with decorative elements</p>
              </div>
            </div>

          </div>

          <div style="margin-top: 24px; padding: 16px; background: #f5f5f5; border-radius: 8px;">
            <h4 style="margin: 0 0 8px 0; font-size: 13px; color: #333;">
              <i class="fas fa-info-circle"></i> Template Features
            </h4>
            <ul style="margin: 0; padding-left: 20px; font-size: 12px; color: #666;">
              <li>All templates include company logo and branding</li>
              <li>Fully customizable headers, footers, and color schemes</li>
              <li>Optimized for A4 and Letter paper sizes</li>
              <li>Professional PDF output with proper formatting</li>
              <li>Template selection is saved per certificate</li>
            </ul>
          </div>
        </div>

        <div class="modal-footer-actions">
          <button class="btn-secondary" onclick="closeCertificateTemplateModal()">
            <i class="fas fa-times"></i> Cancel
          </button>
        </div>
      </div>
    </div>

    <!-- Equipment Management Section -->
    <section class="content-section" id="equipment">
      <div class="section-header">
        <h2><i class="fas fa-tools"></i> Equipment Management</h2>
        <div class="section-actions">
          <button class="btn-primary" onclick="showSection('certificate-creation')">
            <i class="fas fa-plus"></i> Add Equipment
          </button>
        </div>
      </div>
      <div class="cards-grid">
        <div class="card">
          <h3>Equipment Database</h3>
          <p>Manage and track all calibration equipment in your facility.</p>
          <button class="btn-secondary" onclick="showNotification('Equipment database coming soon!', 'info')">
            <i class="fas fa-database"></i> View Equipment
          </button>
        </div>
      </div>
    </section>

    <!-- Customers Section -->
    <section class="content-section" id="customers">
      <div class="section-header">
        <h2><i class="fas fa-users"></i> Customer Management</h2>
        <div class="section-actions">
          <button class="btn-primary" onclick="showNotification('Customer management coming soon!', 'info')">
            <i class="fas fa-plus"></i> Add Customer
          </button>
        </div>
      </div>
      <div class="cards-grid">
        <div class="card">
          <h3>Customer Database</h3>
          <p>Manage customer information and service history.</p>
          <button class="btn-secondary" onclick="showNotification('Customer database coming soon!', 'info')">
            <i class="fas fa-users"></i> View Customers
          </button>
        </div>
      </div>
    </section>

    <!-- Reports Section -->
    <section class="content-section" id="reports">
      <div class="section-header">
        <h2><i class="fas fa-chart-bar"></i> Reports & Analytics</h2>
        <div class="section-actions">
          <button class="btn-primary" onclick="showNotification('Reports module coming soon!', 'info')">
            <i class="fas fa-file-alt"></i> Generate Report
          </button>
        </div>
      </div>
      <div class="cards-grid">
        <div class="card">
          <h3>Performance Reports</h3>
          <p>Generate comprehensive calibration performance reports.</p>
          <button class="btn-secondary" onclick="showNotification('Performance reports coming soon!', 'info')">
            <i class="fas fa-chart-line"></i> View Reports
          </button>
        </div>
      </div>
    </section>

    <!-- Settings Section -->
    <section class="content-section" id="settings">
      <div class="section-header">
        <h2><i class="fas fa-cog"></i> Settings</h2>
      </div>
      <div class="cards-grid">
        <div class="card">
          <h3>System Configuration</h3>
          <p>Configure system settings and preferences.</p>
          <button class="btn-secondary" onclick="showNotification('Settings panel coming soon!', 'info')">
            <i class="fas fa-cogs"></i> Open Settings
          </button>
        </div>
      </div>
    </section>

    <!-- Admin User Management Section -->
    <section class="content-section" id="admin" style="display: none;">
      <div class="section-header">
        <h2><i class="fas fa-users-cog"></i> User Management</h2>
        <button class="btn-primary" onclick="showAddUserModal()">
          <i class="fas fa-user-plus"></i> Add User
        </button>
      </div>

      <!-- Search and Filter Bar -->
      <div class="card" style="margin-bottom: 20px;">
        <div style="display: flex; gap: 15px; flex-wrap: wrap; align-items: center;">
          <div style="flex: 1; min-width: 250px;">
            <div style="position: relative;">
              <i class="fas fa-search" style="position: absolute; left: 12px; top: 50%; transform: translateY(-50%); color: #999;"></i>
              <input type="text" id="userSearchInput" placeholder="Search by name or email..." 
                     style="width: 100%; padding: 10px 10px 10px 40px; border: 1px solid #ddd; border-radius: 6px; font-size: 14px;"
                     oninput="searchUsers()">
            </div>
          </div>
          <div style="min-width: 150px;">
            <select id="roleFilter" class="form-control" onchange="filterUsers()" style="padding: 10px;">
              <option value="">All Roles</option>
              <option value="admin">Admin</option>
              <option value="lead_calibrator">Lead Calibrator</option>
              <option value="calibrator">Calibrator</option>
              <option value="viewer">Viewer</option>
            </select>
          </div>
          <div style="min-width: 150px;">
            <select id="statusFilter" class="form-control" onchange="filterUsers()" style="padding: 10px;">
              <option value="">All Status</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>
          <button class="btn-secondary" onclick="refreshUsers()">
            <i class="fas fa-sync-alt"></i> Refresh
          </button>
        </div>
      </div>

      <!-- Users Table -->
      <div class="card">
        <div id="usersTableContainer">
          <table class="data-table" id="usersTable">
            <thead>
              <tr>
                <th style="width: 60px;">Avatar</th>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Status</th>
                <th>Last Login</th>
                <th style="width: 150px;">Actions</th>
              </tr>
            </thead>
            <tbody id="usersTableBody">
              <tr>
                <td colspan="7" style="text-align: center; padding: 40px;">
                  <i class="fas fa-spinner fa-spin" style="font-size: 24px; color: #FFB800;"></i>
                  <p style="margin-top: 10px; color: #999;">Loading users...</p>
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <div id="usersPagination" style="display: flex; justify-content: space-between; align-items: center; margin-top: 20px; padding-top: 20px; border-top: 1px solid #eee;">
          <div style="color: #666; font-size: 14px;" id="usersCountInfo">
            Showing 0 of 0 users
          </div>
          <div style="display: flex; gap: 5px;" id="paginationButtons">
            <!-- Pagination buttons will be generated here -->
          </div>
        </div>
      </div>

      <!-- Empty State (hidden by default) -->
      <div class="card" id="usersEmptyState" style="display: none; text-align: center; padding: 60px 20px;">
        <i class="fas fa-users" style="font-size: 48px; color: #ddd; margin-bottom: 20px;"></i>
        <h3 style="color: #666; margin-bottom: 10px;">No Users Found</h3>
        <p style="color: #999;">Try adjusting your search or filters</p>
      </div>
    </section>

    <!-- Profile section moved to profile.html -->

        <!-- Service pages removed - technicians use autocomplete in forms -->
  </div>

  <!-- Equipment Template Selection Modal (Dynamic) -->
  <!-- Notification Lightbox -->
  <div id="notificationLightbox">
    <div class="notification-box">
      <div class="notification-icon" id="notificationIcon"></div>
      <h3 id="notificationTitle"></h3>
      <p id="notificationMessage"></p>
      <div class="notification-actions" id="notificationActions"></div>
    </div>
  </div>

  <!-- Quick Scan Modal -->
  <div id="quickScanModal" class="modal" style="display:none">
    <div class="modal-content" style="max-width: 500px;">
      <div class="modal-header">
        <h2><i class="fas fa-qrcode"></i> Quick Scan</h2>
        <button class="modal-close" onclick="closeQuickScanModal()">&times;</button>
      </div>
      <p class="modal-subtitle">Scan or enter equipment tag/serial number to quickly find records</p>
      
      <div style="padding: 20px;">
        <div class="form-group">
          <label for="scanInput">
            <i class="fas fa-barcode"></i> Equipment Tag/Serial Number
          </label>
          <input 
            type="text" 
            id="scanInput" 
            class="form-control" 
            placeholder="Enter or scan equipment ID..." 
            autofocus
            style="font-size: 16px; padding: 12px;">
          <small style="color: #666; margin-top: 8px; display: block;">
            <i class="fas fa-info-circle"></i> Enter tag number or scan barcode/QR code
          </small>
        </div>

        <div id="scanResults" style="margin-top: 20px; display: none;">
          <h3 style="font-size: 14px; color: #666; margin-bottom: 12px;">Search Results:</h3>
          <div id="scanResultsList"></div>
        </div>
      </div>

      <div class="modal-footer-actions">
        <button class="btn-secondary" onclick="closeQuickScanModal()">
          <i class="fas fa-times"></i> Cancel
        </button>
        <button class="btn-primary" onclick="performQuickScan()">
          <i class="fas fa-search"></i> Search
        </button>
      </div>
    </div>
  </div>

  <!-- Export Data Modal -->
  <div id="exportModal" class="modal" style="display:none">
    <div class="modal-content" style="max-width: 600px;">
      <div class="modal-header">
        <h2><i class="fas fa-download"></i> Export Worksheets & Certificates</h2>
        <button class="modal-close" onclick="closeExportModal()">&times;</button>
      </div>
      <p class="modal-subtitle">Define parameters for batch export and certificate generation</p>
      
      <div style="padding: 20px;">
        <!-- Date Range -->
        <div class="form-group">
          <label><i class="fas fa-calendar-alt"></i> Date Range</label>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px;">
            <div>
              <label for="exportStartDate" style="font-size: 12px; color: #666;">Start Date</label>
              <input type="date" id="exportStartDate" class="form-control">
            </div>
            <div>
              <label for="exportEndDate" style="font-size: 12px; color: #666;">End Date</label>
              <input type="date" id="exportEndDate" class="form-control">
            </div>
          </div>
        </div>

        <!-- Status Filter -->
        <div class="form-group">
          <label for="exportStatus"><i class="fas fa-filter"></i> Worksheet Status</label>
          <select id="exportStatus" class="form-control">
            <option value="all">All Worksheets</option>
            <option value="completed" selected>Completed Only</option>
            <option value="pending">Pending/Draft</option>
          </select>
        </div>

        <!-- Equipment Type Filter -->
        <div class="form-group">
          <label for="exportEquipmentType"><i class="fas fa-tools"></i> Equipment Type</label>
          <select id="exportEquipmentType" class="form-control">
            <option value="all">All Equipment Types</option>
            <option value="pressure">Pressure Equipment</option>
            <option value="temperature">Temperature Equipment</option>
            <option value="dimensional">Dimensional Equipment</option>
            <option value="electrical">Electrical Equipment</option>
            <option value="torque">Torque Equipment</option>
            <option value="other">Other Equipment</option>
          </select>
        </div>

        <!-- Job/Site Filter -->
        <div class="form-group">
          <label for="exportJobSite"><i class="fas fa-building"></i> Job/Site (Optional)</label>
          <input 
            type="text" 
            id="exportJobSite" 
            class="form-control" 
            placeholder="Enter job number or site name...">
          <small style="color: #666; margin-top: 4px; display: block;">
            Leave blank to include all jobs/sites
          </small>
        </div>

        <!-- Export Format -->
        <div class="form-group">
          <label for="exportFormat"><i class="fas fa-file-export"></i> Export Format</label>
          <select id="exportFormat" class="form-control">
            <option value="pdf-bundle">PDF Certificate Bundle (one file)</option>
            <option value="pdf-separate">PDF Certificates (separate files)</option>
            <option value="excel">Excel Spreadsheet (.xlsx)</option>
            <option value="csv">CSV Data Export</option>
          </select>
        </div>

        <!-- Summary -->
        <div style="background: #f5f5f5; border-radius: 8px; padding: 12px; margin-top: 16px;">
          <h4 style="font-size: 13px; margin: 0 0 8px 0; color: #333;">
            <i class="fas fa-info-circle"></i> Export Summary
          </h4>
          <p id="exportSummary" style="font-size: 12px; margin: 0; color: #666;">
            Select parameters to see export summary
          </p>
        </div>
      </div>

      <div class="modal-footer-actions">
        <button class="btn-secondary" onclick="closeExportModal()">
          <i class="fas fa-times"></i> Cancel
        </button>
        <button class="btn-primary" onclick="performExport()">
          <i class="fas fa-download"></i> Generate Export
        </button>
      </div>
    </div>
  </div>

  <div id="equipmentTemplateModal" class="modal" style="display:none">
    <div class="modal-content equipment-template-modal">
      <div class="modal-header" id="templateModalHeader">
        <h2><i class="fas fa-gauge-high" id="templateModalIcon"></i> <span id="templateModalTitle">Select Equipment Template</span></h2>
        <button class="modal-close" onclick="closeEquipmentTemplateModal()">&times;</button>
      </div>
      <p class="modal-subtitle" id="templateModalSubtitle">Choose a specific equipment template to pre-fill your worksheet</p>
      
      <div class="template-selection-content" id="templateSelectionContent">
        <!-- Templates will be dynamically loaded here -->
      </div>

      <div class="modal-footer-actions">
        <button class="btn-secondary" onclick="skipTemplateSelection()">
          <i class="fas fa-forward"></i> Skip & Create Blank Worksheet
        </button>
      </div>
    </div>
  </div>

  <!-- Pressure Template Selection Modal -->
  <div id="pressureTemplateModal" class="modal" style="display:none">
    <div class="modal-content template-modal-content">
      <div class="modal-header">
        <h2><i class="fas fa-gauge-high"></i> Pressure Equipment Templates</h2>
        <button class="modal-close" onclick="closePressureTemplates()">&times;</button>
      </div>
      <p class="modal-subtitle">Select a pre-configured template for your calibration worksheet</p>
      
      <div class="template-categories">
        <!-- Pressure Transmitters -->
        <div class="template-category">
          <h3><i class="fas fa-broadcast-tower"></i> Pressure Transmitters</h3>
          <div class="template-list">
            <div class="template-item" onclick="selectPressureTemplate('pressure_transmitter_0-100psi')">
              <div class="template-item-icon">
                <i class="fas fa-gauge"></i>
              </div>
              <div class="template-item-info">
                <h4>0-100 psi Transmitter</h4>
                <p>Rosemount 3051CD • 5 test points • Rising/Falling</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('pressure_transmitter_0-300psi')">
              <div class="template-item-icon">
                <i class="fas fa-gauge"></i>
              </div>
              <div class="template-item-info">
                <h4>0-300 psi Transmitter</h4>
                <p>Yokogawa EJA110A • 6 test points • Rising/Falling</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('pressure_transmitter_0-1000psi')">
              <div class="template-item-icon">
                <i class="fas fa-gauge"></i>
              </div>
              <div class="template-item-info">
                <h4>0-1000 psi Transmitter</h4>
                <p>Rosemount 3051CG • 5 test points • High Pressure</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
          </div>
        </div>

        <!-- Pressure Gauges -->
        <div class="template-category">
          <h3><i class="fas fa-gauge-simple"></i> Pressure Gauges</h3>
          <div class="template-list">
            <div class="template-item" onclick="selectPressureTemplate('pressure_gauge_0-100psi')">
              <div class="template-item-icon">
                <i class="fas fa-gauge-simple"></i>
              </div>
              <div class="template-item-info">
                <h4>0-100 psi Analog Gauge</h4>
                <p>Ashcroft 1005D • Mechanical • 5 test points</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('pressure_gauge_0-300psi')">
              <div class="template-item-icon">
                <i class="fas fa-gauge-simple"></i>
              </div>
              <div class="template-item-info">
                <h4>0-300 psi Analog Gauge</h4>
                <p>Wika 232.50 • Medium Range • 6 test points</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('digital_pressure_gauge_0-500psi')">
              <div class="template-item-icon">
                <i class="fas fa-display"></i>
              </div>
              <div class="template-item-info">
                <h4>0-500 psi Digital Gauge</h4>
                <p>Fluke 700G27 • High Accuracy • 6 test points</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
          </div>
        </div>

        <!-- Differential Pressure -->
        <div class="template-category">
          <h3><i class="fas fa-arrows-left-right"></i> Differential Pressure</h3>
          <div class="template-list">
            <div class="template-item" onclick="selectPressureTemplate('dp_transmitter_0-100inH2O')">
              <div class="template-item-icon">
                <i class="fas fa-compress-arrows-alt"></i>
              </div>
              <div class="template-item-info">
                <h4>0-100 inH2O DP Transmitter</h4>
                <p>Rosemount 3051CD • 5 test points • Current Output</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('dp_gauge_0-50inH2O')">
              <div class="template-item-icon">
                <i class="fas fa-gauge-simple"></i>
              </div>
              <div class="template-item-info">
                <h4>0-50 inH2O DP Gauge</h4>
                <p>Dwyer Magnehelic 2000 • 6 test points</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
          </div>
        </div>

        <!-- Vacuum & Others -->
        <div class="template-category">
          <h3><i class="fas fa-wind"></i> Vacuum & Specialty</h3>
          <div class="template-list">
            <div class="template-item" onclick="selectPressureTemplate('vacuum_gauge_0-30inHg')">
              <div class="template-item-icon">
                <i class="fas fa-wind"></i>
              </div>
              <div class="template-item-info">
                <h4>0-30 inHg Vacuum Gauge</h4>
                <p>Ashcroft 1005D • 5 test points • Vacuum Range</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('compound_gauge_30inHg-30psi')">
              <div class="template-item-icon">
                <i class="fas fa-gauge-high"></i>
              </div>
              <div class="template-item-info">
                <h4>Compound Gauge (-30 inHg to +30 psi)</h4>
                <p>Ashcroft 1490 • Vacuum & Pressure • 5 test points</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('pressure_switch_adjustable')">
              <div class="template-item-icon">
                <i class="fas fa-power-off"></i>
              </div>
              <div class="template-item-info">
                <h4>Adjustable Pressure Switch</h4>
                <p>United Electric H117 • Setpoint Calibration</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('hp_gauge_0-5000psi')">
              <div class="template-item-icon">
                <i class="fas fa-arrow-up"></i>
              </div>
              <div class="template-item-info">
                <h4>0-5000 psi High Pressure Gauge</h4>
                <p>Ashcroft 2074 • High Range • 6 test points</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('pressure_calibrator_portable')">
              <div class="template-item-icon">
                <i class="fas fa-toolbox"></i>
              </div>
              <div class="template-item-info">
                <h4>Portable Pressure Calibrator</h4>
                <p>Fluke 718 300G • Calibrator Verification • 5 test points</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
            <div class="template-item" onclick="selectPressureTemplate('barometer_digital')">
              <div class="template-item-icon">
                <i class="fas fa-cloud"></i>
              </div>
              <div class="template-item-info">
                <h4>Digital Barometer</h4>
                <p>Vaisala PTB220 • Atmospheric Pressure • 5 test points</p>
              </div>
              <i class="fas fa-chevron-right"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Add/Edit User Modal -->
  <div id="userModal" class="modal" style="display:none">
    <div class="modal-content" style="max-width: 600px;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
        <h3 id="userModalTitle"><i class="fas fa-user-plus"></i> Add User</h3>
        <button class="btn-icon" onclick="closeUserModal()" style="font-size: 24px; color: #999; background: none; border: none; cursor: pointer;">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <form id="userForm" onsubmit="submitUserForm(event)">
        <input type="hidden" id="userId" name="userId">
        
        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #333;">
            Full Name <span style="color: red;">*</span>
          </label>
          <input type="text" id="userFullName" name="full_name" required
                 style="width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 6px; font-size: 14px;">
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #333;">
            Email <span style="color: red;">*</span>
          </label>
          <input type="email" id="userEmail" name="email" required
                 style="width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 6px; font-size: 14px;">
        </div>

        <div style="margin-bottom: 20px;" id="passwordFieldContainer">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #333;">
            Password <span style="color: red;">*</span>
          </label>
          <input type="password" id="userPassword" name="password"
                 style="width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 6px; font-size: 14px;"
                 placeholder="Min 8 chars, uppercase, lowercase, number, special char">
          <small style="color: #666; display: block; margin-top: 5px;">
            Leave blank to keep existing password (when editing)
          </small>
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #333;">
            Role <span style="color: red;">*</span>
          </label>
          <select id="userRole" name="role" required class="form-control"
                  style="width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 6px; font-size: 14px;">
            <option value="">Select Role</option>
            <option value="admin">Admin - Full system access</option>
            <option value="lead_calibrator">Lead Calibrator - View and manage all calibrations</option>
            <option value="calibrator">Calibrator - Create and edit own calibrations</option>
            <option value="viewer">Viewer - Read-only access</option>
          </select>
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: block; margin-bottom: 8px; font-weight: 500; color: #333;">
            Job Title
          </label>
          <input type="text" id="userJobTitle" name="job_title"
                 style="width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 6px; font-size: 14px;"
                 placeholder="e.g., Senior Calibration Technician">
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: flex; align-items: center; cursor: pointer;">
            <input type="checkbox" id="userIsActive" name="is_active" checked
                   style="width: 18px; height: 18px; margin-right: 10px; cursor: pointer;">
            <span style="font-weight: 500; color: #333;">Active User</span>
          </label>
          <small style="color: #666; display: block; margin-top: 5px; margin-left: 28px;">
            Inactive users cannot log in
          </small>
        </div>

        <div style="margin-bottom: 20px;">
          <label style="display: flex; align-items: center; cursor: pointer;">
            <input type="checkbox" id="userEmailVerified" name="email_verified"
                   style="width: 18px; height: 18px; margin-right: 10px; cursor: pointer;">
            <span style="font-weight: 500; color: #333;">Email Verified</span>
          </label>
          <small style="color: #666; display: block; margin-top: 5px; margin-left: 28px;">
            Allow user to log in without email verification
          </small>
        </div>

        <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 30px;">
          <button type="button" class="btn-secondary" onclick="closeUserModal()">
            <i class="fas fa-times"></i> Cancel
          </button>
          <button type="submit" class="btn-primary" id="userSubmitBtn">
            <i class="fas fa-save"></i> Save User
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- User Activity Modal -->
  <div id="userActivityModal" class="modal" style="display:none">
    <div class="modal-content" style="max-width: 800px;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
        <h3><i class="fas fa-history"></i> User Activity Log</h3>
        <button class="btn-icon" onclick="closeUserActivityModal()" style="font-size: 24px; color: #999; background: none; border: none; cursor: pointer;">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div id="activityLogContent">
        <div style="text-align: center; padding: 40px;">
          <i class="fas fa-spinner fa-spin" style="font-size: 24px; color: #FFB800;"></i>
          <p style="margin-top: 10px; color: #999;">Loading activity...</p>
        </div>
      </div>
    </div>
  </div>

  <div id="loadingModal" class="modal" style="display:none">
    <div class="modal-content">
      <h3>Processing...</h3>
      <div class="progress-bar">
        <div id="progressBar" class="progress-fill"></div>
      </div>
      <p id="progressText">Please wait...</p>
    </div>
  </div>

  <!-- Scripts - Deferred for faster loading -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js" defer></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js" defer></script>
  <!-- Equipment database for field technician autocomplete -->
  <script src="equipment-database.js?v=20251015" defer></script>
  <!-- Autocomplete functionality for worksheet fields -->
  <script src="autocomplete.js?v=20251015" defer></script>
  <!-- Pressure equipment calibration templates -->
  <script src="pressure-templates.js?v=20251015" defer></script>
  <!-- Main application logic -->
  <!-- <script src="app.js?v=20251014"></script> COMMENTED OUT - Conflicts with inline code -->
  
  <script>
    // Enhanced service worker registration with update handling
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('service-worker.js')
        .then(reg => {
          console.log('Service Worker registered');
          reg.addEventListener('updatefound', () => {
            const newWorker = reg.installing;
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                // New version available
                if (confirm('New version available! Reload to update?')) {
                  window.location.reload();
                }
              }
            });
          });
        })
        .catch(err => console.warn('SW registration failed', err));
    }

    // Connection status monitoring
    function updateConnectionStatus() {
      const status = document.getElementById('connectionStatus');
      if (navigator.onLine) {
        status.textContent = 'Online';
        status.className = 'status-indicator online';
      } else {
        status.textContent = 'Offline';
        status.className = 'status-indicator offline';
      }
    }

    window.addEventListener('online', updateConnectionStatus);
    window.addEventListener('offline', updateConnectionStatus);
    document.addEventListener('DOMContentLoaded', updateConnectionStatus);

    // Pressure Template Modal Functions
    function showPressureTemplates() {
      const modal = document.getElementById('pressureTemplateModal');
      if (modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden'; // Prevent background scrolling
      }
    }

    function closePressureTemplates() {
      const modal = document.getElementById('pressureTemplateModal');
      if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
      }
    }

    function selectPressureTemplate(templateId) {
      // Close modal
      closePressureTemplates();
      
      // Navigate to worksheets page
      window.location.hash = 'worksheets';
      
      // Wait for page to load, then apply template
      setTimeout(() => {
        if (typeof applyPressureTemplate === 'function') {
          applyPressureTemplate(templateId);
        } else {
          console.error('applyPressureTemplate function not found');
        }
      }, 500);
    }

    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
      const pressureModal = document.getElementById('pressureTemplateModal');
      if (event.target === pressureModal) {
        closePressureTemplates();
      }
      
      const equipmentModal = document.getElementById('equipmentTemplateModal');
      if (event.target === equipmentModal) {
        closeEquipmentTemplateModal();
      }
    });

    // Equipment Template Modal Functions
    function showEquipmentTemplateModal(equipmentType) {
      const modal = document.getElementById('equipmentTemplateModal');
      const modalIcon = document.getElementById('templateModalIcon');
      const modalTitle = document.getElementById('templateModalTitle');
      const modalSubtitle = document.getElementById('templateModalSubtitle');
      const content = document.getElementById('templateSelectionContent');
      
      if (!modal || !content) return;

      // Set modal styling based on equipment type
      const equipmentConfig = {
        pressure: {
          icon: 'fa-gauge-high',
          title: 'Pressure Equipment Templates',
          subtitle: 'Select from 15 pre-configured pressure calibration templates',
          color: '#7B1FA2',
          templates: getPressureTemplates()
        },
        temperature: {
          icon: 'fa-thermometer-half',
          title: 'Temperature Equipment Templates',
          subtitle: 'Select from 18 temperature calibration templates',
          color: '#ff5722',
          templates: getTemperatureTemplates()
        },
        electrical: {
          icon: 'fa-bolt',
          title: 'Electrical Equipment Templates',
          subtitle: 'Select from 26 electrical test equipment templates',
          color: '#ffa726',
          templates: getElectricalTemplates()
        },
        mechanical: {
          icon: 'fa-cog',
          title: 'Mechanical Equipment Templates',
          subtitle: 'Select from 15 mechanical calibration templates',
          color: '#4caf50',
          templates: getMechanicalTemplates()
        },
        dimensional: {
          icon: 'fa-ruler',
          title: 'Dimensional Equipment Templates',
          subtitle: 'Select from 25 dimensional measurement templates',
          color: '#2196f3',
          templates: getDimensionalTemplates()
        },
        custom: {
          icon: 'fa-plus-circle',
          title: 'Custom Worksheet',
          subtitle: 'Start with a blank worksheet for specialized equipment',
          color: '#607d8b',
          templates: []
        }
      };

      const config = equipmentConfig[equipmentType] || equipmentConfig.custom;

      // Update modal header
      modalIcon.className = `fas ${config.icon}`;
      modalTitle.textContent = config.title;
      modalSubtitle.textContent = config.subtitle;
      
      // Update header color
      const headerElement = document.getElementById('templateModalHeader');
      if (headerElement) {
        headerElement.style.background = `linear-gradient(135deg, ${config.color} 0%, ${adjustColor(config.color, 20)} 100%)`;
      }

      // Generate template list
      if (config.templates.length > 0) {
        content.innerHTML = generateTemplateList(config.templates, equipmentType);
      } else {
        content.innerHTML = `
          <div style="text-align: center; padding: 40px;">
            <i class="fas fa-file-circle-plus" style="font-size: 64px; color: #ccc; margin-bottom: 16px;"></i>
            <h3>No templates available</h3>
            <p style="color: #666;">Click "Skip & Create Blank Worksheet" to continue</p>
          </div>
        `;
      }

      // Show modal
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    }

    function generateTemplateList(templates, equipmentType) {
      let html = '<div class="equipment-template-grid">';
      
      templates.forEach(template => {
        const testPointsPreview = template.testPoints ? template.testPoints.slice(0, 3).join(', ') + '...' : 'Custom points';
        html += `
          <div class="equipment-template-card" onclick="selectEquipmentTemplate('${equipmentType}', '${template.id}')">
            <div class="template-card-header">
              <div class="template-card-icon">
                <i class="${template.icon || 'fas fa-gauge'}"></i>
              </div>
              <span class="template-badge">${template.testPoints ? template.testPoints.length : 0} Points</span>
            </div>
            <div class="template-card-body">
              <h4>${template.name}</h4>
              <p class="template-manufacturer">${template.manufacturer} ${template.model || ''}</p>
              <p class="template-range">${template.range || 'Various ranges'}</p>
              <div class="template-points-preview">
                <i class="fas fa-list-check"></i> ${testPointsPreview}
              </div>
            </div>
            <div class="template-card-footer">
              <span class="template-accuracy">${template.accuracy || 'Standard accuracy'}</span>
            </div>
          </div>
        `;
      });
      
      html += '</div>';
      return html;
    }

    function selectEquipmentTemplate(equipmentType, templateId) {
      console.log('🎯 Selecting template:', equipmentType, templateId);
      closeEquipmentTemplateModal();
      
      // Ensure type selector is hidden and worksheet form is visible
      document.getElementById('worksheetTypeSelector').style.display = 'none';
      document.getElementById('worksheetListContainer').style.display = 'none';
      document.getElementById('worksheetFormContainer').style.display = 'block';
      
      // Apply template immediately without setTimeout to prevent interruption
      if (equipmentType === 'pressure' && typeof applyPressureTemplate === 'function') {
        // Pass true to skip form show/hide logic since we're already handling it
        applyPressureTemplate(templateId, true);
      } else {
        // For other equipment types, apply generic template
        applyGenericTemplate(equipmentType, templateId);
      }
      
      console.log('✅ Template applied and form shown');
    }

    function closeEquipmentTemplateModal() {
      const modal = document.getElementById('equipmentTemplateModal');
      if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
      }
    }

    function skipTemplateSelection() {
      closeEquipmentTemplateModal();
      
      // Ensure type selector is hidden and worksheet form is visible
      document.getElementById('worksheetTypeSelector').style.display = 'none';
      document.getElementById('worksheetListContainer').style.display = 'none';
      document.getElementById('worksheetFormContainer').style.display = 'block';
    }

    function adjustColor(color, percent) {
      // Simple color adjustment function
      const num = parseInt(color.replace('#', ''), 16);
      const amt = Math.round(2.55 * percent);
      const R = (num >> 16) + amt;
      const G = (num >> 8 & 0x00FF) + amt;
      const B = (num & 0x0000FF) + amt;
      return '#' + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (G<255?G<1?0:G:255)*0x100 + (B<255?B<1?0:B:255)).toString(16).slice(1);
    }

    // Make functions globally available
    window.showEquipmentTemplateModal = showEquipmentTemplateModal;
    window.selectEquipmentTemplate = selectEquipmentTemplate;
    window.closeEquipmentTemplateModal = closeEquipmentTemplateModal;
    window.skipTemplateSelection = skipTemplateSelection;
    window.showPressureTemplates = showPressureTemplates;
    window.closePressureTemplates = closePressureTemplates;
    window.selectPressureTemplate = selectPressureTemplate;

    // Template getter functions - will return templates once created
    function getPressureTemplates() {
      if (typeof PRESSURE_TEMPLATES === 'undefined') return [];
      
      return Object.entries(PRESSURE_TEMPLATES).map(([id, template]) => ({
        id: id,
        name: template.name,
        manufacturer: template.manufacturer,
        model: template.model,
        range: template.range,
        accuracy: template.accuracy,
        testPoints: template.testPoints ? template.testPoints.map(tp => tp.refPressure) : [],
        icon: 'fas fa-gauge-high'
      }));
    }

    function getTemperatureTemplates() {
      // Placeholder - will be populated with actual temperature templates
      return [
        { id: 'rtd_pt100', name: 'RTD PT100 Temperature Sensor', manufacturer: 'Omega', model: 'PR-11', range: '-200°C to 850°C', accuracy: '±0.15°C', testPoints: [0, 50, 100, 150, 200], icon: 'fas fa-temperature-arrow-up' },
        { id: 'thermocouple_k', name: 'Type K Thermocouple', manufacturer: 'Fluke', model: '80PK-1', range: '-200°C to 1372°C', accuracy: '±2.2°C', testPoints: [0, 200, 400, 600, 800, 1000], icon: 'fas fa-temperature-high' },
        { id: 'temp_transmitter', name: 'Temperature Transmitter', manufacturer: 'Rosemount', model: '3144P', range: '0°C to 400°C', accuracy: '±0.5°C', testPoints: [0, 100, 200, 300, 400], icon: 'fas fa-broadcast-tower' }
      ];
    }

    function getElectricalTemplates() {
      // Placeholder - will be populated with actual electrical templates
      return [
        { id: 'dmm_voltage', name: 'Digital Multimeter (Voltage)', manufacturer: 'Fluke', model: '87V', range: '0-1000V', accuracy: '±0.05%', testPoints: [0, 100, 250, 500, 750, 1000], icon: 'fas fa-plug' },
        { id: 'clamp_meter', name: 'AC Clamp Meter', manufacturer: 'Fluke', model: '376', range: '0-1000A', accuracy: '±1%', testPoints: [0, 100, 250, 500, 750, 1000], icon: 'fas fa-circle-notch' },
        { id: 'current_loop', name: '4-20mA Loop Calibrator', manufacturer: 'Fluke', model: '709', range: '4-20mA', accuracy: '±0.015%', testPoints: [4, 8, 12, 16, 20], icon: 'fas fa-arrows-spin' }
      ];
    }

    function getMechanicalTemplates() {
      // Placeholder - will be populated with actual mechanical templates
      return [
        { id: 'torque_wrench', name: 'Torque Wrench', manufacturer: 'Snap-on', model: 'TechAngle', range: '0-250 ft-lb', accuracy: '±2%', testPoints: [0, 50, 100, 150, 200, 250], icon: 'fas fa-wrench' },
        { id: 'tachometer', name: 'Digital Tachometer', manufacturer: 'Fluke', model: '931', range: '1-99999 RPM', accuracy: '±0.02%', testPoints: [100, 500, 1000, 5000, 10000], icon: 'fas fa-gauge-simple' },
        { id: 'scale_balance', name: 'Precision Balance', manufacturer: 'Mettler Toledo', model: 'XS204', range: '0-220g', accuracy: '±0.1mg', testPoints: [0, 50, 100, 150, 200], icon: 'fas fa-scale-balanced' }
      ];
    }

    function getDimensionalTemplates() {
      // Placeholder - will be populated with actual dimensional templates
      return [
        { id: 'caliper_digital', name: 'Digital Caliper', manufacturer: 'Mitutoyo', model: 'CD-6" CS', range: '0-6 inches', accuracy: '±0.001"', testPoints: [0, 1, 2, 3, 4, 5, 6], icon: 'fas fa-ruler-horizontal' },
        { id: 'micrometer', name: 'Outside Micrometer', manufacturer: 'Starrett', model: '436', range: '0-1 inch', accuracy: '±0.0001"', testPoints: [0, 0.25, 0.5, 0.75, 1.0], icon: 'fas fa-ruler' },
        { id: 'height_gauge', name: 'Height Gauge', manufacturer: 'Mitutoyo', model: 'HDS', range: '0-12 inches', accuracy: '±0.0005"', testPoints: [0, 2, 4, 6, 8, 10, 12], icon: 'fas fa-ruler-vertical' }
      ];
    }

    function applyGenericTemplate(equipmentType, templateId) {
      // Find template data
      let template = null;
      
      if (equipmentType === 'temperature') {
        template = getTemperatureTemplates().find(t => t.id === templateId);
      } else if (equipmentType === 'electrical') {
        template = getElectricalTemplates().find(t => t.id === templateId);
      } else if (equipmentType === 'mechanical') {
        template = getMechanicalTemplates().find(t => t.id === templateId);
      } else if (equipmentType === 'dimensional') {
        template = getDimensionalTemplates().find(t => t.id === templateId);
      }
      
      if (!template) {
        console.log('Template not found:', templateId);
        return;
      }

      console.log('Applying template:', template.name);

      // Fill in equipment fields with correct IDs
      const manufacturerField = document.getElementById('ws_manufacturer');
      const modelField = document.getElementById('ws_equipModel');
      const rangeField = document.getElementById('ws_typeRange');
      const accuracyField = document.getElementById('ws_accuracy');
      const descField = document.getElementById('ws_equipDesc');

      if (manufacturerField) manufacturerField.value = template.manufacturer;
      if (modelField) modelField.value = template.model || '';
      if (rangeField) rangeField.value = template.range;
      if (accuracyField) accuracyField.value = template.accuracy;
      if (descField && !descField.value) descField.value = template.name;

      // Check if it's pressure equipment (pressure has Rising/Falling)
      const isPressure = equipmentType === 'pressure';

      // Apply test points to table
      const tbody = document.querySelector('#ws_resultsTable tbody');
      if (tbody && template.testPoints && template.testPoints.length > 0) {
        tbody.innerHTML = '';
        template.testPoints.forEach((point, index) => {
          const row = tbody.insertRow();
          row.innerHTML = `
            <td><input type="number" step="0.001" value="${point}" class="ref-input" style="width:100%"></td>
            <td>
              <select class="dir-select" style="width:100%">
                ${isPressure ? 
                  '<option value="rising">↑ Rising</option><option value="falling">↓ Falling</option>' :
                  '<option value="as-found">As Found</option><option value="as-left">As Left</option>'
                }
              </select>
            </td>
            <td><input type="number" step="0.001" placeholder="0" class="meas-input" style="width:100%"></td>
            <td class="dev-cell">0.000</td>
            <td class="error-cell">0.000%</td>
            <td class="unc-cell">-</td>
            <td class="pass-cell">-</td>
            <td><button onclick="removeWorksheetRow(this)" style="padding:4px 8px">×</button></td>
          `;
          attachWorksheetRowListeners(row);
        });
        console.log('Added', template.testPoints.length, 'test points to table');
        updateTestSummary();
      }
    }

    // Notification Lightbox Functions
    function showNotification(title, message, type = 'info', buttons = null) {
      const lightbox = document.getElementById('notificationLightbox');
      const icon = document.getElementById('notificationIcon');
      const titleEl = document.getElementById('notificationTitle');
      const messageEl = document.getElementById('notificationMessage');
      const actionsEl = document.getElementById('notificationActions');

      // Set icon based on type
      const icons = {
        success: '✓',
        warning: '⚠',
        error: '✕',
        info: 'ℹ'
      };

      icon.textContent = icons[type] || icons.info;
      icon.className = `notification-icon ${type}`;
      
      titleEl.textContent = title;
      messageEl.textContent = message;

      // Clear previous buttons
      actionsEl.innerHTML = '';

      // Add buttons
      if (buttons) {
        buttons.forEach(btn => {
          const button = document.createElement('button');
          button.className = `notification-btn ${btn.style || 'primary'}`;
          button.textContent = btn.text;
          button.onclick = () => {
            closeNotification();
            if (btn.action) btn.action();
          };
          actionsEl.appendChild(button);
        });
      } else {
        // Default OK button
        const button = document.createElement('button');
        button.className = 'notification-btn primary';
        button.textContent = 'OK';
        button.onclick = closeNotification;
        actionsEl.appendChild(button);
      }

      lightbox.classList.add('show');
    }

    function closeNotification() {
      const lightbox = document.getElementById('notificationLightbox');
      lightbox.classList.remove('show');
    }

    // Close on outside click
    document.addEventListener('click', function(e) {
      const lightbox = document.getElementById('notificationLightbox');
      if (e.target === lightbox) {
        closeNotification();
      }
    });

    // Worksheet Functions
    let selectedWorksheetTypeValue = null;

    function showWorksheetForm() {
      // Reset form fields
      resetWorksheetForm();
      
      // Show type selector first
      document.getElementById('worksheetListContainer').style.display = 'none';
      document.getElementById('worksheetTypeSelector').style.display = 'block';
      document.getElementById('worksheetFormContainer').style.display = 'none';
    }

    function resetWorksheetForm() {
      // Reset all input fields
      const inputs = document.querySelectorAll('#worksheetFormContainer input, #worksheetFormContainer textarea, #worksheetFormContainer select');
      inputs.forEach(input => {
        if (input.type === 'date') {
          input.value = new Date().toISOString().split('T')[0];
        } else if (input.tagName === 'SELECT') {
          input.selectedIndex = 0;
        } else {
          input.value = '';
        }
      });

      // Clear test results table
      const tbody = document.querySelector('#ws_resultsTable tbody');
      if (tbody) tbody.innerHTML = '';

      // Reset to first step
      const steps = document.querySelectorAll('#worksheetFormContainer .form-step');
      const progressSteps = document.querySelectorAll('#worksheetFormContainer .progress-step');
      
      steps.forEach((step, index) => {
        if (index === 0) {
          step.classList.add('active');
        } else {
          step.classList.remove('active');
        }
      });

      progressSteps.forEach((step, index) => {
        if (index === 0) {
          step.classList.add('active');
        } else {
          step.classList.remove('active');
        }
      });

      // Reset selected worksheet type
      selectedWorksheetTypeValue = null;
    }

    function selectWorksheetType(type) {
      selectedWorksheetTypeValue = type;
      
      const typeNames = {
        'pressure': 'Pressure Equipment',
        'temperature': 'Temperature Equipment',
        'electrical': 'Electrical Equipment',
        'mechanical': 'Mechanical Equipment',
        'dimensional': 'Dimensional Equipment',
        'custom': 'Custom/Other Equipment'
      };
      
      // Update display
      const typeDisplay = document.getElementById('worksheetTypeDisplay');
      if (typeDisplay) {
        typeDisplay.textContent = typeNames[type] || type;
      }
      
      // Hide type selector, show template selection modal
      document.getElementById('worksheetTypeSelector').style.display = 'none';
      
      // Show equipment-specific template selection
      showEquipmentTemplateModal(type);
    }

    function changeWorksheetType() {
      // Go back to type selector
      document.getElementById('worksheetFormContainer').style.display = 'none';
      document.getElementById('worksheetTypeSelector').style.display = 'block';
      
      // Reset form
      const forms = document.querySelectorAll('#worksheetFormContainer input, #worksheetFormContainer textarea, #worksheetFormContainer select');
      forms.forEach(input => {
        if (input.type === 'checkbox' || input.type === 'radio') {
          input.checked = false;
        } else {
          input.value = '';
        }
      });
      
      // Clear test results table
      const tbody = document.querySelector('#ws_resultsTable tbody');
      if (tbody) tbody.innerHTML = '';
    }

    function hideWorksheetForm() {
      document.getElementById('worksheetListContainer').style.display = 'block';
      document.getElementById('worksheetTypeSelector').style.display = 'none';
      document.getElementById('worksheetFormContainer').style.display = 'none';
      selectedWorksheetTypeValue = null;
    }

    function nextWorksheetStep() {
      const steps = document.querySelectorAll('#worksheetFormContainer .form-step');
      const progressSteps = document.querySelectorAll('#worksheetFormContainer .progress-step');
      let currentStep = 0;
      
      steps.forEach((step, index) => {
        if (step.classList.contains('active')) {
          currentStep = index;
        }
      });
      
      if (currentStep < steps.length - 1) {
        steps[currentStep].classList.remove('active');
        progressSteps[currentStep].classList.remove('active');
        steps[currentStep + 1].classList.add('active');
        progressSteps[currentStep + 1].classList.add('active');
      }
    }

    function prevWorksheetStep() {
      const steps = document.querySelectorAll('#worksheetFormContainer .form-step');
      const progressSteps = document.querySelectorAll('#worksheetFormContainer .progress-step');
      let currentStep = 0;
      
      steps.forEach((step, index) => {
        if (step.classList.contains('active')) {
          currentStep = index;
        }
      });
      
      if (currentStep > 0) {
        steps[currentStep].classList.remove('active');
        progressSteps[currentStep].classList.remove('active');
        steps[currentStep - 1].classList.add('active');
        progressSteps[currentStep - 1].classList.add('active');
      }
    }

    function addWorksheetTestRow() {
      const tbody = document.querySelector('#ws_resultsTable tbody');
      if (!tbody) return;
      
      // Check if it's pressure equipment
      const isPressure = selectedWorksheetTypeValue === 'pressure';
      
      const row = document.createElement('tr');
      row.innerHTML = `
        <td><input type="number" step="0.001" placeholder="0" class="ref-input" style="width:100%"></td>
        <td>
          <select class="dir-select" style="width:100%">
            ${isPressure ? 
              '<option value="rising">↑ Rising</option><option value="falling">↓ Falling</option>' :
              '<option value="as-found">As Found</option><option value="as-left">As Left</option>'
            }
          </select>
        </td>
        <td><input type="number" step="0.001" placeholder="0" class="meas-input" style="width:100%"></td>
        <td class="dev-cell">0.000</td>
        <td class="error-cell">0.000%</td>
        <td class="unc-cell">-</td>
        <td class="pass-cell">-</td>
        <td><button onclick="removeWorksheetRow(this)" style="padding:4px 8px">×</button></td>
      `;
      tbody.appendChild(row);
      attachWorksheetRowListeners(row);
    }

    function removeWorksheetRow(btn) {
      btn.closest('tr').remove();
      updateAllWorksheetCalculations();
    }

    function attachWorksheetRowListeners(row) {
      const refInput = row.querySelector('.ref-input');
      const measInput = row.querySelector('.meas-input');
      
      if (refInput) {
        refInput.addEventListener('input', () => calculateWorksheetRow(row));
      }
      if (measInput) {
        measInput.addEventListener('input', () => calculateWorksheetRow(row));
      }
    }

    function calculateWorksheetRow(row) {
      const refInput = row.querySelector('.ref-input');
      const measInput = row.querySelector('.meas-input');
      const devCell = row.querySelector('.dev-cell');
      const errorCell = row.querySelector('.error-cell');
      const uncCell = row.querySelector('.unc-cell');
      const passCell = row.querySelector('.pass-cell');
      
      const refValue = parseFloat(refInput?.value || 0);
      const measValue = parseFloat(measInput?.value || 0);
      
      // Calculate deviation (Measured - Reference)
      const deviation = measValue - refValue;
      if (devCell) devCell.textContent = deviation.toFixed(3);
      
      // Calculate % error
      let errorPercent = 0;
      if (refValue !== 0) {
        errorPercent = (deviation / refValue) * 100;
      }
      if (errorCell) errorCell.textContent = errorPercent.toFixed(3) + '%';
      
      // Calculate uncertainty if accuracy is provided
      const accuracyField = document.getElementById('ws_accuracy');
      const rangeField = document.getElementById('ws_typeRange');
      
      if (accuracyField && accuracyField.value && uncCell) {
        let accuracy = accuracyField.value.trim().replace(/±/g, '').replace(/%/g, '').trim();
        const accuracyValue = parseFloat(accuracy);
        
        if (!isNaN(accuracyValue) && refValue !== 0) {
          // Standard uncertainty factors
          const factors = {
            reference: accuracyValue / 100,
            resolution: 0.05,
            repeatability: 0.1,
            temperature: 0.02,
            drift: 0.02
          };
          
          const combinedUncertainty = Math.sqrt(
            Math.pow(factors.reference, 2) +
            Math.pow(factors.resolution, 2) +
            Math.pow(factors.repeatability, 2) +
            Math.pow(factors.temperature, 2) +
            Math.pow(factors.drift, 2)
          );
          
          const expandedUncertainty = combinedUncertainty * 2;
          const uncertaintyValue = (refValue * expandedUncertainty).toFixed(3);
          uncCell.textContent = `±${uncertaintyValue}`;
        }
      }
      
      // Determine Pass/Fail based on accuracy tolerance
      if (passCell) {
        const accuracyField = document.getElementById('ws_accuracy');
        const rangeField = document.getElementById('ws_typeRange');
        
        if (accuracyField && accuracyField.value) {
          let accuracy = accuracyField.value.trim().replace(/±/g, '').replace(/%/g, '').trim();
          const accuracyValue = parseFloat(accuracy);
          
          if (!isNaN(accuracyValue)) {
            // Check if error is within tolerance
            const tolerance = accuracyValue;
            const absError = Math.abs(errorPercent);
            
            if (absError <= tolerance) {
              passCell.textContent = 'Pass';
              passCell.style.color = '#4caf50';
              passCell.style.fontWeight = 'bold';
            } else {
              passCell.textContent = 'Fail';
              passCell.style.color = '#f44336';
              passCell.style.fontWeight = 'bold';
            }
          } else {
            passCell.textContent = '-';
            passCell.style.color = '';
            passCell.style.fontWeight = '';
          }
        } else {
          passCell.textContent = '-';
          passCell.style.color = '';
          passCell.style.fontWeight = '';
        }
      }
      
      // Update test summary after row calculation
      updateTestSummary();
    }

    function updateTestSummary() {
      const rows = document.querySelectorAll('#ws_resultsTable tbody tr');
      let totalPoints = 0;
      let passedPoints = 0;
      let failedPoints = 0;
      
      rows.forEach(row => {
        const passCell = row.querySelector('.pass-cell');
        if (passCell && passCell.textContent) {
          const status = passCell.textContent.trim();
          if (status === 'Pass' || status === 'Fail') {
            totalPoints++;
            if (status === 'Pass') {
              passedPoints++;
            } else if (status === 'Fail') {
              failedPoints++;
            }
          }
        }
      });
      
      // Update the summary display
      const totalEl = document.getElementById('ws_totalPoints');
      const passedEl = document.getElementById('ws_passedPoints');
      const failedEl = document.getElementById('ws_failedPoints');
      
      if (totalEl) totalEl.textContent = totalPoints;
      if (passedEl) passedEl.textContent = passedPoints;
      if (failedEl) failedEl.textContent = failedPoints;
    }

    function updateAllWorksheetCalculations() {
      const rows = document.querySelectorAll('#ws_resultsTable tbody tr');
      rows.forEach(row => calculateWorksheetRow(row));
      updateTestSummary();
    }

    // Auto-recalculate when accuracy or range changes
    document.addEventListener('DOMContentLoaded', function() {
      const accuracyField = document.getElementById('ws_accuracy');
      const rangeField = document.getElementById('ws_typeRange');
      
      if (accuracyField) {
        accuracyField.addEventListener('input', updateAllWorksheetCalculations);
      }
      if (rangeField) {
        rangeField.addEventListener('input', updateAllWorksheetCalculations);
      }
    });

    function addWorksheetStandardSet() {
      const tbody = document.querySelector('#ws_resultsTable tbody');
      if (!tbody) return;

      // Try to get the current template from the manufacturer/model
      const manufacturer = document.getElementById('ws_manufacturer')?.value || '';
      const model = document.getElementById('ws_equipModel')?.value || '';
      
      let selectedTemplate = null;
      let templatePoints = [];
      
      // Check if PRESSURE_TEMPLATES is available
      if (typeof PRESSURE_TEMPLATES !== 'undefined') {
        // Try to find matching template by manufacturer and model
        for (const templateId in PRESSURE_TEMPLATES) {
          const template = PRESSURE_TEMPLATES[templateId];
          if (template.manufacturer === manufacturer && template.model === model) {
            selectedTemplate = template;
            templatePoints = template.testPoints.map(tp => tp.refPressure);
            break;
          }
        }
        
        // If no exact match, show selection dialog with all templates
        if (!selectedTemplate && manufacturer) {
          showTemplateSelectionDialog(tbody);
          return;
        }
      }
      
      // Fallback to standard percentage points if no template found
      if (templatePoints.length === 0) {
        templatePoints = [0, 25, 50, 75, 100];
      }
      
      const templateName = selectedTemplate ? selectedTemplate.name : 'Standard Set';
      const pointsPreview = templatePoints.join(', ');
      
      // Check if it's pressure equipment
      const isPressure = selectedWorksheetTypeValue === 'pressure';
      
      // Clear existing rows first
      if (confirm(`This will replace all existing test points with ${templateName} (${pointsPreview}). Continue?`)) {
        tbody.innerHTML = '';
        
        templatePoints.forEach(point => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td><input type="number" step="0.001" value="${point}" class="ref-input" style="width:100%"></td>
            <td>
              <select class="dir-select" style="width:100%">
                ${isPressure ? 
                  '<option value="rising">↑ Rising</option><option value="falling">↓ Falling</option>' :
                  '<option value="as-found">As Found</option><option value="as-left">As Left</option>'
                }
              </select>
            </td>
            <td><input type="number" step="0.001" placeholder="0" class="meas-input" style="width:100%"></td>
            <td class="dev-cell">0.000</td>
            <td class="error-cell">0.000%</td>
            <td class="unc-cell">-</td>
            <td class="pass-cell">-</td>
            <td><button onclick="removeWorksheetRow(this)" style="padding:4px 8px">×</button></td>
          `;
          tbody.appendChild(row);
          attachWorksheetRowListeners(row);
        });
        
        // Silent - no notification needed for template points
      }
    }

    function calculateWorksheetUncertainty() {
      // Get accuracy from the form
      const accuracyField = document.getElementById('ws_accuracy');
      const rangeField = document.getElementById('ws_typeRange');
      
      if (!accuracyField || !accuracyField.value) {
        showNotification('Missing Accuracy', 'Please enter the equipment accuracy first.\n\nExample: ±0.5% or ±1.0 psi', 'warning');
        accuracyField?.focus();
        return;
      }

      // Parse accuracy value (handle formats like "±0.5%", "0.5%", "±0.5", etc.)
      let accuracy = accuracyField.value.trim();
      accuracy = accuracy.replace(/±/g, '').replace(/%/g, '').trim();
      const accuracyValue = parseFloat(accuracy);
      
      if (isNaN(accuracyValue)) {
        showNotification('Invalid Format', 'Please enter a numeric value like: ±0.5% or ±1.0', 'warning');
        return;
      }

      // Standard uncertainty factors for calibration
      const factors = {
        reference: accuracyValue / 100,      // Reference standard uncertainty
        resolution: 0.05,                     // Resolution uncertainty (5%)
        repeatability: 0.1,                   // Repeatability uncertainty (10%)
        temperature: 0.02,                    // Temperature effect (2%)
        drift: 0.02                           // Drift uncertainty (2%)
      };

      // Combined standard uncertainty (RSS - Root Sum of Squares)
      const combinedUncertainty = Math.sqrt(
        Math.pow(factors.reference, 2) +
        Math.pow(factors.resolution, 2) +
        Math.pow(factors.repeatability, 2) +
        Math.pow(factors.temperature, 2) +
        Math.pow(factors.drift, 2)
      );

      // Expanded uncertainty (k=2 for 95% confidence level)
      const expandedUncertainty = combinedUncertainty * 2;
      const expandedPercent = (expandedUncertainty * 100).toFixed(3);

      // Display result
      const range = rangeField?.value || 'Full Scale';
      const message = `📊 Measurement Uncertainty Calculation\n\n` +
                     `Equipment: ${range}\n` +
                     `Accuracy: ±${accuracyValue}%\n\n` +
                     `Uncertainty Components:\n` +
                     `• Reference Standard: ${(factors.reference * 100).toFixed(2)}%\n` +
                     `• Resolution: ${(factors.resolution * 100).toFixed(2)}%\n` +
                     `• Repeatability: ${(factors.repeatability * 100).toFixed(2)}%\n` +
                     `• Temperature: ${(factors.temperature * 100).toFixed(2)}%\n` +
                     `• Drift: ${(factors.drift * 100).toFixed(2)}%\n\n` +
                     `Combined Uncertainty (uc): ±${(combinedUncertainty * 100).toFixed(3)}%\n\n` +
                     `✓ Expanded Uncertainty (U, k=2): ±${expandedPercent}%\n` +
                     `(95% confidence level)\n\n` +
                     `All calculations updated automatically!`;

      showNotification('Uncertainty Calculated', message, 'success');

      // Recalculate all rows with new uncertainty
      updateAllWorksheetCalculations();

      console.log('✓ Uncertainty calculated:', expandedPercent + '%');
      return expandedUncertainty;
    }

    // Make functions globally available
    window.attachWorksheetRowListeners = attachWorksheetRowListeners;
    window.calculateWorksheetRow = calculateWorksheetRow;
    window.updateAllWorksheetCalculations = updateAllWorksheetCalculations;
    window.updateTestSummary = updateTestSummary;
    window.removeWorksheetRow = removeWorksheetRow;

    // Worksheet Storage and Management Functions
    function getWorksheets() {
      const stored = localStorage.getItem('calibration_worksheets');
      const worksheets = stored ? JSON.parse(stored) : [];
      console.log('📖 Retrieved worksheets from localStorage:', worksheets.length, 'worksheets');
      return worksheets;
    }

    function saveWorksheets(worksheets) {
      localStorage.setItem('calibration_worksheets', JSON.stringify(worksheets));
      console.log('💾 Saved worksheets to localStorage:', worksheets.length, 'worksheets');
    }

    function generateWorksheetNumber() {
      const worksheets = getWorksheets();
      const year = new Date().getFullYear();
      const count = worksheets.filter(w => w.worksheetNumber.includes(year)).length + 1;
      return `WS-${year}-${String(count).padStart(3, '0')}`;
    }

    function collectWorksheetData() {
      // Collect all form data
      const equipmentData = {
        description: document.getElementById('ws_equipDesc')?.value || '',
        manufacturer: document.getElementById('ws_manufacturer')?.value || '',
        model: document.getElementById('ws_equipModel')?.value || '',
        serialNumber: document.getElementById('ws_serialNo')?.value || '',
        typeRange: document.getElementById('ws_typeRange')?.value || '',
        accuracy: document.getElementById('ws_accuracy')?.value || '',
        location: document.getElementById('ws_location')?.value || '',
        assetNumber: document.getElementById('ws_assetNo')?.value || ''
      };

      const customerData = {
        name: document.getElementById('ws_customer')?.value || '',
        site: document.getElementById('ws_site')?.value || '',
        contact: document.getElementById('ws_contact')?.value || '',
        contactInfo: document.getElementById('ws_contactInfo')?.value || ''
      };

      const standardsData = {
        refStandard: document.getElementById('ws_refStandard')?.value || '',
        serialNo: document.getElementById('ws_stdSerial')?.value || '',
        calDate: document.getElementById('ws_stdCalDate')?.value || '',
        nextCalDate: document.getElementById('ws_stdNextCal')?.value || '',
        traceability: document.getElementById('ws_traceability')?.value || ''
      };

      // Collect test results
      const testResults = [];
      const rows = document.querySelectorAll('#ws_resultsTable tbody tr');
      rows.forEach(row => {
        const refInput = row.querySelector('.ref-input');
        const dirSelect = row.querySelector('.dir-select');
        const measInput = row.querySelector('.meas-input');
        const devCell = row.querySelector('.dev-cell');
        const errorCell = row.querySelector('.error-cell');
        const uncCell = row.querySelector('.unc-cell');
        const passCell = row.querySelector('.pass-cell');

        if (refInput) {
          testResults.push({
            referenceValue: parseFloat(refInput.value || 0),
            direction: dirSelect?.value || '',
            measuredValue: parseFloat(measInput?.value || 0),
            deviation: devCell?.textContent || '0.000',
            errorPercent: errorCell?.textContent || '0.000%',
            uncertainty: uncCell?.textContent || '-',
            passFail: passCell?.textContent || '-'
          });
        }
      });

      const signoffData = {
        calibratedBy: document.getElementById('ws_calibratedBy')?.value || '',
        calibrationDate: document.getElementById('ws_calibrationDate')?.value || new Date().toISOString().split('T')[0],
        comments: document.getElementById('ws_comments')?.value || ''
      };

      return {
        equipment: equipmentData,
        customer: customerData,
        standards: standardsData,
        testResults: testResults,
        signoff: signoffData,
        worksheetType: selectedWorksheetTypeValue || 'custom'
      };
    }

    function saveWorksheetDraft() {
      console.log('💾 saveWorksheetDraft() called');
      const data = collectWorksheetData();
      console.log('📊 Collected draft data:', data);
      
      const worksheets = getWorksheets();
      console.log('📋 Current worksheets before saving draft:', worksheets);
      
      const worksheetNumber = generateWorksheetNumber();
      const worksheet = {
        id: 'ws_' + Date.now(),
        worksheetNumber: worksheetNumber,
        status: 'draft',
        data: data,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      console.log('✨ New draft worksheet created:', worksheet);

      worksheets.push(worksheet);
      console.log('📋 Worksheets after adding draft:', worksheets);
      
      saveWorksheets(worksheets);
      console.log('✅ Draft saved to localStorage');

      // Verify it was saved
      const verification = getWorksheets();
      console.log('🔍 Verification - Retrieved worksheets:', verification);

      showNotification(
        'Draft Saved',
        `Worksheet #: ${worksheetNumber}\nStatus: Draft\n\nYou can continue editing later.`,
        'success'
      );
      
      // Return to worksheet list and refresh
      console.log('🔄 Showing worksheet list...');
      showWorksheetList();
      
      console.log('🔄 Loading worksheet cards...');
      loadWorksheetCards();
      
      console.log('📊 Updating dashboard stats...');
      updateDashboardStats();
      
      console.log('✅ Save draft process finished');
    }

    function completeWorksheet() {
      console.log('🎯 completeWorksheet() called');
      const data = collectWorksheetData();
      console.log('📊 Collected worksheet data:', data);

      // Validation
      if (!data.equipment.description || !data.equipment.manufacturer) {
        showNotification('Missing Information', 'Please fill in Equipment Description and Manufacturer before completing.', 'warning');
        return;
      }

      if (!data.customer.name) {
        showNotification('Missing Information', 'Please fill in Customer Name before completing.', 'warning');
        return;
      }

      if (data.testResults.length === 0) {
        showNotification('Missing Information', 'Please add at least one test point before completing.', 'warning');
        return;
      }

      if (!data.signoff.calibratedBy) {
        showNotification('Missing Information', 'Please enter your name in the "Calibrated By" field.', 'warning');
        return;
      }

      const worksheets = getWorksheets();
      console.log('📋 Current worksheets before adding:', worksheets);
      
      const worksheetNumber = generateWorksheetNumber();
      const today = new Date();
      const oneYearFromNow = new Date(today);
      oneYearFromNow.setFullYear(today.getFullYear() + 1);
      
      const worksheet = {
        id: 'ws_' + Date.now(),
        worksheetNumber: worksheetNumber,
        status: 'completed',
        data: data,
        createdAt: new Date().toISOString(),
        completedAt: new Date().toISOString(),
        dateIssue: today.toISOString().split('T')[0], // Certificate issue date
        dateDue: oneYearFromNow.toISOString().split('T')[0], // Certificate due date (1 year from now)
        certificateNumber: worksheetNumber // Use same number for certificate
      };

      console.log('✨ New worksheet created:', worksheet);

      worksheets.push(worksheet);
      console.log('📋 Worksheets after adding:', worksheets);
      
      saveWorksheets(worksheets);
      console.log('✅ Worksheet saved to localStorage');

      // Verify it was saved
      const verification = getWorksheets();
      console.log('🔍 Verification - Retrieved worksheets:', verification);

      showNotification(
        'Worksheet Completed',
        `Worksheet #: ${worksheetNumber}\nEquipment: ${data.equipment.description}\nCustomer: ${data.customer.name}\n\nThe worksheet is now available in the dashboard.`,
        'success'
      );
      
      // Return to worksheet list and refresh
      console.log('🔄 Showing worksheet list...');
      showWorksheetList();
      
      console.log('🔄 Loading worksheet cards...');
      loadWorksheetCards();
      
      console.log('📊 Updating dashboard stats...');
      updateDashboardStats();
      
      console.log('📋 Loading recent certificates on dashboard...');
      loadRecentCertificates();
      
      console.log('🔔 Updating certificate notification badge...');
      updateCertificateNotificationBadge();
      
      console.log('✅ Complete worksheet process finished');
    }

    function showWorksheetList() {
      document.getElementById('worksheetTypeSelector').style.display = 'none';
      document.getElementById('worksheetFormContainer').style.display = 'none';
      document.getElementById('worksheetListContainer').style.display = 'block';
    }

    function loadWorksheetCards() {
      const worksheets = getWorksheets();
      const grid = document.getElementById('worksheetsGrid');
      
      console.log('📋 Loading worksheet cards...', {
        worksheetCount: worksheets.length,
        gridExists: !!grid,
        worksheets: worksheets
      });
      
      if (!grid) {
        console.warn('⚠️ worksheetsGrid element not found');
        return;
      }

      // Clear existing sample cards
      grid.innerHTML = '';

      if (worksheets.length === 0) {
        console.log('ℹ️ No worksheets found, showing empty state');
        grid.innerHTML = `
          <div style="grid-column: 1/-1; text-align: center; padding: 60px 20px; color: #666;">
            <i class="fas fa-clipboard-list" style="font-size: 64px; margin-bottom: 16px; opacity: 0.3;"></i>
            <h3>No Worksheets Yet</h3>
            <p>Click "New Worksheet" to create your first calibration worksheet</p>
          </div>
        `;
        return;
      }

      console.log('✅ Loading', worksheets.length, 'worksheet cards');

      // Sort by created date (newest first)
      worksheets.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

      worksheets.forEach(worksheet => {
        const card = createWorksheetCard(worksheet);
        grid.appendChild(card);
      });
    }

    function createWorksheetCard(worksheet) {
      const card = document.createElement('div');
      card.className = `worksheet-card status-${worksheet.status}`;
      
      const statusIcons = {
        'draft': 'fa-file-circle-plus',
        'completed': 'fa-check-circle',
        'in-progress': 'fa-hourglass-half',
        'pending-review': 'fa-clock'
      };

      const statusLabels = {
        'draft': 'Draft',
        'completed': 'Completed',
        'in-progress': 'In Progress',
        'pending-review': 'Pending Review'
      };

      const equipmentIcons = {
        'pressure': 'fa-gauge-high',
        'temperature': 'fa-thermometer-half',
        'electrical': 'fa-bolt',
        'mechanical': 'fa-cog',
        'dimensional': 'fa-ruler',
        'custom': 'fa-wrench'
      };

      const icon = equipmentIcons[worksheet.data.worksheetType] || 'fa-wrench';
      const date = new Date(worksheet.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });

      card.innerHTML = `
        <div class="worksheet-card-header">
          <div class="status-badge status-${worksheet.status}">
            <i class="fas ${statusIcons[worksheet.status]}"></i> ${statusLabels[worksheet.status]}
          </div>
          <div class="worksheet-menu">
            <button class="menu-btn" onclick="showWorksheetMenu('${worksheet.id}')"><i class="fas fa-ellipsis-v"></i></button>
          </div>
        </div>
        <div class="worksheet-card-content">
          <div class="equipment-icon">
            <i class="fas ${icon}"></i>
          </div>
          <h3>${worksheet.data.equipment.description || 'Untitled Equipment'}</h3>
          <p class="worksheet-meta">
            <span><i class="fas fa-hashtag"></i> ${worksheet.worksheetNumber}</span>
            <span><i class="fas fa-building"></i> ${worksheet.data.customer.name || 'No Customer'}</span>
          </p>
          <p class="worksheet-details">
            <span><i class="fas fa-calendar"></i> ${date}</span>
            <span><i class="fas fa-user"></i> ${worksheet.data.signoff.calibratedBy || 'N/A'}</span>
          </p>
        </div>
        <div class="worksheet-card-footer">
          ${worksheet.status === 'completed' ? `
            <button class="btn-sm btn-primary" onclick="viewWorksheet('${worksheet.id}')">
              <i class="fas fa-eye"></i> View
            </button>
            <button class="btn-sm btn-success" onclick="convertToCertificate('${worksheet.id}')">
              <i class="fas fa-certificate"></i> Issue Certificate
            </button>
          ` : `
            <button class="btn-sm btn-primary" onclick="editWorksheet('${worksheet.id}')">
              <i class="fas fa-edit"></i> Edit
            </button>
            <button class="btn-sm btn-danger" onclick="deleteWorksheet('${worksheet.id}')">
              <i class="fas fa-trash"></i> Delete
            </button>
          `}
        </div>
      `;

      return card;
    }

    function viewWorksheet(id) {
      showNotification('View Worksheet', 'View worksheet feature coming soon!', 'info');
    }

    function editWorksheet(id) {
      showNotification('Edit Worksheet', 'Edit worksheet feature coming soon!', 'info');
    }

    function deleteWorksheet(id) {
      showNotification(
        'Delete Worksheet',
        'Are you sure you want to delete this worksheet?\n\nThis action cannot be undone.',
        'warning',
        [
          {
            text: 'Cancel',
            style: 'secondary'
          },
          {
            text: 'Delete',
            style: 'primary',
            action: () => {
              const worksheets = getWorksheets();
              const filtered = worksheets.filter(w => w.id !== id);
              saveWorksheets(filtered);
              loadWorksheetCards();
              updateDashboardStats();
              showNotification('Deleted', 'Worksheet deleted successfully.', 'success');
            }
          }
        ]
      );
    }

    // Certificate Notification Management
    function getViewedCertificates() {
      const viewed = localStorage.getItem('viewedCertificates');
      return viewed ? JSON.parse(viewed) : [];
    }

    function saveViewedCertificates(viewedIds) {
      localStorage.setItem('viewedCertificates', JSON.stringify(viewedIds));
    }

    function markCertificateAsViewed(worksheetId) {
      const viewed = getViewedCertificates();
      if (!viewed.includes(worksheetId)) {
        viewed.push(worksheetId);
        saveViewedCertificates(viewed);
      }
      updateCertificateNotificationBadge();
    }

    function markAllCertificatesAsViewed() {
      const worksheets = getWorksheets();
      const completedIds = worksheets
        .filter(ws => ws.status === 'completed')
        .map(ws => ws.id);
      saveViewedCertificates(completedIds);
      updateCertificateNotificationBadge();
    }

    function updateCertificateNotificationBadge() {
      const worksheets = getWorksheets();
      const completedCertificates = worksheets.filter(ws => ws.status === 'completed');
      const viewedCertificates = getViewedCertificates();
      
      // Count unviewed certificates
      const unviewedCount = completedCertificates.filter(cert => 
        !viewedCertificates.includes(cert.id)
      ).length;

      const badge = document.getElementById('certificateNotificationBadge');
      if (badge) {
        if (unviewedCount > 0) {
          badge.textContent = unviewedCount;
          badge.style.display = 'block';
        } else {
          badge.style.display = 'none';
        }
      }
    }

    function convertToCertificate(id) {
      const worksheets = getWorksheets();
      const worksheet = worksheets.find(ws => ws.id === id);

      if (!worksheet) {
        showNotification('Not Found', 'Worksheet not found.', 'error');
        return;
      }

      // Check if worksheet is completed
      if (worksheet.status !== 'completed') {
        showNotification(
          'Cannot Issue Certificate',
          'Only completed worksheets can be converted to certificates.\n\nPlease complete the worksheet first by filling in all required data and clicking "Complete Worksheet".',
          'warning'
        );
        return;
      }

      // Show confirmation with options
      showNotification(
        'Issue Certificate',
        `Ready to issue certificate for:\n\n📋 ${worksheet.data?.equipment?.description || 'Equipment'}\n👤 ${worksheet.data?.customer?.name || 'Customer'}\n🔢 ${worksheet.worksheetNumber || 'N/A'}\n\nThe certificate has already been created from this completed worksheet.`,
        'success',
        [
          {
            text: 'View Certificate',
            style: 'primary',
            action: () => {
              // Navigate to certificates page and preview this certificate
              window.location.hash = 'certificates';
              setTimeout(() => {
                previewCertificate(id);
              }, 300);
            }
          },
          {
            text: 'Download PDF',
            style: 'secondary',
            action: () => {
              downloadCertificatePDF(id);
            }
          },
          {
            text: 'Close',
            style: 'secondary',
            action: () => {}
          }
        ]
      );
    }

    function showWorksheetMenu(id) {
      console.log('Worksheet menu for:', id);
    }

    // Update Dashboard Statistics
    function updateDashboardStats() {
      const worksheets = getWorksheets();
      const today = new Date().toISOString().split('T')[0];
      const now = new Date();
      const startOfWeek = new Date(now);
      startOfWeek.setDate(now.getDate() - now.getDay()); // Sunday
      startOfWeek.setHours(0, 0, 0, 0);

      // Count today's calibrations (any activity today)
      const todayCount = worksheets.filter(w => {
        if (w.completedAt) {
          const completedDate = w.completedAt.split('T')[0];
          return completedDate === today;
        }
        if (w.dateIssue) {
          return w.dateIssue === today;
        }
        return false;
      }).length;

      // Count this week's calibrations
      const weeklyCount = worksheets.filter(w => {
        if (w.completedAt) {
          const completedDate = new Date(w.completedAt);
          return completedDate >= startOfWeek;
        }
        if (w.dateIssue) {
          const issueDate = new Date(w.dateIssue);
          return issueDate >= startOfWeek;
        }
        return false;
      }).length;

      // Count overdue calibrations (due date passed and not completed)
      const overdueCount = worksheets.filter(w => {
        if (w.status === 'completed') return false;
        if (w.dateDue) {
          return w.dateDue < today;
        }
        return false;
      }).length;

      // Count completed today
      const completedToday = worksheets.filter(w => {
        if (w.status === 'completed' && w.completedAt) {
          const completedDate = w.completedAt.split('T')[0];
          return completedDate === today;
        }
        return false;
      }).length;

      // Update quick stats bar
      const todayCountEl = document.getElementById('todayCount');
      const weeklyCountEl = document.getElementById('weeklyCount');
      const overdueCountEl = document.getElementById('overdueCount');
      const completedTodayEl = document.getElementById('completedToday');

      if (todayCountEl) todayCountEl.textContent = todayCount;
      if (weeklyCountEl) weeklyCountEl.textContent = weeklyCount;
      if (overdueCountEl) overdueCountEl.textContent = overdueCount;
      if (completedTodayEl) completedTodayEl.textContent = completedToday;
    }

    // Load Recent Certificates on Dashboard
    function loadRecentCertificates() {
      console.log('🔄 loadRecentCertificates() called');
      const worksheets = getWorksheets();
      console.log('📋 Worksheets found:', worksheets);
      const recentList = document.querySelector('.recent-worksheets-list');
      console.log('📍 Recent list element:', recentList);
      
      if (!recentList) {
        console.error('❌ .recent-worksheets-list element not found!');
        return;
      }

      // Get all worksheets, sort by date (most recent first)
      const sortedWorksheets = [...worksheets].sort((a, b) => {
        const dateA = new Date(a.completedAt || a.dateIssue || a.createdAt || 0);
        const dateB = new Date(b.completedAt || b.dateIssue || b.createdAt || 0);
        return dateB - dateA;
      });

      // Take the 5 most recent
      const recentWorksheets = sortedWorksheets.slice(0, 5);
      console.log('📊 Recent worksheets to display:', recentWorksheets);

      // Clear existing content
      recentList.innerHTML = '';

      if (recentWorksheets.length === 0) {
        console.log('⚠️ No worksheets to display');
        recentList.innerHTML = `
          <div style="text-align: center; padding: 40px 20px; color: #666;">
            <i class="fas fa-inbox" style="font-size: 48px; margin-bottom: 16px; opacity: 0.3;"></i>
            <p>No worksheets or certificates yet.</p>
            <button class="btn btn-primary" onclick="window.location.hash='worksheets'" style="margin-top: 16px;">
              <i class="fas fa-plus"></i> Create First Worksheet
            </button>
          </div>
        `;
        return;
      }

      // Display each worksheet
      recentWorksheets.forEach(worksheet => {
        const item = createDashboardWorksheetItem(worksheet);
        recentList.appendChild(item);
      });
    }

    // Create Dashboard Worksheet Item
    function createDashboardWorksheetItem(worksheet) {
      const div = document.createElement('div');
      
      // Determine status class
      let statusClass = 'status-draft';
      let statusIcon = 'fas fa-pen';
      let statusLabel = 'Draft';
      
      if (worksheet.status === 'completed') {
        statusClass = 'status-completed';
        statusIcon = 'fas fa-check-circle';
        statusLabel = 'Completed';
      } else if (worksheet.status === 'pending') {
        statusClass = 'status-pending';
        statusIcon = 'fas fa-hourglass-half';
        statusLabel = 'Pending Review';
      }

      // Get equipment icon
      let equipmentIcon = 'fas fa-wrench';
      const worksheetType = worksheet.data?.worksheetType || '';
      if (worksheetType.toLowerCase().includes('pressure')) {
        equipmentIcon = 'fas fa-gauge-high';
      } else if (worksheetType.toLowerCase().includes('temperature')) {
        equipmentIcon = 'fas fa-thermometer-half';
      } else if (worksheetType.toLowerCase().includes('electrical')) {
        equipmentIcon = 'fas fa-bolt';
      } else if (worksheetType.toLowerCase().includes('mechanical')) {
        equipmentIcon = 'fas fa-cog';
      } else if (worksheetType.toLowerCase().includes('dimensional')) {
        equipmentIcon = 'fas fa-ruler';
      }

      // Format date
      const date = worksheet.completedAt || worksheet.dateIssue || worksheet.createdAt;
      const formattedDate = date ? new Date(date).toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      }) : 'N/A';

      div.className = `worksheet-item ${statusClass}`;
      div.innerHTML = `
        <div class="worksheet-status-indicator"></div>
        <div class="worksheet-icon">
          <i class="${equipmentIcon}"></i>
        </div>
        <div class="worksheet-info">
          <h4>${worksheet.data?.equipment?.description || 'Equipment'}</h4>
          <p class="worksheet-details">
            <span><i class="fas fa-hashtag"></i> ${worksheet.worksheetNumber || 'N/A'}</span>
            <span><i class="fas fa-building"></i> ${worksheet.data?.customer?.name || 'N/A'}</span>
            <span><i class="fas fa-calendar"></i> ${formattedDate}</span>
          </p>
        </div>
        <div class="worksheet-status-badge ${statusClass}">
          <i class="${statusIcon}"></i> ${statusLabel}
        </div>
        <div class="worksheet-actions">
          ${worksheet.status === 'completed' ? `
            <button class="action-btn" title="View Certificate" onclick="viewCertificateFromDashboard('${worksheet.id}')">
              <i class="fas fa-file-pdf"></i>
            </button>
          ` : `
            <button class="action-btn primary" title="Continue" onclick="window.location.hash='worksheets'">
              <i class="fas fa-play"></i>
            </button>
          `}
          <button class="action-btn" title="Duplicate" onclick="duplicateWorksheet('${worksheet.id}')">
            <i class="fas fa-copy"></i>
          </button>
          <button class="action-btn" title="View Details" onclick="viewWorksheet('${worksheet.id}')">
            <i class="fas fa-eye"></i>
          </button>
        </div>
      `;

      return div;
    }

    // View Certificate from Dashboard
    function viewCertificateFromDashboard(worksheetId) {
      // Navigate to certificates page
      window.location.hash = 'certificates';
      // After page loads, open the certificate preview
      setTimeout(() => {
        previewCertificate(worksheetId);
      }, 300);
    }

    // Duplicate Worksheet
    function duplicateWorksheet(id) {
      const worksheets = getWorksheets();
      const worksheet = worksheets.find(ws => ws.id === id);
      
      if (!worksheet) {
        showNotification('Error', 'Worksheet not found.', 'error');
        return;
      }

      // Create a duplicate with new ID and number
      const duplicate = {
        ...worksheet,
        id: 'ws_' + Date.now(),
        worksheetNumber: generateWorksheetNumber(),
        status: 'draft',
        createdAt: new Date().toISOString(),
        completedAt: null
      };

      worksheets.push(duplicate);
      saveWorksheets(worksheets);

      showNotification(
        'Worksheet Duplicated',
        `New worksheet #${duplicate.worksheetNumber} created from #${worksheet.worksheetNumber}`,
        'success'
      );

      // Refresh displays
      loadWorksheetCards();
      updateDashboardStats();
      loadRecentCertificates();
    }

    // Filter Worksheets Function
    function filterWorksheets() {
      const searchTerm = document.getElementById('worksheetSearch')?.value.toLowerCase() || '';
      const statusFilter = document.getElementById('statusFilter')?.value || '';
      const equipmentFilter = document.getElementById('equipmentTypeFilter')?.value || '';

      const worksheets = getWorksheets();
      const grid = document.getElementById('worksheetsGrid');
      
      if (!grid) return;

      // Filter worksheets
      const filteredWorksheets = worksheets.filter(worksheet => {
        // Search filter
        const matchesSearch = !searchTerm || 
          worksheet.data?.equipment?.description?.toLowerCase().includes(searchTerm) ||
          worksheet.data?.equipment?.manufacturer?.toLowerCase().includes(searchTerm) ||
          worksheet.data?.equipment?.model?.toLowerCase().includes(searchTerm) ||
          worksheet.data?.equipment?.serialNumber?.toLowerCase().includes(searchTerm) ||
          worksheet.data?.customer?.name?.toLowerCase().includes(searchTerm) ||
          worksheet.worksheetNumber?.toLowerCase().includes(searchTerm);

        // Status filter
        const matchesStatus = !statusFilter || worksheet.status === statusFilter;

        // Equipment type filter
        const matchesEquipment = !equipmentFilter || worksheet.data.worksheetType === equipmentFilter;

        return matchesSearch && matchesStatus && matchesEquipment;
      });

      // Clear grid
      grid.innerHTML = '';

      // Show results
      if (filteredWorksheets.length === 0) {
        grid.innerHTML = `
          <div style="grid-column: 1/-1; text-align: center; padding: 60px 20px; color: #666;">
            <i class="fas fa-search" style="font-size: 64px; margin-bottom: 16px; opacity: 0.3;"></i>
            <h3>No Matching Worksheets</h3>
            <p>Try adjusting your search or filter criteria</p>
            <button class="btn btn-secondary" onclick="clearWorksheetFilters()" style="margin-top: 16px;">
              <i class="fas fa-times"></i> Clear Filters
            </button>
          </div>
        `;
        return;
      }

      // Sort by created date (newest first)
      filteredWorksheets.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

      // Display filtered worksheets
      filteredWorksheets.forEach(worksheet => {
        const card = createWorksheetCard(worksheet);
        grid.appendChild(card);
      });
    }

    // Clear all filters
    function clearWorksheetFilters() {
      const searchInput = document.getElementById('worksheetSearch');
      const statusFilter = document.getElementById('statusFilter');
      const equipmentFilter = document.getElementById('equipmentTypeFilter');

      if (searchInput) searchInput.value = '';
      if (statusFilter) statusFilter.value = '';
      if (equipmentFilter) equipmentFilter.value = '';

      loadWorksheetCards();
    }

    // Export filter function
    window.filterWorksheets = filterWorksheets;
    window.clearWorksheetFilters = clearWorksheetFilters;

    // Load worksheets when page loads or when navigating to worksheets section
    window.addEventListener('DOMContentLoaded', function() {
      loadWorksheetCards();
      updateDashboardStats();
      loadRecentCertificates();
      updateCertificateNotificationBadge();

      // Add filter event listeners
      const searchInput = document.getElementById('worksheetSearch');
      const statusFilter = document.getElementById('statusFilter');
      const equipmentFilter = document.getElementById('equipmentTypeFilter');

      if (searchInput) {
        searchInput.addEventListener('input', filterWorksheets);
        searchInput.addEventListener('keyup', filterWorksheets);
      }

      if (statusFilter) {
        statusFilter.addEventListener('change', filterWorksheets);
      }

      if (equipmentFilter) {
        equipmentFilter.addEventListener('change', filterWorksheets);
      }
    });

    // Note: Main hashchange listener now in handleNavigation() function below

    // Also reload when worksheets section becomes visible
    const worksheetSection = document.getElementById('worksheets');
    if (worksheetSection) {
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.target.classList.contains('active')) {
            loadWorksheetCards();
            updateDashboardStats();
          }
        });
      });
      
      observer.observe(worksheetSection, { attributes: true, attributeFilter: ['class'] });
    }

    // Navigation system for sidebar menu
    function showSection(sectionId) {
      console.log('🎯 showSection called:', sectionId);
      
      // Remove 'active' class from all sections
      const sections = document.querySelectorAll('.content-section');
      sections.forEach(section => section.classList.remove('active'));
      
      // Remove 'active' class from all menu items
      const menuItems = document.querySelectorAll('.menu-item');
      menuItems.forEach(item => item.classList.remove('active'));
      
      // Add 'active' class to target section
      const targetSection = document.getElementById(sectionId);
      if (targetSection) {
        targetSection.classList.add('active');
        targetSection.style.display = 'block';
        console.log('✅ Section activated:', sectionId);
        
        // Load data for specific sections
        if (sectionId === 'admin' && typeof loadUsers === 'function') {
          loadUsers(1);
        }
      } else {
        console.error('❌ Section not found:', sectionId);
      }
      
      // Add 'active' class to corresponding menu item
      const targetMenuItem = document.querySelector(`.menu-item[data-section="${sectionId}"]`);
      if (targetMenuItem) {
        targetMenuItem.classList.add('active');
      }
    }

    // Handle hash navigation
    function handleNavigation() {
      const hash = window.location.hash.slice(1) || 'dashboard';
      console.log('🧭 Navigation to:', hash);
      
      showSection(hash);
      
      // Page-specific logic
      setTimeout(() => {
        if (hash === 'worksheets') {
          loadWorksheetCards();
          updateDashboardStats();
        } else if (hash === 'dashboard' || hash === '') {
          updateDashboardStats();
          loadRecentCertificates();
          updateCertificateNotificationBadge();
        } else if (hash === 'certificates') {
          loadCertificates();
          markAllCertificatesAsViewed();
        } else if (hash === 'profile') {
          loadProfileData();
        }
      }, 100);
    }

    // Initialize navigation on page load
    handleNavigation();

    // Listen for hash changes
    window.addEventListener('hashchange', handleNavigation);

    // Make functions globally available
    window.saveWorksheetDraft = saveWorksheetDraft;
    window.completeWorksheet = completeWorksheet;
    window.viewWorksheet = viewWorksheet;
    window.editWorksheet = editWorksheet;
    window.deleteWorksheet = deleteWorksheet;
    window.convertToCertificate = convertToCertificate;
    window.continueWorksheet = editWorksheet; // Alias
    window.showWorksheetMenu = showWorksheetMenu;
    window.loadRecentCertificates = loadRecentCertificates;
    window.viewCertificateFromDashboard = viewCertificateFromDashboard;
    window.duplicateWorksheet = duplicateWorksheet;
    window.updateCertificateNotificationBadge = updateCertificateNotificationBadge;
    window.markAllCertificatesAsViewed = markAllCertificatesAsViewed;
    window.showSection = showSection;

    function showTemplateSelectionDialog(tbody) {
      if (typeof PRESSURE_TEMPLATES === 'undefined') {
        showNotification('Templates Unavailable', 'No templates are available at this time.', 'warning');
        return;
      }

      // Build a simple selection list
      let options = 'Select a calibration template:\n\n';
      const templateArray = [];
      let index = 1;
      
      for (const templateId in PRESSURE_TEMPLATES) {
        const template = PRESSURE_TEMPLATES[templateId];
        templateArray.push({ id: templateId, template: template });
        const points = template.testPoints.map(tp => tp.refPressure).join(', ');
        options += `${index}. ${template.name} (${template.testPoints.length} points: ${points})\n`;
        index++;
      }
      
      options += '\nEnter template number (or 0 to cancel):';
      
      const choice = prompt(options);
      const choiceNum = parseInt(choice);
      
      if (choiceNum > 0 && choiceNum <= templateArray.length) {
        const selected = templateArray[choiceNum - 1];
        applyTemplatePoints(tbody, selected.template);
      }
    }

    function applyTemplatePoints(tbody, template) {
      const templatePoints = template.testPoints.map(tp => tp.refPressure);
      const pointsPreview = templatePoints.join(', ');
      
      if (confirm(`Apply ${template.name}?\n\nTest points: ${pointsPreview}\n\nThis will replace all existing test points.`)) {
        tbody.innerHTML = '';
        
        templatePoints.forEach(point => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td><input type="number" step="0.001" value="${point}" style="width:100%"></td>
            <td>
              <select style="width:100%">
                <option value="rise">↑ Rising</option>
                <option value="fall">↓ Falling</option>
              </select>
            </td>
            <td><input type="number" step="0.001" placeholder="0" style="width:100%"></td>
            <td>0.000</td>
            <td>0.000%</td>
            <td>-</td>
            <td><button onclick="this.closest('tr').remove()" style="padding:4px 8px">×</button></td>
          `;
          tbody.appendChild(row);
        });
        
        // Also update equipment fields if they're empty
        const manufacturerInput = document.getElementById('ws_manufacturer');
        const modelInput = document.getElementById('ws_equipModel');
        const rangeInput = document.getElementById('ws_typeRange');
        const accuracyInput = document.getElementById('ws_accuracy');
        
        if (manufacturerInput && !manufacturerInput.value) {
          manufacturerInput.value = template.manufacturer;
        }
        if (modelInput && !modelInput.value) {
          modelInput.value = template.model;
        }
        if (rangeInput && !rangeInput.value) {
          rangeInput.value = template.range;
        }
        if (accuracyInput && !accuracyInput.value) {
          accuracyInput.value = template.accuracy;
        }
        
        // Silent - no notification needed
      }
    }

    // Make worksheet functions global
    window.showWorksheetForm = showWorksheetForm;
    window.selectWorksheetType = selectWorksheetType;
    // Auto-save current date
    document.addEventListener('DOMContentLoaded', () => {
      const today = new Date().toISOString().split('T')[0];
      const dateIssueField = document.getElementById('dateIssue');
      const dateDueField = document.getElementById('dateDue');
      
      if (dateIssueField) dateIssueField.value = today;
      
      // Set due date to 1 year from now
      if (dateDueField) {
        const nextYear = new Date();
        nextYear.setFullYear(nextYear.getFullYear() + 1);
        dateDueField.value = nextYear.toISOString().split('T')[0];
      }

      // Initialize modern header features
      initializeModernHeader();
    });

    // Modern Header Functions
    let notifications = [];

    function initializeModernHeader() {
      // Live Clock
      updateClock();
      setInterval(updateClock, 1000);

      // Sidebar elements
      const headerLogo = document.getElementById('headerLogo');
      const mobileMenuToggle = document.getElementById('mobileMenuToggle');
      const sidebar = document.getElementById('sidebar');
      const mainContent = document.getElementById('mainContent');
      
      // Dropdown elements - declare once at top to avoid redeclaration
      const notificationBtn = document.getElementById('notificationBtn');
      const notificationDropdown = document.getElementById('notificationDropdown');
      const userProfileBtn = document.getElementById('userProfileBtn');
      const userDropdown = document.getElementById('userDropdown');
      
      // Forcefully ensure dropdowns are hidden on page load
      if (userDropdown) {
        userDropdown.classList.remove('show');
        userDropdown.style.display = 'none'; // Force hide with inline style
      }
      if (notificationDropdown) {
        notificationDropdown.classList.remove('show');
        notificationDropdown.style.display = 'none'; // Force hide with inline style
      }
      
      // Desktop sidebar toggle (logo click)
      if (headerLogo) {
        headerLogo.addEventListener('click', () => {
          // Only toggle collapsed state on desktop (> 768px)
          if (window.innerWidth > 768) {
            if (sidebar) sidebar.classList.toggle('collapsed');
            if (mainContent) mainContent.classList.toggle('sidebar-collapsed');
          }
        });
      }
      
      // Mobile menu toggle (hamburger button)
      if (mobileMenuToggle && sidebar) {
        mobileMenuToggle.addEventListener('click', (e) => {
          e.stopPropagation();
          sidebar.classList.toggle('active');
          document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
        });
      }
      
      // Close sidebar when clicking outside on mobile
      if (sidebar) {
        document.addEventListener('click', (e) => {
          if (window.innerWidth <= 768) {
            const isClickInsideSidebar = sidebar.contains(e.target);
            const isClickOnToggle = mobileMenuToggle && mobileMenuToggle.contains(e.target);
            
            if (!isClickInsideSidebar && !isClickOnToggle && sidebar.classList.contains('active')) {
              sidebar.classList.remove('active');
              document.body.style.overflow = '';
            }
          }
        });
        
        // Close sidebar when menu item is clicked on mobile
        const menuItems = sidebar.querySelectorAll('.menu-item');
        menuItems.forEach(item => {
          item.addEventListener('click', () => {
            if (window.innerWidth <= 768) {
              sidebar.classList.remove('active');
              document.body.style.overflow = '';
            }
          });
        });
      }
      
      // Handle window resize - close mobile menu if switched to desktop
      let resizeTimer;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
          if (window.innerWidth > 768 && sidebar && sidebar.classList.contains('active')) {
            sidebar.classList.remove('active');
            document.body.style.overflow = '';
          }
        }, 250);
      });

      // Notification Dropdown
      if (notificationBtn && notificationDropdown) {
        notificationBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          // Remove inline style to let CSS take over
          notificationDropdown.style.display = '';
          notificationDropdown.classList.toggle('show');
          if (userDropdown) {
            userDropdown.classList.remove('show');
          }
        });
      }

      // User Profile Dropdown
      if (userProfileBtn && userDropdown) {
        userProfileBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          // Remove inline style to let CSS take over
          userDropdown.style.display = '';
          userDropdown.classList.toggle('show');
          if (notificationDropdown) {
            notificationDropdown.classList.remove('show');
          }
        });
      }

      // Close dropdowns when clicking outside
      document.addEventListener('click', (e) => {
        const notifDropdown = document.getElementById('notificationDropdown');
        const notifBtn = document.getElementById('notificationBtn');
        const usrDropdown = document.getElementById('userDropdown');
        const usrBtn = document.getElementById('userProfileBtn');
        
        if (notifDropdown && !notifBtn?.contains(e.target) && !notifDropdown.contains(e.target)) {
          notifDropdown.classList.remove('show');
        }
        if (usrDropdown && !usrBtn?.contains(e.target) && !usrDropdown.contains(e.target)) {
          usrDropdown.classList.remove('show');
        }
      });

      // Global Search Shortcut (Ctrl+K)
      document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
          e.preventDefault();
          document.getElementById('globalSearch')?.focus();
        }
      });

      // Search functionality
      const globalSearch = document.getElementById('globalSearch');
      if (globalSearch) {
        globalSearch.addEventListener('input', (e) => {
          const query = e.target.value.toLowerCase();
          console.log('🔍 Global search:', query);
          // TODO: Implement actual search functionality
        });
      }

      // Update notification count
      updateNotificationBadge();
    }

    function addNotification(type, message, time = 'Just now') {
      const notification = {
        id: Date.now(),
        type: type, // 'success', 'warning', 'info'
        message: message,
        time: time,
        unread: true
      };
      
      notifications.unshift(notification);
      updateNotificationList();
      updateNotificationBadge();
    }

    function updateNotificationList() {
      const list = document.getElementById('notificationList');
      if (!list) return;

      if (notifications.length === 0) {
        list.innerHTML = `
          <div class="empty-notifications">
            <i class="fas fa-bell-slash"></i>
            <p>No new notifications</p>
          </div>
        `;
        return;
      }

      const iconMap = {
        success: 'fa-check-circle',
        warning: 'fa-exclamation-triangle',
        info: 'fa-info-circle'
      };

      list.innerHTML = notifications.map(notif => `
        <div class="notification-item ${notif.unread ? 'unread' : ''}">
          <div class="notification-icon ${notif.type}">
            <i class="fas ${iconMap[notif.type]}"></i>
          </div>
          <div class="notification-content">
            <p>${notif.message}</p>
            <span class="notification-time">${notif.time}</span>
          </div>
        </div>
      `).join('');
    }

    function updateNotificationBadge() {
      const badge = document.getElementById('notificationCount');
      const unreadCount = notifications.filter(n => n.unread).length;
      
      if (badge) {
        if (unreadCount > 0) {
          badge.textContent = unreadCount;
          badge.style.display = 'flex';
        } else {
          badge.style.display = 'none';
        }
      }
    }

    function clearAllNotifications() {
      notifications = [];
      updateNotificationList();
      updateNotificationBadge();
    }

    // Export notification functions
    window.addNotification = addNotification;
    window.clearAllNotifications = clearAllNotifications;

    function updateClock() {
      const now = new Date();
      
      // Update time (HH:MM:SS)
      const timeEl = document.getElementById('currentTime');
      if (timeEl) {
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        timeEl.textContent = `${hours}:${minutes}:${seconds}`;
      }
      
      // Update date
      const dateEl = document.getElementById('currentDate');
      if (dateEl) {
        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        const dayName = days[now.getDay()];
        const monthName = months[now.getMonth()];
        const dayNum = now.getDate();
        dateEl.textContent = `${dayName}, ${monthName} ${dayNum}`;
      }
    }

    // Export header functions
    window.updateClock = updateClock;

    // Quick Scan Modal Functions
    function openQuickScanModal() {
      const modal = document.getElementById('quickScanModal');
      if (modal) {
        modal.style.display = 'flex';
        // Focus input after a brief delay
        setTimeout(() => {
          document.getElementById('scanInput')?.focus();
        }, 100);
      }
    }

    function closeQuickScanModal() {
      const modal = document.getElementById('quickScanModal');
      if (modal) {
        modal.style.display = 'none';
        // Reset form
        document.getElementById('scanInput').value = '';
        document.getElementById('scanResults').style.display = 'none';
        document.getElementById('scanResultsList').innerHTML = '';
      }
    }

    function performQuickScan() {
      const input = document.getElementById('scanInput').value.trim();
      
      if (!input) {
        showNotification('Empty Search', 'Please enter an equipment tag or serial number to search.', 'warning');
        return;
      }

      // Get all worksheets from localStorage
      const worksheets = getWorksheets();
      
      // Search for matching equipment
      const results = worksheets.filter(ws => {
        const equipmentMatch = ws.equipmentDescription?.toLowerCase().includes(input.toLowerCase());
        const serialMatch = ws.serialNumber?.toLowerCase().includes(input.toLowerCase());
        const tagMatch = ws.tagNumber?.toLowerCase().includes(input.toLowerCase());
        return equipmentMatch || serialMatch || tagMatch;
      });

      const resultsContainer = document.getElementById('scanResults');
      const resultsList = document.getElementById('scanResultsList');

      if (results.length === 0) {
        resultsList.innerHTML = `
          <div style="padding: 20px; text-align: center; background: #fff3cd; border-radius: 8px; border-left: 4px solid #ffc107;">
            <i class="fas fa-search" style="font-size: 32px; color: #ffc107; margin-bottom: 12px;"></i>
            <p style="margin: 0; color: #856404; font-weight: 500;">No results found for "${input}"</p>
            <p style="margin: 8px 0 0 0; font-size: 13px; color: #856404;">
              Try a different tag number or serial number
            </p>
          </div>
        `;
      } else {
        resultsList.innerHTML = results.map(ws => `
          <div style="background: white; border: 1px solid #ddd; border-radius: 8px; padding: 12px; margin-bottom: 8px; cursor: pointer; transition: all 0.2s;" 
               onmouseover="this.style.background='#f8f9fa'; this.style.borderColor='#0066cc';" 
               onmouseout="this.style.background='white'; this.style.borderColor='#ddd';"
               onclick="viewWorksheetFromScan('${ws.id}')">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <div style="font-weight: 600; color: #333; margin-bottom: 4px;">
                  ${ws.equipmentDescription || 'Unknown Equipment'}
                </div>
                <div style="font-size: 12px; color: #666;">
                  <i class="fas fa-building"></i> ${ws.customerName || 'N/A'} 
                  ${ws.serialNumber ? `<span style="margin-left: 12px;"><i class="fas fa-hashtag"></i> SN: ${ws.serialNumber}</span>` : ''}
                </div>
                <div style="font-size: 12px; color: #666; margin-top: 4px;">
                  <i class="fas fa-calendar"></i> ${new Date(ws.dateCompleted || ws.dateIssue).toLocaleDateString()}
                </div>
              </div>
              <span style="padding: 4px 10px; background: ${ws.status === 'completed' ? '#d4edda' : '#fff3cd'}; 
                    color: ${ws.status === 'completed' ? '#155724' : '#856404'}; 
                    border-radius: 12px; font-size: 11px; font-weight: 600;">
                ${ws.status === 'completed' ? '✓ Completed' : '⏳ Draft'}
              </span>
            </div>
          </div>
        `).join('');
      }

      resultsContainer.style.display = 'block';
    }

    function viewWorksheetFromScan(worksheetId) {
      closeQuickScanModal();
      showNotification('View Worksheet', `Opening worksheet ${worksheetId}...\n\nView/Edit feature will be implemented soon!`, 'info');
      // TODO: Implement worksheet viewer
    }

    // Export Modal Functions
    function openExportModal() {
      const modal = document.getElementById('exportModal');
      if (modal) {
        modal.style.display = 'flex';
        
        // Set default dates (last 30 days to today)
        const today = new Date();
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(today.getDate() - 30);
        
        document.getElementById('exportStartDate').value = thirtyDaysAgo.toISOString().split('T')[0];
        document.getElementById('exportEndDate').value = today.toISOString().split('T')[0];
        
        updateExportSummary();
        
        // Add event listeners for real-time summary updates
        ['exportStartDate', 'exportEndDate', 'exportStatus', 'exportEquipmentType', 'exportJobSite'].forEach(id => {
          document.getElementById(id)?.addEventListener('change', updateExportSummary);
        });
      }
    }

    function closeExportModal() {
      const modal = document.getElementById('exportModal');
      if (modal) {
        modal.style.display = 'none';
      }
    }

    function updateExportSummary() {
      const startDate = document.getElementById('exportStartDate').value;
      const endDate = document.getElementById('exportEndDate').value;
      const status = document.getElementById('exportStatus').value;
      const equipmentType = document.getElementById('exportEquipmentType').value;
      const jobSite = document.getElementById('exportJobSite').value.trim();
      const format = document.getElementById('exportFormat').value;

      if (!startDate || !endDate) {
        document.getElementById('exportSummary').textContent = 'Please select a date range';
        return;
      }

      // Filter worksheets based on criteria
      const worksheets = getWorksheets();
      const filtered = worksheets.filter(ws => {
        const wsDate = new Date(ws.dateCompleted || ws.dateIssue);
        const start = new Date(startDate);
        const end = new Date(endDate);
        end.setHours(23, 59, 59, 999); // Include entire end date

        // Date range check
        if (wsDate < start || wsDate > end) return false;

        // Status check
        if (status === 'completed' && ws.status !== 'completed') return false;
        if (status === 'pending' && ws.status === 'completed') return false;

        // Equipment type check
        if (equipmentType !== 'all' && ws.worksheetType !== equipmentType) return false;

        // Job/Site check
        if (jobSite && !ws.customerName?.toLowerCase().includes(jobSite.toLowerCase()) && 
            !ws.location?.toLowerCase().includes(jobSite.toLowerCase())) {
          return false;
        }

        return true;
      });

      const formatText = {
        'pdf-bundle': 'PDF Bundle',
        'pdf-separate': 'Separate PDFs',
        'excel': 'Excel Spreadsheet',
        'csv': 'CSV File'
      };

      const summary = `
        Found <strong>${filtered.length}</strong> worksheet${filtered.length !== 1 ? 's' : ''} matching your criteria
        <br>
        <small style="color: #888;">
          ${new Date(startDate).toLocaleDateString()} to ${new Date(endDate).toLocaleDateString()} · 
          ${formatText[format]}
        </small>
      `;

      document.getElementById('exportSummary').innerHTML = summary;
    }

    function performExport() {
      const startDate = document.getElementById('exportStartDate').value;
      const endDate = document.getElementById('exportEndDate').value;
      const status = document.getElementById('exportStatus').value;
      const equipmentType = document.getElementById('exportEquipmentType').value;
      const jobSite = document.getElementById('exportJobSite').value.trim();
      const format = document.getElementById('exportFormat').value;

      if (!startDate || !endDate) {
        showNotification('Missing Dates', 'Please select both start and end dates for the export.', 'warning');
        return;
      }

      // Filter worksheets
      const worksheets = getWorksheets();
      const filtered = worksheets.filter(ws => {
        const wsDate = new Date(ws.dateCompleted || ws.dateIssue);
        const start = new Date(startDate);
        const end = new Date(endDate);
        end.setHours(23, 59, 59, 999);

        if (wsDate < start || wsDate > end) return false;
        if (status === 'completed' && ws.status !== 'completed') return false;
        if (status === 'pending' && ws.status === 'completed') return false;
        if (equipmentType !== 'all' && ws.worksheetType !== equipmentType) return false;
        if (jobSite && !ws.customerName?.toLowerCase().includes(jobSite.toLowerCase()) && 
            !ws.location?.toLowerCase().includes(jobSite.toLowerCase())) return false;

        return true;
      });

      if (filtered.length === 0) {
        showNotification('No Data', 'No worksheets match your export criteria.', 'warning');
        return;
      }

      // Show export progress notification
      showNotification(
        'Export in Progress',
        `Generating ${format === 'pdf-bundle' ? 'PDF bundle' : format === 'pdf-separate' ? 'separate PDFs' : format.toUpperCase()} for ${filtered.length} worksheet${filtered.length !== 1 ? 's' : ''}...\n\nThis feature will be fully implemented soon!`,
        'info'
      );

      closeExportModal();

      // TODO: Implement actual export functionality
      // This would involve:
      // 1. For PDF: Generate certificates using a PDF library (jsPDF, PDFKit)
      // 2. For Excel: Use SheetJS (xlsx) library
      // 3. For CSV: Simple text formatting
      // 4. Trigger download via blob and download link
    }

    // Export modal functions
    window.openQuickScanModal = openQuickScanModal;
    window.closeQuickScanModal = closeQuickScanModal;
    window.performQuickScan = performQuickScan;
    window.viewWorksheetFromScan = viewWorksheetFromScan;
    window.openExportModal = openExportModal;
    window.closeExportModal = closeExportModal;
    window.performExport = performExport;
    window.updateExportSummary = updateExportSummary;

    // Allow Enter key to trigger search in Quick Scan
    document.addEventListener('DOMContentLoaded', () => {
      const scanInput = document.getElementById('scanInput');
      if (scanInput) {
        scanInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            performQuickScan();
          }
        });
      }

      // Add certificate filter event listeners
      const certSearch = document.getElementById('certificateSearch');
      const certStatusFilter = document.getElementById('certStatusFilter');
      const certEquipmentFilter = document.getElementById('certEquipmentTypeFilter');
      const certDateFrom = document.getElementById('certDateFrom');
      const certDateTo = document.getElementById('certDateTo');

      if (certSearch) {
        certSearch.addEventListener('input', filterCertificates);
        certSearch.addEventListener('keyup', filterCertificates);
      }
      if (certStatusFilter) certStatusFilter.addEventListener('change', filterCertificates);
      if (certEquipmentFilter) certEquipmentFilter.addEventListener('change', filterCertificates);
      if (certDateFrom) certDateFrom.addEventListener('change', filterCertificates);
      if (certDateTo) certDateTo.addEventListener('change', filterCertificates);
    });

    // Certificate Management Functions
    let currentCertificateView = 'grid';
    let currentPreviewCertificate = null;
    let selectedCertificateTemplate = 'classic'; // Default template

    // Load and display certificates
    function loadCertificates() {
      console.log('🔄 loadCertificates() called');
      const worksheets = getWorksheets();
      console.log('📋 All worksheets:', worksheets);
      
      // Only get completed worksheets (these become certificates)
      const certificates = worksheets.filter(ws => ws.status === 'completed');
      console.log('✅ Completed certificates:', certificates);

      // Update statistics
      updateCertificateStats(certificates);

      // Display certificates
      displayCertificates(certificates);
    }

    // Update certificate statistics
    function updateCertificateStats(certificates) {
      const today = new Date();
      const thirtyDaysFromNow = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);

      const totalEl = document.getElementById('totalCertificates');
      const activeEl = document.getElementById('activeCertificates');
      const expiringSoonEl = document.getElementById('expiringSoonCertificates');
      const expiredEl = document.getElementById('expiredCertificates');

      const total = certificates.length;
      const active = certificates.filter(cert => {
        const dueDate = new Date(cert.dateDue);
        return dueDate >= today;
      }).length;
      
      const expiringSoon = certificates.filter(cert => {
        const dueDate = new Date(cert.dateDue);
        return dueDate >= today && dueDate <= thirtyDaysFromNow;
      }).length;
      
      const expired = certificates.filter(cert => {
        const dueDate = new Date(cert.dateDue);
        return dueDate < today;
      }).length;

      if (totalEl) totalEl.textContent = total;
      if (activeEl) activeEl.textContent = active;
      if (expiringSoonEl) expiringSoonEl.textContent = expiringSoon;
      if (expiredEl) expiredEl.textContent = expired;
    }

    // Display certificates in grid or list view
    function displayCertificates(certificates) {
      if (currentCertificateView === 'grid') {
        displayCertificatesGrid(certificates);
      } else {
        displayCertificatesList(certificates);
      }
    }

    // Display certificates in grid view
    function displayCertificatesGrid(certificates) {
      console.log('🎨 displayCertificatesGrid() called with', certificates.length, 'certificates');
      const grid = document.getElementById('certificatesGrid');
      console.log('📍 certificatesGrid element:', grid);
      if (!grid) {
        console.error('❌ certificatesGrid element not found!');
        return;
      }

      grid.innerHTML = '';

      if (certificates.length === 0) {
        console.log('⚠️ No certificates to display');
        grid.innerHTML = `
          <div style="grid-column: 1/-1; text-align: center; padding: 60px 20px; color: #666;">
            <i class="fas fa-certificate" style="font-size: 64px; margin-bottom: 16px; opacity: 0.3;"></i>
            <h3>No Certificates Found</h3>
            <p>Certificates are generated from completed worksheets.</p>
            <button class="btn btn-primary" onclick="window.location.hash='worksheets'" style="margin-top: 16px;">
              <i class="fas fa-file-lines"></i> Go to Worksheets
            </button>
          </div>
        `;
        return;
      }

      // Sort by issue date (newest first)
      certificates.sort((a, b) => new Date(b.dateCompleted || b.dateIssue) - new Date(a.dateCompleted || a.dateIssue));

      console.log('🃏 Creating certificate cards...');
      certificates.forEach((cert, index) => {
        console.log(`  Card ${index + 1}:`, cert.worksheetNumber, cert.data?.equipment?.description);
        const card = createCertificateCard(cert);
        grid.appendChild(card);
      });
      console.log('✅ All certificate cards added to grid');
    }

    // Create certificate card element
    function createCertificateCard(cert) {
      const card = document.createElement('div');
      card.className = 'worksheet-card'; // Reuse worksheet card styling
      
      // Determine certificate status
      const today = new Date();
      const dueDate = new Date(cert.dateDue);
      const thirtyDaysFromNow = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);
      
      let statusClass = 'completed';
      let statusLabel = 'Active';
      let statusIcon = 'fa-check-circle';
      
      if (dueDate < today) {
        statusClass = 'expired';
        statusLabel = 'Expired';
        statusIcon = 'fa-times-circle';
      } else if (dueDate <= thirtyDaysFromNow) {
        statusClass = 'expiring-soon';
        statusLabel = 'Expiring Soon';
        statusIcon = 'fa-clock';
      }

      const equipmentIcons = {
        'pressure': 'fa-gauge-high',
        'temperature': 'fa-thermometer-half',
        'electrical': 'fa-bolt',
        'mechanical': 'fa-cog',
        'dimensional': 'fa-ruler',
        'custom': 'fa-wrench'
      };
      
      const icon = equipmentIcons[cert.data.worksheetType] || 'fa-wrench';
      const issueDate = new Date(cert.dateCompleted || cert.dateIssue).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
      const dueDateFormatted = dueDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });

      card.innerHTML = `
        <div class="worksheet-card-header">
          <div class="status-badge status-${statusClass}">
            <i class="fas ${statusIcon}"></i> ${statusLabel}
          </div>
        </div>
        <div class="worksheet-card-content">
          <div class="equipment-icon">
            <i class="fas ${icon}"></i>
          </div>
          <h3>${cert.data?.equipment?.description || 'Unknown Equipment'}</h3>
          <div class="worksheet-meta">
            <div class="meta-item">
              <i class="fas fa-hashtag"></i>
              <span>${cert.worksheetNumber || 'N/A'}</span>
            </div>
            <div class="meta-item">
              <i class="fas fa-building"></i>
              <span>${cert.data?.customer?.name || 'N/A'}</span>
            </div>
            <div class="meta-item">
              <i class="fas fa-calendar"></i>
              <span>Issued: ${issueDate}</span>
            </div>
            <div class="meta-item">
              <i class="fas fa-calendar-check"></i>
              <span>Due: ${dueDateFormatted}</span>
            </div>
          </div>
        </div>
        <div class="worksheet-card-footer">
          <button class="btn-sm btn-primary" onclick="previewCertificate('${cert.id}')">
            <i class="fas fa-eye"></i> Preview
          </button>
          <button class="btn-sm btn-secondary" onclick="downloadCertificatePDF('${cert.id}')">
            <i class="fas fa-download"></i> PDF
          </button>
          <button class="btn-sm btn-secondary" onclick="editWorksheet('${cert.id}')">
            <i class="fas fa-edit"></i> Edit Source
          </button>
        </div>
      `;

      return card;
    }

    // Display certificates in list view
    function displayCertificatesList(certificates) {
      const tbody = document.getElementById('certificatesListBody');
      if (!tbody) return;

      tbody.innerHTML = '';

      if (certificates.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="7" style="text-align: center; padding: 40px; color: #666;">
              <i class="fas fa-certificate" style="font-size: 48px; margin-bottom: 12px; opacity: 0.3; display: block;"></i>
              No certificates found
            </td>
          </tr>
        `;
        return;
      }

      // Sort by issue date (newest first)
      certificates.sort((a, b) => new Date(b.dateCompleted || b.dateIssue) - new Date(a.dateCompleted || a.dateIssue));

      certificates.forEach(cert => {
        const row = createCertificateRow(cert);
        tbody.appendChild(row);
      });
    }

    // Create certificate table row
    function createCertificateRow(cert) {
      const row = document.createElement('tr');
      
      const today = new Date();
      const dueDate = new Date(cert.dateDue);
      const thirtyDaysFromNow = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);
      
      let statusClass = 'completed';
      let statusLabel = 'Active';
      
      if (dueDate < today) {
        statusClass = 'expired';
        statusLabel = 'Expired';
      } else if (dueDate <= thirtyDaysFromNow) {
        statusClass = 'expiring-soon';
        statusLabel = 'Expiring Soon';
      }

      const issueDate = new Date(cert.dateCompleted || cert.dateIssue).toLocaleDateString();
      const dueDateFormatted = dueDate.toLocaleDateString();

      row.innerHTML = `
        <td><strong>${cert.worksheetNumber || 'N/A'}</strong></td>
        <td>${cert.data?.equipment?.description || 'Unknown'}</td>
        <td>${cert.data?.customer?.name || 'N/A'}</td>
        <td>${issueDate}</td>
        <td>${dueDateFormatted}</td>
        <td><span class="status-badge status-${statusClass}">${statusLabel}</span></td>
        <td>
          <button class="btn-sm btn-primary" onclick="previewCertificate('${cert.id}')" title="Preview">
            <i class="fas fa-eye"></i>
          </button>
          <button class="btn-sm btn-secondary" onclick="downloadCertificatePDF('${cert.id}')" title="Download PDF">
            <i class="fas fa-download"></i>
          </button>
          <button class="btn-sm btn-secondary" onclick="editWorksheet('${cert.id}')" title="Edit Source Worksheet">
            <i class="fas fa-edit"></i>
          </button>
        </td>
      `;

      return row;
    }

    // Filter certificates
    function filterCertificates() {
      const searchTerm = document.getElementById('certificateSearch')?.value.toLowerCase() || '';
      const statusFilter = document.getElementById('certStatusFilter')?.value || '';
      const equipmentFilter = document.getElementById('certEquipmentTypeFilter')?.value || '';
      const dateFrom = document.getElementById('certDateFrom')?.value || '';
      const dateTo = document.getElementById('certDateTo')?.value || '';

      const worksheets = getWorksheets();
      let certificates = worksheets.filter(ws => ws.status === 'completed');

      // Apply filters
      certificates = certificates.filter(cert => {
        // Search filter
        const matchesSearch = !searchTerm || 
          cert.worksheetNumber?.toLowerCase().includes(searchTerm) ||
          cert.data?.equipment?.description?.toLowerCase().includes(searchTerm) ||
          cert.data?.customer?.name?.toLowerCase().includes(searchTerm) ||
          cert.data?.equipment?.manufacturer?.toLowerCase().includes(searchTerm) ||
          cert.data?.equipment?.serialNumber?.toLowerCase().includes(searchTerm);

        // Status filter
        let matchesStatus = true;
        if (statusFilter) {
          const today = new Date();
          const dueDate = new Date(cert.dateDue);
          const thirtyDaysFromNow = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);

          if (statusFilter === 'active') {
            matchesStatus = dueDate >= today;
          } else if (statusFilter === 'expiring-soon') {
            matchesStatus = dueDate >= today && dueDate <= thirtyDaysFromNow;
          } else if (statusFilter === 'expired') {
            matchesStatus = dueDate < today;
          }
        }

        // Equipment type filter
        const matchesEquipment = !equipmentFilter || cert.data.worksheetType === equipmentFilter;

        // Date range filter
        let matchesDateRange = true;
        if (dateFrom || dateTo) {
          const issueDate = new Date(cert.dateCompleted || cert.dateIssue);
          if (dateFrom) {
            matchesDateRange = matchesDateRange && issueDate >= new Date(dateFrom);
          }
          if (dateTo) {
            const toDate = new Date(dateTo);
            toDate.setHours(23, 59, 59, 999);
            matchesDateRange = matchesDateRange && issueDate <= toDate;
          }
        }

        return matchesSearch && matchesStatus && matchesEquipment && matchesDateRange;
      });

      // Update stats with filtered certificates
      updateCertificateStats(certificates);
      
      // Display filtered certificates
      displayCertificates(certificates);
    }

    // Toggle between grid and list view
    function toggleCertificateView(view) {
      currentCertificateView = view;
      
      const gridContainer = document.getElementById('certificatesGrid');
      const listContainer = document.getElementById('certificatesList');
      const gridBtn = document.querySelector('.view-btn[data-view="grid"]');
      const listBtn = document.querySelector('.view-btn[data-view="list"]');

      if (view === 'grid') {
        if (gridContainer) gridContainer.style.display = 'grid';
        if (listContainer) listContainer.style.display = 'none';
        if (gridBtn) gridBtn.classList.add('active');
        if (listBtn) listBtn.classList.remove('active');
      } else {
        if (gridContainer) gridContainer.style.display = 'none';
        if (listContainer) listContainer.style.display = 'block';
        if (gridBtn) gridBtn.classList.remove('active');
        if (listBtn) listBtn.classList.add('active');
      }

      // Reload certificates in new view
      loadCertificates();
    }

    // Preview certificate
    function previewCertificate(certificateId) {
      const worksheets = getWorksheets();
      const certificate = worksheets.find(ws => ws.id === certificateId);

      if (!certificate) {
        showNotification('Not Found', 'Certificate not found.', 'error');
        return;
      }

      currentPreviewCertificate = certificate;

      // Generate certificate HTML preview
      const previewContent = generateCertificatePreview(certificate, selectedCertificateTemplate);
      document.getElementById('certificatePreviewContent').innerHTML = previewContent;

      // Show modal
      document.getElementById('certificatePreviewModal').style.display = 'flex';
    }

    // Generate certificate preview HTML
    function generateCertificatePreview(cert, template) {
      const issueDate = new Date(cert.dateCompleted || cert.dateIssue).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
      const dueDate = new Date(cert.dateDue).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
      
      // Get test data if available
      const testData = cert.data.testData || [];
      let testDataHTML = '';
      
      if (testData.length > 0) {
        testDataHTML = `
          <table style="width: 100%; border-collapse: collapse; margin: 20px 0; font-size: 11px;">
            <thead>
              <tr style="background: #f5f5f5;">
                <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">Test Point</th>
                <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">Standard Reading</th>
                <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">Unit Reading</th>
                <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">Deviation</th>
                <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">Error %</th>
                <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">Result</th>
              </tr>
            </thead>
            <tbody>
              ${testData.map((row, index) => `
                <tr>
                  <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${index + 1}</td>
                  <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${row.standardReading || ''}</td>
                  <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${row.unitReading || ''}</td>
                  <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${row.deviation || ''}</td>
                  <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${row.errorPercent || ''}</td>
                  <td style="border: 1px solid #ddd; padding: 8px; text-align: center; font-weight: 600; color: ${row.passFailStatus === 'Pass' ? '#4caf50' : '#f44336'};">${row.passFailStatus || ''}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        `;
      } else {
        testDataHTML = `
          <p style="text-align: center; padding: 20px; background: #f5f5f5; border-radius: 8px; color: #666; font-style: italic;">
            Test data will appear here when available
          </p>
        `;
      }

      // Template-specific styling - Professional ISO 17025 Compliant Designs
      let templateStyles = '';
      let certificateContent = '';
      
      switch(template) {
        case 'classic':
          // Classic Professional - Traditional ISO Format
          certificateContent = `
            <div style="font-family: 'Times New Roman', serif; border: 3px solid #003366; padding: 0; background: white;">
              <!-- Header with Logo and Accreditation -->
              <div style="background: linear-gradient(135deg, #003366 0%, #005599 100%); color: white; padding: 30px; text-align: center;">
                <div style="font-size: 32px; font-weight: 700; letter-spacing: 3px; margin-bottom: 8px;">INTERTEK</div>
                <div style="font-size: 18px; letter-spacing: 5px; font-weight: 300;">CALIBRATION CERTIFICATE</div>
                <div style="margin-top: 12px; font-size: 11px; opacity: 0.9;">ISO/IEC 17025:2017 Accredited Laboratory</div>
              </div>
              
              <!-- Certificate Body -->
              <div style="padding: 40px;">
                <!-- Certificate Info Bar -->
                <div style="background: #f8f9fa; border-left: 4px solid #003366; padding: 15px; margin-bottom: 25px;">
                  <table style="width: 100%; font-size: 12px;">
                    <tr>
                      <td style="width: 50%; padding: 4px 0;"><strong>Certificate No:</strong> ${cert.worksheetNumber || 'N/A'}</td>
                      <td style="width: 50%; padding: 4px 0;"><strong>Issue Date:</strong> ${issueDate}</td>
                    </tr>
                    <tr>
                      <td style="padding: 4px 0;"><strong>Calibration Date:</strong> ${issueDate}</td>
                      <td style="padding: 4px 0;"><strong>Next Due Date:</strong> ${dueDate}</td>
                    </tr>
                  </table>
                </div>

                <!-- Customer Information -->
                <div style="margin-bottom: 25px;">
                  <h3 style="background: #003366; color: white; padding: 8px 12px; margin: 0 0 12px 0; font-size: 14px;">CUSTOMER INFORMATION</h3>
                  <table style="width: 100%; font-size: 12px; border-collapse: collapse;">
                    <tr>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0; width: 30%; font-weight: 600;">Customer Name:</td>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${cert.data.customerName || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0; font-weight: 600;">Address:</td>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${cert.data.location || 'N/A'}</td>
                    </tr>
                  </table>
                </div>

                <!-- Equipment Under Test -->
                <div style="margin-bottom: 25px;">
                  <h3 style="background: #003366; color: white; padding: 8px 12px; margin: 0 0 12px 0; font-size: 14px;">EQUIPMENT UNDER TEST</h3>
                  <table style="width: 100%; font-size: 12px; border-collapse: collapse;">
                    <tr>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0; width: 30%; font-weight: 600;">Description:</td>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${cert.data.equipmentDescription || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0; font-weight: 600;">Manufacturer:</td>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${cert.data.manufacturer || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0; font-weight: 600;">Model Number:</td>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${cert.data.modelNumber || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0; font-weight: 600;">Serial Number:</td>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${cert.data.serialNumber || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0; font-weight: 600;">Tag/ID Number:</td>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${cert.data.tagNumber || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0; font-weight: 600;">Range:</td>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${cert.data.range || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0; font-weight: 600;">Accuracy:</td>
                      <td style="padding: 8px; border-bottom: 1px solid #e0e0e0;">${cert.data.accuracy || 'N/A'}</td>
                    </tr>
                  </table>
                </div>

                <!-- Standards Used -->
                <div style="margin-bottom: 25px;">
                  <h3 style="background: #003366; color: white; padding: 8px 12px; margin: 0 0 12px 0; font-size: 14px;">CALIBRATION STANDARDS</h3>
                  <table style="width: 100%; font-size: 11px; border-collapse: collapse;">
                    <thead>
                      <tr style="background: #f5f5f5;">
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Description</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">Certificate No.</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">Cal. Date</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">Traceability</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td style="border: 1px solid #ddd; padding: 8px;">Primary Standard - ${cert.data.worksheetType || 'Pressure'} Calibrator</td>
                        <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">STD-2024-${Math.floor(Math.random() * 1000)}</td>
                        <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${new Date().toLocaleDateString()}</td>
                        <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">NIST</td>
                      </tr>
                    </tbody>
                  </table>
                </div>

                <!-- Calibration Results -->
                <div style="margin-bottom: 25px;">
                  <h3 style="background: #003366; color: white; padding: 8px 12px; margin: 0 0 12px 0; font-size: 14px;">CALIBRATION RESULTS</h3>
                  ${testDataHTML}
                </div>

                <!-- Environmental Conditions -->
                <div style="margin-bottom: 25px; background: #f8f9fa; padding: 15px; border-radius: 6px;">
                  <strong style="font-size: 12px;">Environmental Conditions:</strong>
                  <p style="margin: 8px 0 0 0; font-size: 11px; color: #666;">
                    Temperature: ${cert.data.temperature || '23±2'}°C | Humidity: ${cert.data.humidity || '50±10'}% RH
                  </p>
                </div>

                <!-- Certification Statement -->
                <div style="margin: 30px 0; padding: 15px; border: 1px solid #003366; border-radius: 6px; background: #f0f8ff;">
                  <p style="margin: 0; font-size: 11px; line-height: 1.6; text-align: justify;">
                    This is to certify that the above instrument has been calibrated using standards whose calibration is traceable to national and international standards. The measurements and uncertainties stated in this certificate are valid at the time of calibration. This certificate shall not be reproduced except in full, without written approval of Intertek.
                  </p>
                </div>

                <!-- Signatures -->
                <div style="margin-top: 40px;">
                  <table style="width: 100%; font-size: 11px;">
                    <tr>
                      <td style="width: 50%; padding: 20px 10px 0 0; vertical-align: top;">
                        <div style="border-bottom: 2px solid #333; padding-bottom: 2px; margin-bottom: 8px;"></div>
                        <div><strong>Calibrated By:</strong> ${cert.data.calibratedBy || 'N/A'}</div>
                        <div style="margin-top: 4px; color: #666;">Technician</div>
                      </td>
                      <td style="width: 50%; padding: 20px 0 0 10px; vertical-align: top;">
                        <div style="border-bottom: 2px solid #333; padding-bottom: 2px; margin-bottom: 8px;"></div>
                        <div><strong>Approved By:</strong> Technical Manager</div>
                        <div style="margin-top: 4px; color: #666;">Date: ${issueDate}</div>
                      </td>
                    </tr>
                  </table>
                </div>

                <!-- Footer -->
                <div style="margin-top: 30px; padding-top: 15px; border-top: 2px solid #003366; font-size: 9px; color: #666; text-align: center;">
                  Intertek Calibration Services | ISO/IEC 17025 Accredited | Certificate No: ${cert.worksheetNumber || 'N/A'} | Page 1 of 1
                </div>
              </div>
            </div>
          `;
          break;

        case 'modern':
          // Modern Minimal - Clean Contemporary Design
          certificateContent = `
            <div style="font-family: Arial, sans-serif; border-left: 8px solid #6a1b9a; box-shadow: 0 0 20px rgba(0,0,0,0.1); padding: 0; background: white;">
              <!-- Modern Header -->
              <div style="padding: 40px; background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);">
                <div style="display: flex; justify-content: space-between; align-items: start;">
                  <div>
                    <h1 style="margin: 0; font-size: 28px; color: #6a1b9a; font-weight: 700;">Calibration Certificate</h1>
                    <div style="margin: 8px 0 0 0; font-size: 14px; color: #666;">Intertek Calibration Services</div>
                    <div style="margin: 4px 0 0 0; font-size: 11px; color: #999;">ISO/IEC 17025:2017 Accredited</div>
                  </div>
                  <div style="text-align: right;">
                    <div style="background: #6a1b9a; color: white; padding: 8px 16px; border-radius: 20px; font-size: 12px; font-weight: 600;">
                      ${cert.worksheetNumber || 'N/A'}
                    </div>
                    <div style="margin-top: 8px; font-size: 11px; color: #666;">${issueDate}</div>
                  </div>
                </div>
              </div>

              <!-- Content -->
              <div style="padding: 40px;">
                <!-- Info Cards -->
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
                  <div style="background: #f5f3f7; border-left: 4px solid #6a1b9a; padding: 20px; border-radius: 8px;">
                    <div style="font-size: 11px; color: #666; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 8px;">Customer</div>
                    <div style="font-size: 14px; font-weight: 600; color: #333;">${cert.data.customerName || 'N/A'}</div>
                    <div style="font-size: 12px; color: #666; margin-top: 4px;">${cert.data.location || ''}</div>
                  </div>
                  <div style="background: #f5f3f7; border-left: 4px solid #6a1b9a; padding: 20px; border-radius: 8px;">
                    <div style="font-size: 11px; color: #666; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 8px;">Calibration Period</div>
                    <div style="font-size: 14px; font-weight: 600; color: #333;">Issue: ${issueDate}</div>
                    <div style="font-size: 12px; color: #666; margin-top: 4px;">Due: ${dueDate}</div>
                  </div>
                </div>

                <!-- Equipment Details -->
                <div style="margin-bottom: 30px;">
                  <h3 style="font-size: 14px; color: #6a1b9a; margin: 0 0 16px 0; padding-bottom: 8px; border-bottom: 2px solid #6a1b9a;">Equipment Under Test</h3>
                  <div style="background: white; border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden;">
                    ${[
                      ['Description', cert.data.equipmentDescription || 'N/A'],
                      ['Manufacturer', cert.data.manufacturer || 'N/A'],
                      ['Model', cert.data.modelNumber || 'N/A'],
                      ['Serial Number', cert.data.serialNumber || 'N/A'],
                      ['Tag/ID', cert.data.tagNumber || 'N/A'],
                      ['Range', cert.data.range || 'N/A'],
                      ['Accuracy', cert.data.accuracy || 'N/A']
                    ].map((item, i) => `
                      <div style="display: flex; padding: 12px 20px; ${i % 2 === 0 ? 'background: #fafafa;' : 'background: white;'}">
                        <div style="width: 140px; font-size: 12px; color: #666; font-weight: 600;">${item[0]}</div>
                        <div style="flex: 1; font-size: 12px; color: #333;">${item[1]}</div>
                      </div>
                    `).join('')}
                  </div>
                </div>

                <!-- Test Results -->
                <div style="margin-bottom: 30px;">
                  <h3 style="font-size: 14px; color: #6a1b9a; margin: 0 0 16px 0; padding-bottom: 8px; border-bottom: 2px solid #6a1b9a;">Calibration Results</h3>
                  ${testDataHTML}
                </div>

                <!-- Standards & Traceability -->
                <div style="background: #f8f9fa; border-radius: 8px; padding: 20px; margin-bottom: 30px;">
                  <div style="font-size: 12px; font-weight: 600; color: #333; margin-bottom: 12px;">Standards & Traceability</div>
                  <div style="font-size: 11px; color: #666; line-height: 1.8;">
                    • Calibration performed using NIST traceable standards<br>
                    • Environmental conditions: ${cert.data.temperature || '23±2'}°C, ${cert.data.humidity || '50±10'}% RH<br>
                    • Uncertainty calculated at 95% confidence level (k=2)
                  </div>
                </div>

                <!-- Certificate Statement -->
                <div style="background: #f5f3f7; border-left: 4px solid #6a1b9a; padding: 20px; border-radius: 8px; margin-bottom: 30px;">
                  <p style="margin: 0; font-size: 11px; line-height: 1.7; color: #555; text-align: justify;">
                    This certificate documents the traceability of measurements to the SI units through an unbroken chain of calibrations or comparisons. The results reported are valid at the time and under the stated conditions of calibration. This certificate may not be reproduced, except in full, without prior written consent.
                  </p>
                </div>

                <!-- Signature Section -->
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-top: 40px;">
                  <div>
                    <div style="border-bottom: 2px solid #ddd; padding-bottom: 4px; margin-bottom: 12px; min-height: 40px;"></div>
                    <div style="font-size: 11px; font-weight: 600; color: #333;">${cert.data.calibratedBy || 'Calibration Technician'}</div>
                    <div style="font-size: 10px; color: #999; margin-top: 4px;">Calibrated By</div>
                  </div>
                  <div>
                    <div style="border-bottom: 2px solid #ddd; padding-bottom: 4px; margin-bottom: 12px; min-height: 40px;"></div>
                    <div style="font-size: 11px; font-weight: 600; color: #333;">Technical Manager</div>
                    <div style="font-size: 10px; color: #999; margin-top: 4px;">Reviewed & Approved</div>
                  </div>
                </div>

                <!-- Footer -->
                <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0; text-align: center; font-size: 9px; color: #999;">
                  Intertek Calibration Services • Cert. No: ${cert.worksheetNumber} • Page 1 of 1 • ${issueDate}
                </div>
              </div>
            </div>
          `;
          break;

        case 'technical':
          // Detailed Technical - Engineering Report Style
          certificateContent = `
            <div style="font-family: 'Courier New', monospace; border: 3px solid #00695c; padding: 0; background: white;">
              <!-- Technical Header -->
              <div style="background: #004d40; color: white; padding: 25px; text-align: center; font-family: monospace;">
                <div style="font-size: 24px; font-weight: 700; letter-spacing: 4px; margin-bottom: 6px;">═══ CALIBRATION REPORT ═══</div>
                <div style="font-size: 13px; letter-spacing: 2px;">ISO/IEC 17025:2017 ACCREDITED LABORATORY</div>
                <div style="margin-top: 12px; font-size: 11px; border-top: 1px solid rgba(255,255,255,0.3); padding-top: 10px;">
                  Certificate ID: ${cert.worksheetNumber || 'N/A'} | Issue Date: ${issueDate}
                </div>
              </div>

              <!-- Technical Content -->
              <div style="padding: 35px; font-size: 11px;">
                <!-- Document Control -->
                <table style="width: 100%; border: 2px solid #00695c; margin-bottom: 20px; border-collapse: collapse;">
                  <tr style="background: #e0f2f1;">
                    <td style="padding: 8px; border: 1px solid #00695c; width: 25%; font-weight: 700;">CERTIFICATE NO:</td>
                    <td style="padding: 8px; border: 1px solid #00695c;">${cert.worksheetNumber || 'N/A'}</td>
                    <td style="padding: 8px; border: 1px solid #00695c; width: 25%; font-weight: 700;">DATE ISSUED:</td>
                    <td style="padding: 8px; border: 1px solid #00695c;">${issueDate}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px; border: 1px solid #00695c; font-weight: 700;">CALIBRATION DATE:</td>
                    <td style="padding: 8px; border: 1px solid #00695c;">${issueDate}</td>
                    <td style="padding: 8px; border: 1px solid #00695c; font-weight: 700;">NEXT DUE DATE:</td>
                    <td style="padding: 8px; border: 1px solid #00695c;">${dueDate}</td>
                  </tr>
                  <tr style="background: #e0f2f1;">
                    <td style="padding: 8px; border: 1px solid #00695c; font-weight: 700;">PAGE:</td>
                    <td style="padding: 8px; border: 1px solid #00695c;">1 of 1</td>
                    <td style="padding: 8px; border: 1px solid #00695c; font-weight: 700;">REVISION:</td>
                    <td style="padding: 8px; border: 1px solid #00695c;">00</td>
                  </tr>
                </table>

                <!-- Section 1: Customer Data -->
                <div style="margin-bottom: 20px;">
                  <div style="background: #00695c; color: white; padding: 8px 12px; margin-bottom: 10px; font-weight: 700;">
                    1.0 CUSTOMER INFORMATION
                  </div>
                  <table style="width: 100%; border: 1px solid #00695c; border-collapse: collapse;">
                    <tr>
                      <td style="padding: 6px; border: 1px solid #00695c; width: 30%; background: #f5f5f5; font-weight: 600;">1.1 Customer Name:</td>
                      <td style="padding: 6px; border: 1px solid #00695c;">${cert.data.customerName || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 6px; border: 1px solid #00695c; background: #f5f5f5; font-weight: 600;">1.2 Address/Location:</td>
                      <td style="padding: 6px; border: 1px solid #00695c;">${cert.data.location || 'N/A'}</td>
                    </tr>
                  </table>
                </div>

                <!-- Section 2: Equipment Under Test -->
                <div style="margin-bottom: 20px;">
                  <div style="background: #00695c; color: white; padding: 8px 12px; margin-bottom: 10px; font-weight: 700;">
                    2.0 UNIT UNDER TEST (UUT) SPECIFICATIONS
                  </div>
                  <table style="width: 100%; border: 1px solid #00695c; border-collapse: collapse;">
                    ${[
                      ['2.1 Equipment Description:', cert.data.equipmentDescription || 'N/A'],
                      ['2.2 Manufacturer:', cert.data.manufacturer || 'N/A'],
                      ['2.3 Model Number:', cert.data.modelNumber || 'N/A'],
                      ['2.4 Serial Number:', cert.data.serialNumber || 'N/A'],
                      ['2.5 Asset/Tag Number:', cert.data.tagNumber || 'N/A'],
                      ['2.6 Measurement Range:', cert.data.range || 'N/A'],
                      ['2.7 Stated Accuracy:', cert.data.accuracy || 'N/A'],
                      ['2.8 Resolution:', cert.data.resolution || 'N/A']
                    ].map(item => `
                      <tr>
                        <td style="padding: 6px; border: 1px solid #00695c; width: 30%; background: #f5f5f5; font-weight: 600;">${item[0]}</td>
                        <td style="padding: 6px; border: 1px solid #00695c;">${item[1]}</td>
                      </tr>
                    `).join('')}
                  </table>
                </div>

                <!-- Section 3: Standards & Traceability -->
                <div style="margin-bottom: 20px;">
                  <div style="background: #00695c; color: white; padding: 8px 12px; margin-bottom: 10px; font-weight: 700;">
                    3.0 REFERENCE STANDARDS & TRACEABILITY
                  </div>
                  <table style="width: 100%; border: 1px solid #00695c; border-collapse: collapse; font-size: 10px;">
                    <thead>
                      <tr style="background: #e0f2f1;">
                        <th style="padding: 6px; border: 1px solid #00695c; text-align: left;">STD ID</th>
                        <th style="padding: 6px; border: 1px solid #00695c; text-align: left;">Description</th>
                        <th style="padding: 6px; border: 1px solid #00695c; text-align: center;">Cert. No.</th>
                        <th style="padding: 6px; border: 1px solid #00695c; text-align: center;">Cal. Date</th>
                        <th style="padding: 6px; border: 1px solid #00695c; text-align: center;">Traceability</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td style="padding: 6px; border: 1px solid #00695c;">STD-001</td>
                        <td style="padding: 6px; border: 1px solid #00695c;">Primary ${cert.data.worksheetType || 'Pressure'} Standard</td>
                        <td style="padding: 6px; border: 1px solid #00695c; text-align: center;">NIST-${Math.floor(Math.random()*10000)}</td>
                        <td style="padding: 6px; border: 1px solid #00695c; text-align: center;">${new Date().toLocaleDateString()}</td>
                        <td style="padding: 6px; border: 1px solid #00695c; text-align: center;">NIST</td>
                      </tr>
                    </tbody>
                  </table>
                </div>

                <!-- Section 4: Environmental Conditions -->
                <div style="margin-bottom: 20px;">
                  <div style="background: #00695c; color: white; padding: 8px 12px; margin-bottom: 10px; font-weight: 700;">
                    4.0 ENVIRONMENTAL CONDITIONS
                  </div>
                  <table style="width: 100%; border: 1px solid #00695c; border-collapse: collapse;">
                    <tr>
                      <td style="padding: 6px; border: 1px solid #00695c; width: 30%; background: #f5f5f5; font-weight: 600;">Temperature:</td>
                      <td style="padding: 6px; border: 1px solid #00695c;">${cert.data.temperature || '23 ± 2'} °C</td>
                    </tr>
                    <tr>
                      <td style="padding: 6px; border: 1px solid #00695c; background: #f5f5f5; font-weight: 600;">Relative Humidity:</td>
                      <td style="padding: 6px; border: 1px solid #00695c;">${cert.data.humidity || '50 ± 10'} %RH</td>
                    </tr>
                    <tr>
                      <td style="padding: 6px; border: 1px solid #00695c; background: #f5f5f5; font-weight: 600;">Atmospheric Pressure:</td>
                      <td style="padding: 6px; border: 1px solid #00695c;">${cert.data.pressure || '101.3 ± 1'} kPa</td>
                    </tr>
                  </table>
                </div>

                <!-- Section 5: Calibration Results -->
                <div style="margin-bottom: 20px;">
                  <div style="background: #00695c; color: white; padding: 8px 12px; margin-bottom: 10px; font-weight: 700;">
                    5.0 CALIBRATION MEASUREMENT DATA
                  </div>
                  ${testDataHTML}
                  <div style="margin-top: 12px; padding: 10px; background: #fff3e0; border-left: 4px solid #ff9800; font-size: 10px;">
                    <strong>NOTE:</strong> All measurements reported with expanded uncertainty at 95% confidence level (k=2)
                  </div>
                </div>

                <!-- Section 6: Certification Statement -->
                <div style="margin-bottom: 20px;">
                  <div style="background: #00695c; color: white; padding: 8px 12px; margin-bottom: 10px; font-weight: 700;">
                    6.0 CERTIFICATION STATEMENT
                  </div>
                  <div style="border: 1px solid #00695c; padding: 12px; text-align: justify; line-height: 1.6;">
                    This calibration certificate provides traceability to national standards maintained by NIST, which realizes the International System of Units (SI). The expanded uncertainty is stated as the standard uncertainty multiplied by a coverage factor k=2, providing a confidence level of approximately 95%. This certificate shall not be reproduced except in full without written authorization. The reported results are valid only for the item tested under stated conditions at time of calibration.
                  </div>
                </div>

                <!-- Section 7: Authorization -->
                <div style="margin-top: 30px;">
                  <div style="background: #00695c; color: white; padding: 8px 12px; margin-bottom: 10px; font-weight: 700;">
                    7.0 AUTHORIZATION
                  </div>
                  <table style="width: 100%; border: 1px solid #00695c; border-collapse: collapse;">
                    <tr>
                      <td style="padding: 20px; border: 1px solid #00695c; width: 33%; text-align: center; vertical-align: bottom;">
                        <div style="border-bottom: 2px solid #000; margin-bottom: 8px; padding-bottom: 30px;"></div>
                        <div style="font-weight: 600;">CALIBRATED BY</div>
                        <div style="margin-top: 4px;">${cert.data.calibratedBy || 'Technician'}</div>
                      </td>
                      <td style="padding: 20px; border: 1px solid #00695c; width: 33%; text-align: center; vertical-align: bottom;">
                        <div style="border-bottom: 2px solid #000; margin-bottom: 8px; padding-bottom: 30px;"></div>
                        <div style="font-weight: 600;">REVIEWED BY</div>
                        <div style="margin-top: 4px;">Lead Technician</div>
                      </td>
                      <td style="padding: 20px; border: 1px solid #00695c; width: 33%; text-align: center; vertical-align: bottom;">
                        <div style="border-bottom: 2px solid #000; margin-bottom: 8px; padding-bottom: 30px;"></div>
                        <div style="font-weight: 600;">APPROVED BY</div>
                        <div style="margin-top: 4px;">Technical Manager</div>
                      </td>
                    </tr>
                  </table>
                </div>

                <!-- Footer -->
                <div style="margin-top: 25px; padding-top: 15px; border-top: 3px double #00695c; text-align: center; font-size: 9px;">
                  INTERTEK CALIBRATION SERVICES | ISO/IEC 17025:2017 ACCREDITED | CERTIFICATE: ${cert.worksheetNumber} | PAGE 1/1
                </div>
              </div>
            </div>
          `;
          break;

        case 'premium':
          // Elegant Premium - Sophisticated Presentation
          certificateContent = `
            <div style="font-family: Georgia, serif; border: 6px double #d84315; padding: 15px; background: white; box-shadow: inset 0 0 0 3px white, inset 0 0 0 9px #d84315;">
              <!-- Elegant Header -->
              <div style="text-align: center; padding: 40px 30px; border-bottom: 3px solid #d84315;">
                <div style="font-size: 16px; color: #d84315; letter-spacing: 3px; margin-bottom: 20px;">═══════════════════════</div>
                <i class="fas fa-certificate" style="font-size: 60px; color: #d84315; margin-bottom: 20px; display: block;"></i>
                <h1 style="margin: 0; font-size: 38px; color: #d84315; font-weight: 700; letter-spacing: 3px;">CERTIFICATE</h1>
                <div style="font-size: 20px; color: #666; font-style: italic; margin-top: 8px;">of Calibration</div>
                <div style="margin-top: 20px; padding-top: 20px; border-top: 2px solid #d84315;">
                  <div style="font-size: 16px; font-weight: 600; color: #333;">INTERTEK CALIBRATION SERVICES</div>
                  <div style="font-size: 11px; color: #999; margin-top: 6px; letter-spacing: 1px;">ISO/IEC 17025:2017 ACCREDITED LABORATORY</div>
                </div>
                <div style="font-size: 16px; color: #d84315; letter-spacing: 3px; margin-top: 20px;">═══════════════════════</div>
              </div>

              <!-- Certificate Content -->
              <div style="padding: 40px 30px;">
                <!-- Certificate Number Badge -->
                <div style="text-align: center; margin-bottom: 35px;">
                  <div style="display: inline-block; background: linear-gradient(135deg, #d84315 0%, #bf360c 100%); color: white; padding: 12px 30px; border-radius: 25px; font-size: 16px; font-weight: 600; letter-spacing: 2px; box-shadow: 0 4px 12px rgba(216,67,21,0.3);">
                    ${cert.worksheetNumber || 'N/A'}
                  </div>
                </div>

                <!-- Certification Text -->
                <div style="text-align: center; font-size: 14px; line-height: 1.8; color: #555; margin-bottom: 35px; padding: 0 40px;">
                  <p style="margin: 0; font-style: italic;">
                    This is to certify that the calibration of the equipment described herein has been performed in accordance with ISO/IEC 17025:2017 standards, using reference standards traceable to national metrology institutes.
                  </p>
                </div>

                <!-- Decorative Divider -->
                <div style="text-align: center; font-size: 20px; color: #d84315; margin: 30px 0;">❖ ❖ ❖</div>

                <!-- Customer Section -->
                <div style="margin-bottom: 30px; background: linear-gradient(135deg, #fff8f5 0%, #ffffff 100%); padding: 25px; border-radius: 10px; border: 2px solid #fbe9e7;">
                  <div style="text-align: center; font-size: 12px; color: #d84315; font-weight: 600; letter-spacing: 2px; margin-bottom: 15px;">CUSTOMER DETAILS</div>
                  <table style="width: 100%; font-size: 13px;">
                    <tr>
                      <td style="padding: 8px 0; width: 35%; color: #666; font-weight: 600;">Organization:</td>
                      <td style="padding: 8px 0; color: #333;">${cert.data.customerName || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px 0; color: #666; font-weight: 600;">Location:</td>
                      <td style="padding: 8px 0; color: #333;">${cert.data.location || 'N/A'}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px 0; color: #666; font-weight: 600;">Certificate Date:</td>
                      <td style="padding: 8px 0; color: #333;">${issueDate}</td>
                    </tr>
                    <tr>
                      <td style="padding: 8px 0; color: #666; font-weight: 600;">Valid Until:</td>
                      <td style="padding: 8px 0; color: #333;">${dueDate}</td>
                    </tr>
                  </table>
                </div>

                <!-- Equipment Section -->
                <div style="margin-bottom: 30px;">
                  <div style="text-align: center; font-size: 12px; color: #d84315; font-weight: 600; letter-spacing: 2px; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid #d84315;">EQUIPMENT SPECIFICATIONS</div>
                  <table style="width: 100%; font-size: 12px; border-collapse: separate; border-spacing: 0 8px;">
                    ${[
                      ['Description', cert.data.equipmentDescription || 'N/A'],
                      ['Manufacturer', cert.data.manufacturer || 'N/A'],
                      ['Model Number', cert.data.modelNumber || 'N/A'],
                      ['Serial Number', cert.data.serialNumber || 'N/A'],
                      ['Asset Tag', cert.data.tagNumber || 'N/A'],
                      ['Range', cert.data.range || 'N/A'],
                      ['Accuracy', cert.data.accuracy || 'N/A']
                    ].map((item, i) => `
                      <tr style="background: ${i % 2 === 0 ? '#fafafa' : 'white'};">
                        <td style="padding: 12px 16px; border-left: 3px solid #d84315; font-weight: 600; color: #666; width: 35%;">${item[0]}</td>
                        <td style="padding: 12px 16px; color: #333;">${item[1]}</td>
                      </tr>
                    `).join('')}
                  </table>
                </div>

                <!-- Calibration Results -->
                <div style="margin-bottom: 30px;">
                  <div style="text-align: center; font-size: 12px; color: #d84315; font-weight: 600; letter-spacing: 2px; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid #d84315;">CALIBRATION DATA</div>
                  ${testDataHTML}
                </div>

                <!-- Standards & Conditions -->
                <div style="background: #fafafa; border-left: 4px solid #d84315; padding: 20px; margin-bottom: 30px; border-radius: 6px;">
                  <div style="font-size: 12px; font-weight: 600; color: #333; margin-bottom: 12px;">Standards & Environmental Conditions</div>
                  <ul style="margin: 0; padding-left: 20px; font-size: 11px; color: #666; line-height: 1.8;">
                    <li>Reference standards traceable to NIST</li>
                    <li>Temperature: ${cert.data.temperature || '23 ± 2'}°C | Humidity: ${cert.data.humidity || '50 ± 10'}% RH</li>
                    <li>Measurement uncertainty at 95% confidence level (k=2)</li>
                    <li>Calibration performed per manufacturer specifications</li>
                  </ul>
                </div>

                <!-- Certificate Statement -->
                <div style="background: linear-gradient(135deg, #fff8f5 0%, #ffffff 100%); border: 2px solid #fbe9e7; padding: 25px; border-radius: 10px; margin-bottom: 35px;">
                  <p style="margin: 0; font-size: 11px; line-height: 1.8; color: #555; text-align: justify; font-style: italic;">
                    The measurements documented in this certificate are traceable to the International System of Units (SI) through NIST. This calibration was performed in accordance with documented procedures under controlled conditions. The certificate validity is contingent upon proper equipment handling and storage. Reproduction of this certificate requires prior authorization from Intertek Calibration Services.
                  </p>
                </div>

                <!-- Decorative Divider -->
                <div style="text-align: center; font-size: 20px; color: #d84315; margin: 30px 0;">❖ ❖ ❖</div>

                <!-- Signatures -->
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-top: 40px;">
                  <div style="text-align: center;">
                    <div style="border-bottom: 2px solid #333; padding-bottom: 4px; margin: 0 20px 12px 20px; min-height: 45px;"></div>
                    <div style="font-size: 13px; font-weight: 600; color: #333;">${cert.data.calibratedBy || 'Calibration Technician'}</div>
                    <div style="font-size: 11px; color: #999; margin-top: 6px; font-style: italic;">Calibrated By</div>
                    <div style="font-size: 10px; color: #666; margin-top: 4px;">${issueDate}</div>
                  </div>
                  <div style="text-align: center;">
                    <div style="border-bottom: 2px solid #333; padding-bottom: 4px; margin: 0 20px 12px 20px; min-height: 45px;"></div>
                    <div style="font-size: 13px; font-weight: 600; color: #333;">Technical Manager</div>
                    <div style="font-size: 11px; color: #999; margin-top: 6px; font-style: italic;">Approved By</div>
                    <div style="font-size: 10px; color: #666; margin-top: 4px;">${issueDate}</div>
                  </div>
                </div>

                <!-- Footer Seal -->
                <div style="margin-top: 40px; text-align: center;">
                  <div style="display: inline-block; border: 3px solid #d84315; border-radius: 50%; width: 100px; height: 100px; display: flex; align-items: center; justify-content: center; background: linear-gradient(135deg, #fff8f5 0%, #ffffff 100%);">
                    <div style="text-align: center;">
                      <i class="fas fa-stamp" style="font-size: 30px; color: #d84315; margin-bottom: 4px; display: block;"></i>
                      <div style="font-size: 9px; color: #d84315; font-weight: 600;">CERTIFIED</div>
                    </div>
                  </div>
                  <div style="margin-top: 15px; font-size: 9px; color: #999; letter-spacing: 1px;">
                    INTERTEK CALIBRATION SERVICES • ISO/IEC 17025:2017 • PAGE 1 OF 1
                  </div>
                </div>
              </div>
            </div>
          `;
          break;
      }
      
      return certificateContent;

      return `
        <div style="${templateStyles} padding: 0; background: white;">
          ${headerDesign}
          
          <div style="padding: 30px;">
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
              <tr>
                <td style="padding: 8px; border-bottom: 1px solid #ddd; font-weight: 600; width: 40%;">Certificate Number:</td>
                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${cert.worksheetNumber || 'N/A'}</td>
              </tr>
              <tr>
                <td style="padding: 8px; border-bottom: 1px solid #ddd; font-weight: 600;">Issue Date:</td>
                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${issueDate}</td>
              </tr>
              <tr>
                <td style="padding: 8px; border-bottom: 1px solid #ddd; font-weight: 600;">Due Date:</td>
                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${dueDate}</td>
              </tr>
              <tr>
                <td style="padding: 8px; border-bottom: 1px solid #ddd; font-weight: 600;">Customer:</td>
                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${cert.data.customerName || 'N/A'}</td>
              </tr>
            </table>

            <h3 style="margin: 24px 0 12px 0; color: #333; border-bottom: 2px solid #ddd; padding-bottom: 8px;">Equipment Information</h3>
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
              <tr>
                <td style="padding: 8px; border-bottom: 1px solid #ddd; font-weight: 600; width: 40%;">Description:</td>
                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${cert.data.equipmentDescription || 'N/A'}</td>
              </tr>
              <tr>
                <td style="padding: 8px; border-bottom: 1px solid #ddd; font-weight: 600;">Manufacturer:</td>
                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${cert.data.manufacturer || 'N/A'}</td>
              </tr>
              <tr>
                <td style="padding: 8px; border-bottom: 1px solid #ddd; font-weight: 600;">Model Number:</td>
                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${cert.data.modelNumber || 'N/A'}</td>
              </tr>
              <tr>
                <td style="padding: 8px; border-bottom: 1px solid #ddd; font-weight: 600;">Serial Number:</td>
                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${cert.data.serialNumber || 'N/A'}</td>
              </tr>
            </table>

            <h3 style="margin: 24px 0 12px 0; color: #333; border-bottom: 2px solid #ddd; padding-bottom: 8px;">Calibration Details</h3>
            <p style="margin: 0 0 12px 0; color: #666;">Test points and measurements as recorded during calibration.</p>
            
            <div style="margin-top: 40px; padding-top: 20px; border-top: 2px solid #ddd;">
              <p style="margin: 0; font-size: 12px; color: #666;">
                <strong>Calibrated By:</strong> ${cert.data.calibratedBy || 'N/A'}<br>
                <strong>Date:</strong> ${issueDate}
              </p>
            </div>
          </div>
        </div>
      `;
    }

    // Close certificate preview
    function closeCertificatePreview() {
      document.getElementById('certificatePreviewModal').style.display = 'none';
      currentPreviewCertificate = null;
    }

    // Edit certificate's source worksheet
    function editCertificateWorksheet() {
      if (currentPreviewCertificate) {
        closeCertificatePreview();
        editWorksheet(currentPreviewCertificate.id);
      }
    }

    // Download certificate as PDF
    function downloadCertificatePDF(certificateId) {
      let cert = currentPreviewCertificate;
      
      if (certificateId) {
        const worksheets = getWorksheets();
        cert = worksheets.find(ws => ws.id === certificateId);
      }

      if (!cert) {
        showNotification('Not Found', 'Certificate not found.', 'error');
        return;
      }

      showNotification(
        'PDF Download',
        `Generating PDF for certificate ${cert.worksheetNumber}...\n\nPDF generation will be implemented with a library like jsPDF or PDFKit.\n\nThe PDF will include:\n• Selected template design\n• All calibration data\n• Test results table\n• Signatures and stamps\n• Company branding`,
        'info'
      );

      // TODO: Implement actual PDF generation using jsPDF or similar library
    }

    // Certificate template modal
    function openCertificateTemplateModal() {
      document.getElementById('certificateTemplateModal').style.display = 'flex';
    }

    function closeCertificateTemplateModal() {
      document.getElementById('certificateTemplateModal').style.display = 'none';
    }

    function selectCertificateTemplate(templateName) {
      selectedCertificateTemplate = templateName;
      
      // Visual feedback
      const cards = document.querySelectorAll('.template-card .template-preview');
      cards.forEach(card => {
        card.style.borderColor = 'transparent';
      });
      
      event.target.closest('.template-card').querySelector('.template-preview').style.borderColor = '#1976d2';
      
      showNotification(
        'Template Selected',
        `"${templateName.charAt(0).toUpperCase() + templateName.slice(1)}" template will be used for certificate generation.`,
        'success'
      );

      // If preview is open, refresh it with new template
      if (currentPreviewCertificate) {
        const previewContent = generateCertificatePreview(currentPreviewCertificate, selectedCertificateTemplate);
        document.getElementById('certificatePreviewContent').innerHTML = previewContent;
      }

      setTimeout(() => {
        closeCertificateTemplateModal();
      }, 1000);
    }

    // Export certificate functions
    window.loadCertificates = loadCertificates;
    window.filterCertificates = filterCertificates;
    window.toggleCertificateView = toggleCertificateView;
    window.previewCertificate = previewCertificate;
    window.closeCertificatePreview = closeCertificatePreview;
    window.editCertificateWorksheet = editCertificateWorksheet;
    window.downloadCertificatePDF = downloadCertificatePDF;
    window.openCertificateTemplateModal = openCertificateTemplateModal;
    window.closeCertificateTemplateModal = closeCertificateTemplateModal;
    window.selectCertificateTemplate = selectCertificateTemplate;

    // Note: Certificate loading now handled in main handleNavigation() function

    // ===========================
    // PROFILE PAGE FUNCTIONS
    // ===========================

    // Load profile data from localStorage
    function loadProfileData() {
      const profileData = JSON.parse(localStorage.getItem('userProfile') || '{}');
      
      // Set default values if not in localStorage
      const defaults = {
        fullName: 'E. Mensah',
        jobTitle: 'Lead Calibrator',
        email: 'emensah@intertek.com',
        phone: '+233 20 123 4567',
        department: 'Calibration Services',
        employeeId: 'INT-CAL-001',
        companyName: 'Intertek Testing Services',
        location: 'Accra, Ghana',
        address: 'Plot 123, Industrial Area, Accra',
        labCode: 'LAB-GH-001',
        memberSince: 'Jan 2024',
        avatarUrl: 'https://ui-avatars.com/api/?name=E+Mensah&background=FFB800&color=333&bold=true&size=120'
      };
      
      // Merge with defaults
      const profile = { ...defaults, ...profileData };
      
      // Update all display fields
      document.getElementById('displayFullName').textContent = profile.fullName;
      document.getElementById('displayJobTitle').textContent = profile.jobTitle;
      document.getElementById('displayEmail').textContent = profile.email;
      document.getElementById('displayPhone').textContent = profile.phone;
      document.getElementById('displayDepartment').textContent = profile.department;
      document.getElementById('displayEmployeeId').textContent = profile.employeeId;
      
      document.getElementById('displayCompanyName').textContent = profile.companyName;
      document.getElementById('displayLocation').textContent = profile.location;
      document.getElementById('displayAddress').textContent = profile.address;
      document.getElementById('displayLabCode').textContent = profile.labCode;
      
      // Update form fields
      document.getElementById('editFullName').value = profile.fullName;
      document.getElementById('editJobTitle').value = profile.jobTitle;
      document.getElementById('editEmail').value = profile.email;
      document.getElementById('editPhone').value = profile.phone;
      document.getElementById('editDepartment').value = profile.department;
      document.getElementById('editEmployeeId').value = profile.employeeId;
      
      document.getElementById('editCompanyName').value = profile.companyName;
      document.getElementById('editLocation').value = profile.location;
      document.getElementById('editAddress').value = profile.address;
      document.getElementById('editLabCode').value = profile.labCode;
      
      // Update header display
      document.getElementById('profileUserName').textContent = profile.fullName;
      document.getElementById('profileUserRole').textContent = profile.jobTitle;
      document.getElementById('profileUserEmail').textContent = profile.email;
      document.getElementById('profileMemberSince').textContent = profile.memberSince;
      
      // Update avatar
      if (profile.avatarUrl) {
        document.getElementById('profileAvatarImg').src = profile.avatarUrl;
      }
      
      // Update stats
      updateProfileStats();
    }

    // Update profile statistics
    function updateProfileStats() {
      const worksheets = JSON.parse(localStorage.getItem('worksheets') || '[]');
      const completedCerts = worksheets.filter(w => w.status === 'completed').length;
      
      document.getElementById('profileTotalWorksheets').textContent = worksheets.length;
      document.getElementById('profileCompletedCerts').textContent = completedCerts;
    }

    // Toggle edit mode for profile sections
    function toggleEditMode(section) {
      const viewDiv = document.getElementById(`${section}View`);
      const editDiv = document.getElementById(`${section}Edit`);
      const editBtn = document.getElementById(`edit${section.charAt(0).toUpperCase() + section.slice(1)}Btn`);
      
      if (editDiv.style.display === 'none') {
        viewDiv.style.display = 'none';
        editDiv.style.display = 'block';
        editBtn.innerHTML = '<i class="fas fa-times"></i>';
      } else {
        viewDiv.style.display = 'block';
        editDiv.style.display = 'none';
        editBtn.innerHTML = '<i class="fas fa-edit"></i>';
      }
    }

    // Cancel edit mode
    function cancelEdit(section) {
      toggleEditMode(section);
      loadProfileData(); // Reload original data
    }

    // Save personal information
    document.getElementById('personalInfoForm')?.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const profileData = JSON.parse(localStorage.getItem('userProfile') || '{}');
      
      profileData.fullName = document.getElementById('editFullName').value;
      profileData.jobTitle = document.getElementById('editJobTitle').value;
      profileData.email = document.getElementById('editEmail').value;
      profileData.phone = document.getElementById('editPhone').value;
      profileData.department = document.getElementById('editDepartment').value;
      
      localStorage.setItem('userProfile', JSON.stringify(profileData));
      
      // Update header user info
      const userName = profileData.fullName;
      document.querySelector('.user-name').textContent = userName;
      document.querySelector('.user-dropdown-info h4').textContent = userName;
      document.querySelector('.user-dropdown-info p').textContent = profileData.email;
      document.querySelector('.user-badge').textContent = profileData.jobTitle;
      
      // Update avatar in header
      const avatarName = userName.split(' ').map(n => n[0]).join('+');
      const avatarUrl = `https://ui-avatars.com/api/?name=${avatarName}&background=FFB800&color=333&bold=true&size=64`;
      document.querySelector('.user-avatar img').src = avatarUrl;
      document.querySelector('.user-avatar-large img').src = avatarUrl;
      
      // Save new avatar URL
      profileData.avatarUrl = `https://ui-avatars.com/api/?name=${avatarName}&background=FFB800&color=333&bold=true&size=120`;
      localStorage.setItem('userProfile', JSON.stringify(profileData));
      
      loadProfileData();
      toggleEditMode('personalInfo');
      showNotification('Success', 'Personal information updated successfully!', 'success');
    });

    // Save company information
    document.getElementById('companyInfoForm')?.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const profileData = JSON.parse(localStorage.getItem('userProfile') || '{}');
      
      profileData.companyName = document.getElementById('editCompanyName').value;
      profileData.location = document.getElementById('editLocation').value;
      profileData.address = document.getElementById('editAddress').value;
      profileData.labCode = document.getElementById('editLabCode').value;
      
      localStorage.setItem('userProfile', JSON.stringify(profileData));
      
      loadProfileData();
      toggleEditMode('companyInfo');
      showNotification('Success', 'Company information updated successfully!', 'success');
    });

    // Change profile picture
    function changeProfilePicture() {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = 'image/*';
      
      input.onchange = function(e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function(event) {
            const imageUrl = event.target.result;
            document.getElementById('profileAvatarImg').src = imageUrl;
            document.querySelector('.user-avatar img').src = imageUrl;
            document.querySelector('.user-avatar-large img').src = imageUrl;
            
            // Save to profile
            const profileData = JSON.parse(localStorage.getItem('userProfile') || '{}');
            profileData.avatarUrl = imageUrl;
            localStorage.setItem('userProfile', JSON.stringify(profileData));
            
            showNotification('Success', 'Profile picture updated!', 'success');
          };
          reader.readAsDataURL(file);
        }
      };
      
      input.click();
    }

    // Open change password modal
    function openChangePasswordModal() {
      showNotification('Info', 'Password change functionality will be available in a future update.', 'info');
    }

    // Export profile functions
    window.loadProfileData = loadProfileData;
    window.toggleEditMode = toggleEditMode;
    window.cancelEdit = cancelEdit;
    window.changeProfilePicture = changeProfilePicture;
    window.openChangePasswordModal = openChangePasswordModal;

    // ===========================
    // CONNECTION STATUS MONITOR
    // ===========================
    // This monitors your BROWSER'S internet connection status
    // (not checking if the backend server is running)

    // Update connection status display
    function updateConnectionStatus(isOnline) {
      const statusElement = document.getElementById('connectionStatus');
      const iconElement = document.getElementById('connectionIcon');
      const textElement = document.getElementById('connectionText');

      if (!statusElement || !iconElement || !textElement) return;

      // Remove all status classes
      statusElement.classList.remove('connected', 'disconnected');

      if (isOnline) {
        statusElement.classList.add('connected');
        iconElement.className = 'fas fa-wifi';
        textElement.textContent = 'Online';
      } else {
        statusElement.classList.add('disconnected');
        iconElement.className = 'fas fa-wifi-slash';
        textElement.textContent = 'Offline';
      }
    }

    // Initialize connection monitoring
    function initializeConnectionStatus() {
      // Set initial status based on browser's online status
      updateConnectionStatus(navigator.onLine);

      // Listen for online/offline events
      window.addEventListener('online', () => {
        updateConnectionStatus(true);
        showNotification('Back Online', 'Internet connection restored.', 'success');
      });

      window.addEventListener('offline', () => {
        updateConnectionStatus(false);
        showNotification('No Internet', 'You are currently offline.', 'warning');
      });
    }

    // Initialize when page loads
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeConnectionStatus);
    } else {
      initializeConnectionStatus();
    }

    // Export connection functions
    window.updateConnectionStatus = updateConnectionStatus;

    // ===========================
    // USER AUTHENTICATION & SESSION
    // ===========================

    // Update UI with logged-in user information
    function initializeUserSession() {
      if (!window.currentUser) return;

      const user = window.currentUser;
      
      // Update header user display
      const userName = document.querySelector('.user-name');
      const userRole = document.querySelector('.user-role');
      const userAvatar = document.querySelectorAll('.user-avatar img');
      const userAvatarLarge = document.querySelector('.user-avatar-large img');
      const userDropdownName = document.querySelector('.user-dropdown-info h4');
      const userDropdownEmail = document.querySelector('.user-dropdown-info p');
      const userBadge = document.querySelector('.user-badge');

      if (userName) userName.textContent = user.full_name;
      if (userRole) userRole.textContent = user.job_title || user.role.replace('_', ' ').toUpperCase();
      
      // Update avatar
      const avatarName = user.full_name.split(' ').map(n => n[0]).join('+');
      const avatarUrl = `https://ui-avatars.com/api/?name=${avatarName}&background=FFB800&color=333&bold=true`;
      const avatarUrlLarge = `https://ui-avatars.com/api/?name=${avatarName}&background=FFB800&color=333&bold=true&size=64`;
      
      userAvatar.forEach(img => img.src = avatarUrl);
      if (userAvatarLarge) userAvatarLarge.src = avatarUrlLarge;
      
      if (userDropdownName) userDropdownName.textContent = user.full_name;
      if (userDropdownEmail) userDropdownEmail.textContent = user.email;
      if (userBadge) userBadge.textContent = user.job_title || user.role.replace('_', ' ').toUpperCase();

      // Show/hide menu items based on role
      updateMenuByRole(user.role);
      
      console.log(`✅ User session initialized: ${user.full_name} (${user.role})`);
    }

    // Update menu visibility based on user role
    function updateMenuByRole(role) {
      // Admin sees everything
      if (role === 'admin') {
        // Add admin menu item if it doesn't exist
        const managementSection = document.querySelector('.menu-section:last-child .menu-item:last-child');
        
        // Check if admin menu already exists
        if (!document.querySelector('[data-section="admin"]')) {
          const adminMenuItem = document.createElement('a');
          adminMenuItem.href = '#admin';
          adminMenuItem.className = 'menu-item';
          adminMenuItem.setAttribute('data-section', 'admin');
          adminMenuItem.innerHTML = `
            <i class="fas fa-user-shield"></i>
            <span>User Management</span>
          `;
          managementSection.parentElement.appendChild(adminMenuItem);
        }
      }

      // Viewer role: hide edit/delete buttons (handled in individual sections)
      if (role === 'viewer') {
        // This will be handled by checking window.currentUser.role in action buttons
        console.log('👁️ Viewer mode: Limited permissions');
      }
    }

    // Logout function
    async function logout() {
      if (!confirm('Are you sure you want to logout?')) return;

      try {
        // Call logout API
        await fetchWithAuth('/api/auth/logout', {
          method: 'POST'
        });
      } catch (error) {
        console.error('Logout error:', error);
      }

      // Clear local storage
      localStorage.removeItem('auth_token');
      localStorage.removeItem('user');
      localStorage.removeItem('userProfile');

      // Redirect to login
      window.location.href = '/login.html';
    }

    // Handle logout link click
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize user session
      initializeUserSession();

      // Handle logout click
      const logoutLink = document.querySelector('a[href="#logout"]');
      if (logoutLink) {
        logoutLink.addEventListener('click', function(e) {
          e.preventDefault();
          logout();
        });
      }

      // Update profile data if on profile page
      if (window.currentUser && typeof loadProfileData === 'function') {
        // Merge current user data into profile
        const profileData = JSON.parse(localStorage.getItem('userProfile') || '{}');
        const mergedProfile = {
          ...profileData,
          fullName: window.currentUser.full_name,
          jobTitle: window.currentUser.job_title || window.currentUser.role,
          email: window.currentUser.email,
          phone: window.currentUser.phone,
          department: window.currentUser.department,
          employeeId: window.currentUser.employee_id,
          memberSince: new Date(window.currentUser.created_at).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })
        };
        localStorage.setItem('userProfile', JSON.stringify(mergedProfile));
      }
    });

    // Export auth functions
    window.logout = logout;
    window.initializeUserSession = initializeUserSession;

    // ===========================
    // ADMIN USER MANAGEMENT
    // ===========================

    let currentPage = 1;
    let totalPages = 1;
    let allUsers = [];
    let filteredUsers = [];

    // Load users from API
    async function loadUsers(page = 1) {
      try {
        const response = await fetchWithAuth(`/api/users?page=${page}&limit=10`);
        
        if (!response.ok) {
          throw new Error('Failed to load users');
        }

        const data = await response.json();
        allUsers = data.users || [];
        filteredUsers = [...allUsers];
        currentPage = data.page || 1;
        totalPages = data.pages || 1;

        renderUsersTable();
        updatePagination(data.total || 0);
      } catch (error) {
        console.error('Load users error:', error);
        showNotification('Error', 'Failed to load users', 'error');
        document.getElementById('usersTableBody').innerHTML = `
          <tr>
            <td colspan="7" style="text-align: center; padding: 40px; color: #e74c3c;">
              <i class="fas fa-exclamation-triangle" style="font-size: 24px; margin-bottom: 10px;"></i>
              <p>Failed to load users</p>
            </td>
          </tr>
        `;
      }
    }

    // Render users table
    function renderUsersTable() {
      const tbody = document.getElementById('usersTableBody');
      const emptyState = document.getElementById('usersEmptyState');
      const tableContainer = document.getElementById('usersTableContainer');

      if (filteredUsers.length === 0) {
        tableContainer.style.display = 'none';
        emptyState.style.display = 'block';
        return;
      }

      tableContainer.style.display = 'block';
      emptyState.style.display = 'none';

      tbody.innerHTML = filteredUsers.map(user => {
        const avatar = `https://ui-avatars.com/api/?name=${encodeURIComponent(user.full_name)}&background=FFB800&color=333&bold=true&size=40`;
        const roleColors = {
          admin: '#e74c3c',
          lead_calibrator: '#3498db',
          calibrator: '#2ecc71',
          viewer: '#95a5a6'
        };
        const roleColor = roleColors[user.role] || '#999';
        const statusBadge = user.is_active 
          ? '<span style="background: #d4edda; color: #155724; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 500;">Active</span>'
          : '<span style="background: #f8d7da; color: #721c24; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 500;">Inactive</span>';
        
        const lastLogin = user.last_login 
          ? new Date(user.last_login).toLocaleString('en-US', { month: 'short', day: 'numeric', year: 'numeric', hour: '2-digit', minute: '2-digit' })
          : 'Never';

        // Hide edit/delete for current user or if not admin
        const isCurrentUser = user.id === window.currentUser?.id;
        const canEdit = window.currentUser?.role === 'admin' && !isCurrentUser;

        return `
          <tr>
            <td>
              <img src="${avatar}" alt="${user.full_name}" style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;">
            </td>
            <td>
              <div style="font-weight: 500; color: #333;">${user.full_name}</div>
              <div style="font-size: 12px; color: #999;">${user.job_title || ''}</div>
            </td>
            <td>${user.email}</td>
            <td>
              <span style="background: ${roleColor}; color: white; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 500;">
                ${user.role.replace('_', ' ').toUpperCase()}
              </span>
            </td>
            <td>${statusBadge}</td>
            <td style="font-size: 13px; color: #666;">${lastLogin}</td>
            <td>
              <div style="display: flex; gap: 5px;">
                <button class="btn-icon" onclick="viewUserActivity(${user.id})" title="View Activity" style="font-size: 14px;">
                  <i class="fas fa-history"></i>
                </button>
                ${canEdit ? `
                  <button class="btn-icon" onclick="editUser(${user.id})" title="Edit User" style="font-size: 14px; color: #3498db;">
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="btn-icon" onclick="deleteUser(${user.id})" title="Delete User" style="font-size: 14px; color: #e74c3c;">
                    <i class="fas fa-trash"></i>
                  </button>
                ` : ''}
                ${isCurrentUser ? '<span style="font-size: 11px; color: #999;">(You)</span>' : ''}
              </div>
            </td>
          </tr>
        `;
      }).join('');
    }

    // Update pagination controls
    function updatePagination(total) {
      const countInfo = document.getElementById('usersCountInfo');
      const paginationButtons = document.getElementById('paginationButtons');
      
      const start = (currentPage - 1) * 10 + 1;
      const end = Math.min(currentPage * 10, total);
      countInfo.textContent = `Showing ${start}-${end} of ${total} users`;

      if (totalPages <= 1) {
        paginationButtons.innerHTML = '';
        return;
      }

      let buttons = '';
      
      // Previous button
      buttons += `
        <button class="btn-secondary" onclick="changePage(${currentPage - 1})" 
                ${currentPage === 1 ? 'disabled' : ''} 
                style="padding: 6px 12px; font-size: 14px;">
          <i class="fas fa-chevron-left"></i>
        </button>
      `;

      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) {
          buttons += `
            <button class="btn-secondary" onclick="changePage(${i})" 
                    ${i === currentPage ? 'style="background: #FFB800; color: #333; font-weight: bold;"' : ''}
                    style="padding: 6px 12px; font-size: 14px; min-width: 40px;">
              ${i}
            </button>
          `;
        } else if (i === currentPage - 2 || i === currentPage + 2) {
          buttons += '<span style="padding: 6px; color: #999;">...</span>';
        }
      }

      // Next button
      buttons += `
        <button class="btn-secondary" onclick="changePage(${currentPage + 1})" 
                ${currentPage === totalPages ? 'disabled' : ''}
                style="padding: 6px 12px; font-size: 14px;">
          <i class="fas fa-chevron-right"></i>
        </button>
      `;

      paginationButtons.innerHTML = buttons;
    }

    // Change page
    function changePage(page) {
      if (page < 1 || page > totalPages) return;
      currentPage = page;
      loadUsers(page);
    }

    // Search users
    function searchUsers() {
      const searchTerm = document.getElementById('userSearchInput').value.toLowerCase();
      filterUsers();
    }

    // Filter users by role and status
    function filterUsers() {
      const searchTerm = document.getElementById('userSearchInput').value.toLowerCase();
      const roleFilter = document.getElementById('roleFilter').value;
      const statusFilter = document.getElementById('statusFilter').value;

      filteredUsers = allUsers.filter(user => {
        const matchesSearch = user.full_name.toLowerCase().includes(searchTerm) || 
                             user.email.toLowerCase().includes(searchTerm);
        const matchesRole = !roleFilter || user.role === roleFilter;
        const matchesStatus = !statusFilter || 
                             (statusFilter === 'active' && user.is_active) ||
                             (statusFilter === 'inactive' && !user.is_active);
        
        return matchesSearch && matchesRole && matchesStatus;
      });

      renderUsersTable();
      updatePagination(filteredUsers.length);
    }

    // Refresh users
    function refreshUsers() {
      loadUsers(currentPage);
      showNotification('Success', 'Users list refreshed', 'success');
    }

    // Show add user modal
    function showAddUserModal() {
      document.getElementById('userModalTitle').innerHTML = '<i class="fas fa-user-plus"></i> Add User';
      document.getElementById('userId').value = '';
      document.getElementById('userForm').reset();
      document.getElementById('userIsActive').checked = true;
      document.getElementById('userEmailVerified').checked = false;
      document.getElementById('passwordFieldContainer').style.display = 'block';
      document.getElementById('userPassword').required = true;
      document.getElementById('userSubmitBtn').innerHTML = '<i class="fas fa-save"></i> Create User';
      document.getElementById('userModal').style.display = 'flex';
    }

    // Edit user
    async function editUser(userId) {
      try {
        const user = allUsers.find(u => u.id === userId);
        if (!user) {
          showNotification('Error', 'User not found', 'error');
          return;
        }

        document.getElementById('userModalTitle').innerHTML = '<i class="fas fa-user-edit"></i> Edit User';
        document.getElementById('userId').value = user.id;
        document.getElementById('userFullName').value = user.full_name;
        document.getElementById('userEmail').value = user.email;
        document.getElementById('userRole').value = user.role;
        document.getElementById('userJobTitle').value = user.job_title || '';
        document.getElementById('userIsActive').checked = user.is_active;
        document.getElementById('userEmailVerified').checked = user.email_verified;
        document.getElementById('userPassword').value = '';
        document.getElementById('userPassword').required = false;
        document.getElementById('userSubmitBtn').innerHTML = '<i class="fas fa-save"></i> Update User';
        document.getElementById('userModal').style.display = 'flex';
      } catch (error) {
        console.error('Edit user error:', error);
        showNotification('Error', 'Failed to load user details', 'error');
      }
    }

    // Delete user
    async function deleteUser(userId) {
      const user = allUsers.find(u => u.id === userId);
      if (!user) return;

      if (!confirm(`Are you sure you want to delete user "${user.full_name}"? This action cannot be undone.`)) {
        return;
      }

      try {
        const response = await fetchWithAuth(`/api/users/${userId}`, {
          method: 'DELETE'
        });

        if (!response.ok) {
          throw new Error('Failed to delete user');
        }

        showNotification('Success', 'User deleted successfully', 'success');
        loadUsers(currentPage);
      } catch (error) {
        console.error('Delete user error:', error);
        showNotification('Error', 'Failed to delete user', 'error');
      }
    }

    // Submit user form
    async function submitUserForm(event) {
      event.preventDefault();
      
      const userId = document.getElementById('userId').value;
      const formData = {
        full_name: document.getElementById('userFullName').value,
        email: document.getElementById('userEmail').value,
        role: document.getElementById('userRole').value,
        job_title: document.getElementById('userJobTitle').value,
        is_active: document.getElementById('userIsActive').checked,
        email_verified: document.getElementById('userEmailVerified').checked
      };

      // Only include password if provided
      const password = document.getElementById('userPassword').value;
      if (password) {
        formData.password = password;
      }

      try {
        const url = userId ? `/api/users/${userId}` : '/api/users';
        const method = userId ? 'PUT' : 'POST';

        const response = await fetchWithAuth(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || 'Failed to save user');
        }

        showNotification('Success', `User ${userId ? 'updated' : 'created'} successfully`, 'success');
        closeUserModal();
        loadUsers(currentPage);
      } catch (error) {
        console.error('Submit user error:', error);
        showNotification('Error', error.message || 'Failed to save user', 'error');
      }
    }

    // Close user modal
    function closeUserModal() {
      document.getElementById('userModal').style.display = 'none';
      document.getElementById('userForm').reset();
    }

    // View user activity
    async function viewUserActivity(userId) {
      const user = allUsers.find(u => u.id === userId);
      if (!user) return;

      document.getElementById('userActivityModal').style.display = 'flex';
      document.getElementById('activityLogContent').innerHTML = `
        <div style="text-align: center; padding: 40px;">
          <i class="fas fa-spinner fa-spin" style="font-size: 24px; color: #FFB800;"></i>
          <p style="margin-top: 10px; color: #999;">Loading activity...</p>
        </div>
      `;

      try {
        const response = await fetchWithAuth(`/api/users/${userId}/activity`);
        
        if (!response.ok) {
          throw new Error('Failed to load activity');
        }

        const activities = await response.json();

        if (activities.length === 0) {
          document.getElementById('activityLogContent').innerHTML = `
            <div style="text-align: center; padding: 40px; color: #999;">
              <i class="fas fa-inbox" style="font-size: 48px; margin-bottom: 15px; opacity: 0.3;"></i>
              <p>No activity recorded for this user</p>
            </div>
          `;
          return;
        }

        const activityHtml = activities.map(activity => {
          const date = new Date(activity.created_at).toLocaleString('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          });

          const actionIcons = {
            login: 'fa-sign-in-alt',
            logout: 'fa-sign-out-alt',
            register: 'fa-user-plus',
            password_change: 'fa-key',
            email_verify: 'fa-envelope-open',
            profile_update: 'fa-user-edit'
          };

          const icon = actionIcons[activity.action] || 'fa-circle';

          return `
            <div style="padding: 15px; border-bottom: 1px solid #eee; display: flex; gap: 15px;">
              <div style="flex-shrink: 0;">
                <i class="fas ${icon}" style="color: #FFB800; font-size: 18px;"></i>
              </div>
              <div style="flex: 1;">
                <div style="font-weight: 500; color: #333; margin-bottom: 5px;">
                  ${activity.action.replace('_', ' ').toUpperCase()}
                </div>
                <div style="font-size: 13px; color: #666;">
                  ${activity.details || 'No details available'}
                </div>
                <div style="font-size: 12px; color: #999; margin-top: 5px;">
                  ${date} • IP: ${activity.ip_address || 'N/A'}
                </div>
              </div>
            </div>
          `;
        }).join('');

        document.getElementById('activityLogContent').innerHTML = `
          <div style="max-height: 500px; overflow-y: auto;">
            ${activityHtml}
          </div>
        `;
      } catch (error) {
        console.error('Load activity error:', error);
        document.getElementById('activityLogContent').innerHTML = `
          <div style="text-align: center; padding: 40px; color: #e74c3c;">
            <i class="fas fa-exclamation-triangle" style="font-size: 24px; margin-bottom: 10px;"></i>
            <p>Failed to load activity log</p>
          </div>
        `;
      }
    }

    // Close user activity modal
    function closeUserActivityModal() {
      document.getElementById('userActivityModal').style.display = 'none';
    }

    // Initialize admin dashboard if user is admin
    if (window.currentUser?.role === 'admin') {
      document.addEventListener('DOMContentLoaded', function() {
        // Show admin section in menu (already handled by updateMenuByRole)
        
        // Load users when admin section is shown
        const adminMenuItem = document.querySelector('a[href="#admin"]');
        if (adminMenuItem) {
          adminMenuItem.addEventListener('click', function() {
            loadUsers(1);
          });
        }
      });
    }

    // Export admin functions
    window.loadUsers = loadUsers;
    window.showAddUserModal = showAddUserModal;
    window.editUser = editUser;
    window.deleteUser = deleteUser;
    window.submitUserForm = submitUserForm;
    window.closeUserModal = closeUserModal;
    window.viewUserActivity = viewUserActivity;
    window.closeUserActivityModal = closeUserActivityModal;
    window.searchUsers = searchUsers;
    window.filterUsers = filterUsers;
    window.refreshUsers = refreshUsers;
    window.changePage = changePage;

    // ===========================
    // PERFORMANCE: HIDE LOADING SCREEN
    // ===========================
    window.addEventListener('load', function() {
      // Small delay to ensure everything is ready
      setTimeout(function() {
        const loadingScreen = document.getElementById('appLoadingScreen');
        if (loadingScreen) {
          loadingScreen.classList.add('hidden');
          setTimeout(function() {
            loadingScreen.style.display = 'none';
          }, 500); // Match transition duration
        }
      }, 300);
    });

    // Fallback: Hide loading screen after 5 seconds max
    setTimeout(function() {
      const loadingScreen = document.getElementById('appLoadingScreen');
      if (loadingScreen && !loadingScreen.classList.contains('hidden')) {
        loadingScreen.classList.add('hidden');
        setTimeout(function() {
          loadingScreen.style.display = 'none';
        }, 500);
      }
    }, 5000);
  </script>
</body>
</html>

